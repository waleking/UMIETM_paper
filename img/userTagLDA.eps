%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: timeUserTagLDA.pdf
%%Creator: Adobe Acrobat 8.0
%%For: Waleking
%%CreationDate: 2014-01-01, 22:23:49
%%BoundingBox: 0 0 722 422
%%HiResBoundingBox: 0 0 721.8205 421.9134
%%CropBox: 0 0 721.8205 421.9134
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	1 index dup/ID get exch/Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.30 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.30 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.30 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get ne dup
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
				if
				end
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} (% &end XMP packet& %) ReadBypdfmark_5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xap:CreateDate="2014-01-01T22:16:44+08:00"
   xap:CreatorTool="pdfFactory Pro www.pdffactory.com"
   dc:format="application/pdf"
   pdf:Producer="pdfFactory Pro 3.50 (Windows 7 x64 Chinese (Simplified))">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Waleking</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">timeUserTagLDA.pptx</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -421.913 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 421.913 li
721.82 421.913 li
721.82 0 li
cp
clp
[1 0 0 1 -60.7026 0 ]ct
274.8 213.453 mo
275.04 211.533 li
275.04 209.613 li
275.76 206.013 li
276.48 202.413 li
277.68 199.053 li
279.36 195.693 li
281.28 192.813 li
283.44 189.933 li
285.6 187.293 li
288.24 184.893 li
291.12 182.733 li
294.24 180.813 li
297.36 179.373 li
300.96 178.173 li
304.32 177.213 li
308.16 176.493 li
315.6 176.493 li
319.2 177.213 li
322.8 177.933 li
326.16 179.373 li
329.52 180.813 li
332.64 182.733 li
335.52 184.893 li
337.92 187.293 li
340.32 189.933 li
342.48 192.573 li
344.4 195.693 li
346.08 199.053 li
347.28 202.413 li
348.24 205.773 li
348.72 209.613 li
348.96 211.533 li
348.96 215.373 li
348.72 217.053 li
348.24 220.893 li
347.28 224.253 li
346.08 227.853 li
344.4 230.973 li
342.72 234.093 li
340.56 236.973 li
338.16 239.613 li
335.52 242.013 li
332.64 243.933 li
329.52 245.853 li
326.4 247.533 li
323.04 248.733 li
319.44 249.693 li
315.84 250.173 li
313.92 250.413 li
310.08 250.413 li
308.16 250.173 li
304.56 249.693 li
300.96 248.733 li
297.6 247.533 li
294.24 245.853 li
291.36 244.173 li
288.48 242.013 li
285.84 239.613 li
283.44 236.973 li
281.28 234.093 li
279.36 230.973 li
277.92 227.853 li
276.48 224.493 li
275.76 220.893 li
275.04 217.293 li
275.04 215.373 li
274.8 213.453 li
276.96 215.133 mo
276.96 216.813 li
277.68 220.413 li
278.4 223.773 li
279.6 226.893 li
281.04 230.013 li
282.96 232.893 li
284.88 235.533 li
287.04 238.173 li
289.68 240.333 li
292.32 242.493 li
295.2 244.173 li
298.32 245.613 li
301.44 246.813 li
304.8 247.773 li
308.4 248.253 li
310.08 248.253 li
311.76 248.493 li
313.68 248.253 li
315.36 248.253 li
318.96 247.773 li
322.32 246.813 li
325.44 245.613 li
328.56 244.173 li
331.44 242.493 li
334.08 240.333 li
336.72 238.173 li
338.88 235.773 li
340.8 232.893 li
342.72 230.013 li
344.16 227.133 li
345.36 223.773 li
346.08 220.413 li
346.8 217.053 li
346.8 209.853 li
346.08 206.493 li
345.36 203.133 li
344.16 199.773 li
342.72 196.653 li
341.04 193.773 li
338.88 191.133 li
336.72 188.733 li
334.32 186.333 li
331.44 184.413 li
328.56 182.733 li
325.68 181.053 li
322.32 180.093 li
318.96 179.133 li
315.6 178.653 li
313.68 178.413 li
310.08 178.413 li
308.4 178.653 li
304.8 179.133 li
301.44 179.853 li
298.32 181.053 li
295.2 182.493 li
292.32 184.413 li
289.68 186.333 li
287.28 188.493 li
284.88 191.133 li
282.96 193.773 li
281.04 196.653 li
279.6 199.773 li
278.4 202.893 li
277.68 206.253 li
276.96 209.853 li
276.96 215.133 li
false sop
/0 
[/DeviceGray] /CSA add_res
0 gry
f
true set_gvm
%ADOBeginSubsetFont: Calibri Initial
ct_T42Dict begin
-0.5 -0.305 1.238 0.961
 256 array 0 1 255 {1 index exch /.notdef put} for  /Calibri
Type42DictBegin
[<00010000000c000c000c000c4f532f32f9ddb6d7000000cc000000606376
7420b09bc4d20000012c0000051c6670676df6f64d0c000006480000091a
676c796644c0ccb00000ba740006a8b268656164ecde32e100000f640000
0036686865610dad126500000f9c00000024686d74785230b9e300000fc0
00003c946c6f6361343b41b200004c5400003c9c6d617870214726250000
88f0000000206e616d652aab26970000891000000d53707265706baf02fe
0000966400002410676469720000000000000000000000000003042b0190
00050008059905330000011e05990533000003d0008602000800020f0502
020204030204e00002ff4000acff00000001000000004d53202000400000
feff0600fe0001c4079e02262000019f0000000003b7050e000000200003
0000079e0000fe930000000000000000000000000050006a007300800080
0086008d009300bf00db006200830093009900a000a600a900b000c100c9
00d700000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe79056d000c03b700060013
0000fffaffedfea6ffedfeb8050e000600130000fffaffedfe93050e0013
0420000600130000fffaffedff10ffee050e00130420000600130000fffa
ffeefe93ff10feb80612000a050e0006000d02d2fffafff301fdfffa023f
0006000dff36fffafff302870006000f0000fffafff1079efeaffea70000
0000000000000000000000500051005a005b005c005d0060006100620064
00680069006a006b006c006d006e00680069006e00600067006e00660068
005f00610063006400660068006a006b006c006d006e006f0070006f0072
0074007500760076007000720073007400750076006f0070007100720073
00750077007700780079007a007b007c007d007b007c007d00770079007a
007c0078007a007c007d0078007d007e007f008000810082007e007f0081
0082007e007f008000810082008300840085008600870088008900830084
008500860087008800890083008400850086008700880089008900860087
00880089008a008b008c008d008e008f008a008b008c008d008e008f008a
008b008c008d008e008f008d008a008b008c008d008e008f009000900091
0092009300940095009600980099009b009c009000910092009300940095
0096009700980099009a009e009f00a60090009100950098009f00900091
0096009700bc00c600b500ae00af00b6006800690063006a006f00700071
006f0070007100720066006c006d00700079007c007f0083008600870088
0089008a0074007500760077007a007b007c007d007e008200850086008a
0088008900830078007b00820083008600870088008900760079007a007c
007d007e0083008500880089008a0073007400750077007a007d00880089
008a008b008c008d008e00900094008b008c008d00910092009300940095
008c008d00910095008f009000910092009300940095008b008c008d008e
008f009000910092009300940095008b008c008d008e008f009000910092
00930096009700980099009c0096009700980099009a009b009c00960099
009a009c0096009700980099009a009b009c009700980099009a009b009c
009700980099009a009b009c0096009d00a000a1009d009e009f00a000a1
00a2009d009f00a000a1009f00a2009d009e009f00a000a100a2009d009e
00a000a1009d009e00a000a2009d00a300a400a500a600a700a300a400a6
00a700a300a400a500a600a700a600a300a700a800a900aa00ab00ac00ac
00a800a900aa00ab00ac00a800a900aa00ab00ac00a800aa00ab00ac00ae
00ad00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00ad
00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00af00b0
00b100b200b300b400b500b600b700b800b300ae00af00b000b200b500b6
00b700b800b900ba00bb00bc00be00c000c100c200c200b900ba00bb00bc
00bd00be00bf00c000c100c200c400ba00bb00be00bf00c000c200c300c4
00b900ba00bf00c000c200c600c700c900ca00cb00cc00cf00c500c700ce
00c500c700c800cf00d000d200d300d7010d00d000d100e900d000fd00d0
05e4000e0041000005ba009c009c005e005e4047645f5e5d5c5b5a595855
54535251504f4e4d4c4b4a494847464544434241403f3e3d3c3b3a393837
36352f2e2d2c2826252423221f181411100f0d0b0a090807060504030201
002c4523466020b02660b004262348482d2c452346236120b02661b00426
2348482d2c45234660b0206120b04660b004262348482d2c4523462361b0
206020b02661b02061b004262348482d2c45234660b0406120b06660b004
262348482d2c4523462361b0406020b02661b04061b004262348482d2c01
10203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920b0
ed51582320b04d44235920b0042651582320b00d44235921212d2c202045
18684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c
00b10a0b4323430b2d2c00b0282370b101283e01b0282370b10228453ab1
0200080d2d2c2045b00325456164b050515845441b2121592d2c2045b000
4360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8c
b8100062602b0c642364615c58b00361592d2c8a03458a8a87b0112bb029
2344b0297ae4182d2c4565b02c234445b02b23442d2c4b525845441b2121
592d2c01b005251023208af500b0016023edec2d2c01b005251023208af5
00b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c003c
2d2c20b001610110203c003c2d2c00b00743b006430b2d2c21210c642364
8bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b002
602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c
6423648bb84000626023212d2c4523456023456023456023766818b08062
202d2cb00426b00426b00425b0042545234520b003266062636820b00326
61658a2344442d2c2045b0005458b040442045b04061441b2121592d2c45
b1302f4523456160b0016069442d2c4b5158b02f2370b01423421b212159
2d2c4b515820b0032545695358441b2121591b2121592d2c45b01443b000
6063b0016069442d2cb02f45442d2c452320458a60442d2c45234560442d
2c4b235158b90033ffe0b134201bb3330034005944442d2cb0164358b003
26458a586466b01f601b64b020606620581b21b04059b001615923586559
b02923442310b029e01b2121212121592d2cb0164358b004254564b02060
6620581b21b04059b0016123586559b0292344b00425b00725082058021b
0359b0052510b004252046b0042523423cb0072510b006252046b00425b0
016023423c2058011b0059b0052510b00425b029e0b0072510b00625b029
e0b00425b00725082058021b0359b00425b003254348b00625b00325b001
6043481b2159212121212121212d2cb0164358b004254564b02060662058
1b21b04059b0016123581b6559b0292344b00525b00825082058021b0359
b0042510b005252046b0042523423cb00425b0072508b0072510b0062520
46b00425b0016023423c2058011b0059b0042510b00525b029e0b0292045
6544b0072510b00625b029e0b00525b00825082058021b0359b00525b003
254348b00425b0072508b00625b00325b0016043481b2159212121212121
212d2c02b00425202046b004252342b0052508b003254548212121212d2c
02b0032520b0042508b0022543482121212d2c452320451820b000502058
23652359236820b040505821b04059235865598a60442d2c4b53234b515a
5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b
515a58381b2121592d2cb000214b5458381b2121592d2cb002435458b046
2b1b21212121592d2cb002435458b0472b1b212121592d2cb002435458b0
482b1b21212121592d2cb002435458b0492b1b212121592d2c208a08234b
538a4b515a5823381b2121592d2c0020b200400325b0062649618b381234
2d2c014623466023466123201020468a61b8ff80628ab140408a70456068
3a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a592d2cb01200
4b014b54422d2cb1020042b123018851b1400188535a58b9100000208854
58b202010243604259b12401885158b920000040885458b2020202436042
b12401885458b2022002436042004b014b5258b2020802436042591bb940
000080885458b202040243604259b94000008063b80100885458b2020802
43604259b94000010063b80200885458b202100243604259b94000020063
b80400885458b202400243604259595959592d2c451868234b5158232045
2064b04050587c59688a6059442d2cb00016b00225b0022501b001233e00
b002233eb10102060cb00a236542b00b234201b001233f00b002233fb101
02060cb006236542b0072342b00116012d2c20b82000628a6023622d2cb0
072558001b0159b0042510b00325b0022520b8ffff545821cd1bed5921b0
06255cb006255a58b0092b5920b005254ab0042547b004254760b0062547
b0806361b00225b0005558b00325b00725496359b0082558001b0159b004
25b0062549b009255cb009255a58b0092b59b0072546b0806361b0032520
b0005558631b2159612320b0005558b080631b21b08059b0592bb006255c
586959b00425202010b00048233ab0062658001b0159b0052658b003252f
598a12233221212d2cb00625b00a2587b00625b009254ab0005358b00625
b00a251bb00925b0072559b00225b00225070cb005256323b00625636020
b94000040063535821b00426b00426b00a1bb94000040063655158b00426
65b0042665b00a1bb00426b00426b000b00325b003250b0d0ab0092eb007
25b007250b0d0ab00b2eb00525b0052507595920b0005558b00525b00525
87b00725b007250bb0092510b00b25b0092620b8ffff545821cd1bed59b0
0525b0052507b00825b00b254923b00625b0062587b00a2510b00b25c159
20b00051b800522378b00161b00225b00725b0072507b00a25b00d254961
b08062b00525b005250bb00a252338b00625b0062587b00825b008250bb0
0a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ffa72379
2121212121212121212121212d2c23b0005458b9400000001bb900004000
598ab0005458b9400000001bb90000400059b05b2b2d2c08b0005458b940
0000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b940000000
1bb90000400059b05b2b2d2cb00426b00426080db00426b00426080db05b
2b2d2c204569442d0000000100000005b8529e58e2ca5f0f3cf500190800
00000000bbeb7ccc00000000cbdab383fbfafd8b09ec07b6000000090002
000100000000000100000600fe0001c40aa0fbfafaa009ec000100000000
000000000000000000000f24040e0000000000000000000001cf000004a1
002304a1002304a1002304a1002304a1002304a1002304a1002304a10023
04a1002304a1002304a10023061bffcc061bffcc045a00ac044400610444
00610444006104440061044400610444006104ec00ac04ec009704ff001b
04ff001b03e800ac03e8004503e800ac03e8004603e8004603e8006303e8
005f03e8008103e800ac03e800ac03ad00ac050c005b050c005b050c005b
050c005b050c005b04fc00ac04fc00ac05400020020400ac0204ff4a0204
00280204ff390204ff310204ff500204ff4f0204ff7b0204001e02040027
049200ac028d0007028dffa9042800ac042800ac035d00ac035d00810362
00ac035d00ac0370001c045e00ac06d700ac052a00ac052a00ac052a00ac
052a00ac052a00ac050700ac054c0063054c0063054c0063054c0063054c
0063054c0063054c0063054c0063054c0063054f0063054f006306ef0063
042200ac042200ac05620063045800ac045800ac04580053045800ac03ad
004703ad004703ad001503ad001803ad004703ad004703e6000f03e6000f
03e6000f03e6000f052200aa052200aa052200aa052200aa052200aa0522
00aa052200aa052200aa052200aa052200aa052200aa048a0022071e003d
071e003d071e003d071e003d071e003d0427003003e6001e03e6001e03e6
001e03e6001e03e6001e03bf003b03bf003b03bf001a03bf003b03f40010
03f4001003f4001003f4001003f4001003f4001003f4001003f4001003f4
001003f4001003f40010055cffe2055cffe2040400a103cb006d03cb006d
03cb006d03cb006d03cb006d03cb006d046500a10465006a047700320477
0032038000a103800030038000a103800020038000200380002c03800029
03800042038000a1038000a1035000a10482006c0482006c0482006c0482
006c0482006c047800a10478008c049d004001ec00a101ecff5801ec0019
01ecff4801ecff2701ecff5501ecff5201ecff7101ec001101ec0018041b
00a1023e0000023eff8c03c900a103c900a102e000a102e0008702e600a1
02e000a102f0003203d500a1060600a1049100a1049100a1049100990491
0078049100a1046600a104aa006604aa006604aa006604aa006604aa0066
04aa006604aa006604aa006604aa006604ba006604ba00660606006603c5
00a103c500a104b1006603ed00a103ed00a103ed004503ed00a1034f0049
034f0049034ffff5034ffff6034f0049034f00490359001c0359fffe0359
001c0359001c048d009f048d009c048d009f048d0097048d0075048d009f
048d009f048d009f048d009f048d009f048d009f03fd0021063e0037063e
0037063e0037063e0037063e003703cc0036038300100383001003830010
03830010038300100369004403690044036900080369004403d5005c03d5
005c03d5005c03d5005c03d5001e03d5005c03d5005c03d5005c03d5005c
03d5005c03d5005c062f005c062f005c043400990362005a0362005a0362
004e036200570362005a0362005a076f005a06dd005a0601005a0601005a
04340060048c0060046a00600434006103fb005d03fb005d03fb005d03fb
005d03fb005d03fb005d03fb005d03fb005d03fb005d03fb005d02710025
069a002508d5002504ab0025069b002508d50025043c0025043c0025043c
0025043c0025044f0025044f0025044f0025044f0025043c0025043c0025
067600250676002506760025067600250689002506890025068900250689
00250676002506760025043c0025043c0025067600250609002508430025
043c0025043c002504830025043c00250676002504ed002504ed00250513
00250728002503c4003503c4003503c4003503c4003503c4003504340060
04340060043400600434006004340060043400990434ffad0443fff901d6
008501d6ff6e01d6000f01d6ff5a01d6ff2001d6ff7201d6ff5801d6ff67
01d6001101d6009903c00085041e008801eaffd501eaffd501eaff6303a3
009903a3009903a3009901d6009901d6002a021c009901d6004b01fb001c
02fd0099066400990434009904340099043400990434004e0434009904a2
ff9d043400990438005a0438005a0438005a0438005a0438004f0438005a
0438005a0438005a0438005a043c005a043c005a06cc005a043400990434
00990434006002ca009902ca009902cafff902ca006e0321005103210051
0321fffe0321fffd032100510321005105ae005105ae00510438009901f1
009902ae002102c4002102ae002102bc002604e600210475002104750021
047500210475002104750021047500210475002104750021047500210475
002105130021074b002106d9002106d9002106d9002106d9002106d90021
06d9002106d9002106d9002106d9002106d90021043400940434008e0434
0094043400860434004d0434008904340086043400940434009404340094
04340094039d002205b8003505b8003505b8003505b8003505b800350377
0029039f0022039f0022039f0022039f0022039f00220329005903290059
032900070329005903380072036100640378005d02ac004402e5006c024e
004402e5004802b8004701c100240297002a02e9006c01630061016dffd8
0297006c015e006c0456006c02e6006c02e6004502e5006c02e5004801f6
006c0230004201e3002302e9006c0285001f03ef002c027e00280286001f
023700420254000002750000029400000000fd080000fce8025600000275
0000029400000000fd080000fce803290000035f0000039400000000fc9f
0000fc6703290000035f0000039400000000fc9d0000fc6901ff0000039a
000003a2000003a800000000fc650000fc600324000002f5000003460000
036700000000fca00000fc7e0327000003490000036a00000000fc9d0000
fc7d030c0000030f0000031100000000fcac0000fca90291000002980000
02a000000000fce90000fce202cf000002c2000002b5000003c1000003e1
0000040000000000fc520000fc3101ce000001d6000001ce000001ce0000
0000fd4d0000fd4d027500840000fd7a027f00840000fd7601f700840231
000004a1002304a1ff89045a00ac035300ac0484003a03e800ac03e8fec7
03bf003b04fc00ac04fcfe9e054c0063020400ac0204feb20204ff520428
00ac0495002406d700ac052a00ac03ef0053054c0063054cff1604fc00ac
042200ac03ab004603e6000f03e6001e03e6fe6e03e6001e061300000427
0030060000900550005e0550fef903f4001003f40010040400a102fb00a1
03c90023038000a1038000a103690044047800a1047800a104b4006601ec
00a101ec000001ecff5403c900a103e10011060600a1049100a10387005e
04aa006604aa0066047800a103c500a1035b004b0359001c038300100383
0010038300100552000003cc00360558008704b1006604b10066048a0061
048a00610440009904320064039200180430000003a5005903a5005902c8
004e044c0099044c00990441006004780006023200940232ffec0232ff7a
0232ff0f03a3009903b4000004660099039700220302004d0303004d0438
005a0438005a046c002804120076044100590349005c0319000304550090
045500900455007d0455001605360055053b00550369001205a900940592
006405920064028900000000fd0a03f400000000fc360205009702050097
020500970224004801ff006e01ff006e04a10023044d00ad045a00ac0370
00ac037000ac037600ac0527000303e800ac03e8004503e8006106680055
03ca004b052200ac052200ac052200ac020400ac0204ff50028d00070458
00ac045800ac04e3000306fa000306d700ac04fc00ac070300ac054c0063
054c006304f900ac042200ac0444006103ad004703e6000f0438000f0438
000f04b800220594000004270030051c00ac04f500ac0472007406f200ac
071e00ac04eb000f061800ac044000ac0462005d04610062070800ac0471
005304ff000f04f2000f0504000003f4001003ee00a2040400a1031400a1
031400a1032700a10480000e038000a1038000300380002c057800440380
0057048900a1048900960489009501ec00a101ecff55023e000003ca00a1
03ca00a104320001060600a1047800a104aa006604a90066046a00a103c5
00a103cb006d034f00490359001c039d001e039d001b042f0022050a0000
03cc0036048e00a1046900a103fa006d062300a1064500a1045f00170583
00a103e800a103e4006b03f00066063200a103ff005c045f001f0463001f
044d000006010001063200a103d5005c044300000430000003d5009902c4
009902c4009902d5009901d6ff58047700170434006003fb005d03fb005d
03fb005d0583003e0362004b04530099045300780453008801d6008501d6
ff7201eaffd503b6009903b6009904150016060200130569005f04470099
062800990438005a0431005a042a009904340086043400990362005a0321
00510319000a06640099039f0022039f001803d2002204fe005103770029
045500990433009903c0004205d4009905fe0099044a000a0554009903c2
0099038b004d038d005d05c6009903cb00380453fff90443fff904270018
036e0000036e0000036e00000000fca50000fca5029b010a029b00bf029b
00bf03b5008503b5005e03b5005e03de0064026000ed026000b10364007a
0361005f01ff002a02240048022400bb020500970586009601ff008c01ff
002a01ff008c01ff002a035900880359002b035900880359002b01ff002a
0359002b02b6007402b600c002b6007402b600c004190075041900ad0419
0075041900ad0317000102df001f03af018a03fc01ae0317000b02df002d
027300450273004503fcfff603fcfff6073e0095073e0095073e0095073e
009503fcfff903fc00c10205009702050097026d0085026d007a027400bf
0274005a0284005602840075024000840240007a024a00b0024a0067026d
0085026d007a027400bf0274005a028400560284007503fc009e03fc0077
03fc007803fc007604b0006b043d006e03fc006a03fc003d01c4008b0335
008b057500000556000007f7000007270000073c00000727000006ad00af
06ad00af040e008005a4003f05ac004d02b6000003fc003f04b30049040e
002a03fc0057040e00600434005803fc00b903fc004a040e005303fc006d
0419002b040e003403f30035039f006103be005f039f0058039f00250621
0049083300ac03fc002406e300a10411001d0494005f02cb002303ec0062
03ec00510455002203d700510436007e03b20035043600630436005c040e
0048040e00ae040e0072040e0067040e0020040e0065040e006b040e0063
040e0052040e005204430067028d00190381005c0373005903ac00260368
006103b7006e0349002f03b5004b03bc0052039f0050039f008d039f0065
039f0062039f003a039f0067039f0061039f005e039f0051039f00500494
005f02cb002303ec006203ec00510428002203d700510436007e03b20035
043600630436005c040e0048040e00ae040e0072040e0067040e0030040e
0065040e006b040e0063040e0052040e00520321004801f8002302b0004b
02ad004102db002502a6004502df005b0291003202e1004b02df004402ea
005102df005102d0005701bc006001bc00580321004801f8002302b0004b
02ad004102db002502a6004502df005b0291003202e1004b02df004402ea
005102df005102d0005701bc006001bc0058029d003801f500310252003c
0249002d024a001402460032025100300238002202570025024d0023029d
003801f500310252003c0249002d024a0014024600320251003002380022
02570025024d002302b1ff4b03130044055f004405690044051700440569
0044052e00440553004405c9004e05c9004e0567004705b7004705a20047
05cd0027057d004505a20045052a003505b80048084e0048057d005c07c9
005c03fc004603fc004c03fc006003fc002b03fc005e03fc006003fc0059
03fc004503fc006503fc004c03fc005503fc005603fc003d05e9002c0405
003506d300690443006102ed000703fc00080484003a0550005e04660099
066500660454005b0416004a073e009a073e0096073e00c9073e00c9070e
00af070e013a070e00af070e013a0a4e009a0638009f04660028018a0000
01da00000466000004660000046600000466000004660000046600000466
000004660000046600000466000004660000046600000466000004660000
0466000004660000046601d004a1002304a1002304a1002304a1001904a1
001504a1001d04a1002304a1001c04a1001c04a1001c04a1001d04a10023
03e800ac03e800ac03e8003703e8ffe803e8ffe903e8ffe803e8ffe803e8
003702040015020400a0054c0063054c0063054c0063054c0063054c0063
054c0063054c006305940063059400630594006305940063059400630594
0063052200aa052200aa05c600aa05c600aa05c600aa05c600aa05c600aa
05c600aa03e6001e03e6001e03e6001e03d5005c03d5005c03d5ffbb03d5
ffb103d5ffb803d5ffb803d5005703d5ffb803d5ffb803d5ffb803d5ffb8
03d5005c03fb005d03fb005d03fb003003fbffdb03fbffdb03fbffd903fb
ffcb03fb005d01d6002601d600850438005a0438005a0438ffe80438ffea
0438ffe80438ffea0438005a04a0005a04a0005a04a0005a04a0005a04a0
004904a0005a043400940434009404d2009404d2009404d2008c04d20094
04d2004604d20094039f0022039f0002039f0022046a00530466003803f4
001003f4001003f4ffbd03f4ffc003f4ffbd03f4ffc803f4001003f4ffc8
03f4ffc803f4ffc803f4ffc803f40010038000a1038000a10380fff00380
ffa70380ffa00380ffa20380ff8e0380001101ec000901ec009404aa0066
04aa006604aa002104aa002204aa002104aa002204aa006604ec006604ec
006604ec006604ec006604ec006604ec0066048d009f048d009f0515009f
0515009f0515009a0515009f051500750515009f038300100383fff10383
001001da0000046600000466000004660000046600000466000004660000
046600000466000004c10066052400ac052400ac050600ac049300a10493
00a1047c00a103e6000f02ae00210359001c01d60011043c0025043c0025
043c002506760025067600250676002502f5001c02e7008e0306005a034b
008e02a8008e028c008e0344005a035b008e01a6008e01cb000502e0008e
025b008e046d008e0375008d0375005a02d8008e0375005a029b00570280
0046025700040314005702e3001a0445002202b5001c028b001c02b80050
0000fdfd0000fdfd0466ffff0466ffff0466ffff0466ffff03c1ffff03c1
0000030cffff030c0000030cffff030c0002023100000231000001ffffff
01ffffff01ffffff01ffffff0000fd090000fd0902aa008202aa008202aa
009802aa009801ce008402aa008202aa008202aa008202aa0082027f008e
027f008e0324000002910084046601fd02aa001402aa0013032900000329
0000032900000329ffff039a00000327000003fcfff903fcfff9039a0000
039a00000000ff080000fe4c0000fdfb0000fdfb0000fe3f0000fe3f0000
fdc20000fdc201ce008402aa00140291008302aa001502aa009302aa0093
039a014c039a00000000fdfd0000fdfd0000fd090000fce90000fd090000
feb702aa001402aa001403fcfff90466ffff02aa0098039a0000039a0000
039a0000039a0000039a0000039a000004010014040101470000000002aa
ffff02aaffff01ceffff01ceffff030c0000030c000002aa009302aa00c8
02aa00c803f100c801ceffff01ceffff01ce000001ce000002aa00a003b1
008402aaffff02aaffff075c003c075cffff075cffff075cffff075cffff
075c003f06d0ffff06d0ffff075c0003075c0003075c004001df003001df
003001e7003201e7003200f8004400f8004402070030020700300209004c
0209004c019d0030019d003002070032020700320209004c0209004c0309
004c0309004c015f004c015f004c015200180152001801c3001601c30016
01bf001c01bf001c032700510327005103270051032700510000ffab03bd
ffff041a0000041a00000416000104160001041a0001041a0001041a0001
041a000104010002040100020401000204010002015f004c02aa00c801ce
00c803f100c804ec000f044d00ad0440001e0462005d049d006104ff001b
057e000f044d004c03e8006c0525006403ca005a03adffd6050e005b048a
001c025000ac0226001b042800ac070900aa052affd6054c0063062f0061
04e4000f045800ac03ad004703ab0046043f000f03e6000f0550005e0522
00aa0442001e03bf003b03ca004b03ca005a040e006808ab00ac081500ac
060300ac054700ac07b700ac071400ac04a100230204ff3a054c00630522
00aa052200aa052200aa052200aa052200aa04a1002304a10023061bffcc
050c005b050c005b04280073054c0063054c006303ca0008089500ac0815
00ac050c005b072800ac04d400ac052a00ac04a1ffef04a1002303e8ffe1
03e8006e0204feac0204ff4c054c003b054c00630458ffbf0458006e0522
002f052200aa03ca004b04fc00ac052400ac040e004d03ef003b04a10023
03e800ac054c0063054c0063054c0063054c006303e6001e04a1ffd90444
ffe7035d001b03e6ffb803940064046b001b0545001b0495002403e8ff9e
02a10007050a00630469001a04a0001b04a10023045a00ac045a00ac045a
00990444006104ec00ac04ec00ac04ec00ac04ec00ac04ec00ac03e80084
03e8008403e8008203e8003403e8008103ad00ac050c005b04fc00ac04fc
00ac04fc00ac04fc002804fc00ac0204ff360204ff71042800ac042800ac
042800a0035d00ac035d0035035d0060035d006606d700ac06d700ac06d7
00ac052a00ac052a00ac052a00ac052a00ac054c0063054c0063054c0063
054c0063042200ac042200ac045800ac045800ac04580077045800ac03ad
004703ad004703ad004703ad004703ad004703e6000f03e6000f03e6000f
03e6000f052200aa052200aa052200aa052200aa052200aa048a0022048a
0022071e003d071e003d042700300427003003e6001e03bf001503bf003b
03bf003b035d001b03c2ff9b0433001b045800ac052400ac047100ac03e2
003b0444003803ad005903b500ac046a0027043400990434000403b3005a
043400600430005d0271ffee064300990434009903a300990241002703b4
0014044c0099053e0059043400990321005102e0002102ae002103fc001b
0329005903ca004b0366003a03680050075d006003c00099061e009903d5
005601d6ff570438005a0434007a04340088043400880434008804340088
03fb006203d5005803d50058062f005c044cffe203c4003503a3003a0438
005a0438005a03ca002e01eaff60075d006003c400350434009903d5ffbf
03d5005c03fbffe203fb005d01d6fece01d6ff650438ffed0438005a02ca
ff7302ca00100434ffff0434008703ca004b0434005104cd0060040e0052
034c005903d5005c03fb005d0438005a0438004f0438005a0438005a039f
00220289009804eb009902ae002106930060069200600362fff003210051
032900590394006403fb003c0240fff70240fff70434006002ff002703e2
002203720049040e00720321005101f300ad032900ad049700ac029b010a
03d5005c0434009904340099043400860362005a04340060043400600434
0060043400600434006003fb005d03fb005d03fb005d03fb003f03fb005d
0271002503c40035043400990434009904340067043400130434009401d6
ff1f01d6ff1f01d6ff5a03a3009903a3009903a3006b01d6008901d6ff58
01d6ff5801d6ff5906640099066400990664009904340099043400990434
0086043400860438004f0438004f0438005a0438005a0434009904340099
02ca009902ca008a02ca000a02caffff0321005103210051032100510321
00030321005102ae002102ae002102aeffd202aeffd20434008904340041
0434007b0434004d04340086039d0001039d002205b8003505b800350377
002903770029039f00220329000103290059032900000434008602aeffc6
05b80035039f002203d5005c01f100530241002703d5002902aeff960463
009903db00990344005903c200360362003b02ee003c03190099053b0055
0471000803ee00a203ee001403cb004803fc006d0477003204d3000803ee
00530380007204a40066038a00680350ffe80482006c03f300130232008e
01ecfffe03c900a1063200910491ffe804aa00660592006e0433000803ed
00a1034f0053035b004b038300080359001c04b10066048d009f03b70010
03690044039000570393006b0398005507ce00a1085500ac055a00a105cd
00ac06cf00a1076800ac03f4001001ecff4704aa0066048d0096048d009f
048d009f048d009f048d009f03f4001003f40010055cffe20482006c0482
006c03c9005204aa006604aa00660390000007ce00a1085500ac0482006c
065500a1046200a0049100a103f4ffc503f400100380ffb10380004d01ec
fed001ecff7004aa001d04aa006603edffa403ed0064048d0000048d009f
039000570478008c049300a103c50057038c004403f40010038000a104aa
006604aa006604aa006604aa00660383001003f4001003cb002402e00027
0359ffeb0339005004040027048d002703fd00210380ffff023e0000048b
006603ed00270383000c039000550339005001f300ac032900ac049700ac
026000ed03f40010040400a1040400a10404006e03cb006d046500a10465
00a104650081046500a1046500950380002a038000260380004103800000
0380004a035000a10482006c047800a1047800a10478009a047800200478
00a101ecff2a01ecff5503c900a103c900a103c9007e02e000a102e00000
02e0002802e00024060600a1060600a1060600a1049100a1049100a10491
00a1049100a104aa006604aa006604aa006604aa006603c500a103c500a1
03ed00a103ed00a103ed003e03ed0091034f0049034f0049034f0049034f
0000034f00490359001c0359001c0359001803590019048d009f048d0079
048d009f048d0075048d009f03fd002103fd0021063e0037063e003703cc
003603cc003603830010036900050369004403690020047800a10359000a
063e00370383001003f4001002e00027035effa703c5002703ed00a104b6
00a103ef00a10369004403cb004803500060039900a1043c0025043c0025
0447002504470025043c0025043c0025044f0025043c0025043c00250676
002506760025068200250682002506760025067600250689002506760025
067600250475002104750021047500210475002104750021047500210475
0021047500210475002106d9002106d9002106d9002106d9002106d90021
06d9002106d9002106d9002106d9002103d5009604340060043400990434
00990362003b039b005a043400600434006003fb006203fb0062051b0065
0362005a0362004b0435004b043b005d0241fff704340060043400600451
005a039d001f03d0001e0433009404340099043400990241002701d6fff3
0232009401d6009902e7ffa702f9002701d6009904860099066300940663
0094066400990434ffc204340099045300990438005a05b3005a05920064
0536005502ca002302ca002302ca002302ca009902ca0099028e0094028e
002303980085039800850321005101eaffd50242fff801eaffd5028affc4
02ae004102ae002104a400270476004904550090039d002205b80035039f
00220351001f0329005903d3005903bc004b03bb0056039400640394005e
039400640362005a0507005f03d50099043b005a046b005a04470099028a
ffc403a300270319009904340060039400640394005e066f006006d40060
0719006004f3002103c40021057a0021060c002504ae00990469009903ef
002c03ef00700434ffd5044dffd503d60010050fffe3062f006204120027
03cb006a0444009904590030033f0099036f005501d60085022700000391
009802f000300569005f045300990474005a03cb006304a9006604a80066
0528001406cc00560368003a0438005a0438005a03a8009903cf005203cf
0052033f001b046a009a0465004b05c7004b0664014c03de0020060e0035
034f0042032f00380321005103d0001e02f2009903de00200450009903a8
0099052f0083040e000102f5001c03f1000002e7008e02fb0027034b008e
02a8008e02a800500344005a035b008e01a6008e01cb000502e0008e025b
008e046d008e0375008d0375008d0375005a02b2004802d8008e029b0057
02570004031400570445002202ac004402ac006c02e50048042b004402e5
006c02e5004802b8004702b8004702770046027700460297002a01630061
0297006c0456006c02e6006c02e60045024e003602e6004502e6004502e5
006c01e3002302e9006c02db00460456006c0285001f024a000d02be006c
024600230283002803650055025f00180163006101f6006c02e9006c0285
001f02be006c0246002302e5006c03650050025f00180694009404bbffa7
04bd0060030affa7069cffe504b4002204beffa70352ffa7031affa7039d
0014030fffa70329ffc203c4003b0304006e03c400350688002102410027
026900270468002704db002704c40027043400990451006002710025054c
0060041e009901f0006b067f0099045100990434009902ca006a037b0051
02faffd5039d002203ed0029033c0059047c005c04d800600434006003fb
005d0362005a0362004b03fb006201d600850362003b0233001e04d80094
0376004b02e5006b024e0044026e004402b200440277004201c1002401c1
00070297002a02e9006c0192000001aa006c0163006d0192000001e50000
0194006c017b00530224006e0456006c0456006c031b0000031c006c0304
006e02e600450336004502300042016dffd801e4002302e9000002b8002c
02e6006e02e6006e0285001f023700420294004202a600420272003c02e6
004502e9006c02e9006c016dffd801f6006c01f6002502030025028b006c
03ef002c0286001f01c400540334005401ff008c01ff002a01ff008c01ce
008401ce0084029900650299006c03fc004503fc0065044b0044044b0044
025100f20256000002540000025100f20327000002540000025600000239
00980239009801ce008401ce008402aa008202aa008202aa008202aa0082
02aa004b02aa009302610024015e006c02300042027e00280299006c0310
009603100096031000960310009603100096045700960457009604570096
045700960310004304570043045700430457004304570043045700430457
00430457002f0457002f0457002f0457002f0457002f0310002f04570025
045700250457002504570025045700250310001a0457001a0457001a0457
001a0457001a0457001a0310004204570042045700420457004204570042
045700420457009604570096045700960457009603100042045700420457
0042045700420457004204570042045700420457002f0457002f0457002f
0457002f0457002f0310002f0457002f0457002f0457002f0457002f0457
002f03100026045700260457002604570026045700260457002603100042
045700420457004204570042045700420457004204570096045700960457
009604570096031000420457004204570042045700420457004204570042
031000260457002604570026045700260457002604570026031000230457
0023045700230457002304570023045700230310002f0457002f0457002f
0457002f0457002f0457002f0310004b0457004b0457004b0457004b0457
004b0457004b045700960457009604570096045700960310004204570042
045700420457004204570042045700420310001a0457001a0457001a0457
001a0457001a0457001a0310002404570024045700240457002404570024
045700240310002f0457002f0457002f0457002f0457002f0457002f0310
004e0457004e0457004e0457004e0457004e0457004e0457009604570096
045700960457009602aa006202aa006203290000049a00000359002b02aa
008502aa008502aa00c802aa00c8029100840254000003c1ffff03c10000
039a0000022400bb02aa009802aa009802aa009802aa00980440fff60440
fff60302009803270000032700000324000002aa0000071200d4071200d4
02ac004402b8004702e60045027e002802b8004701d9ffff01d9ffff01d9
000001d90000028900000289000002890000028900000000fc660000fc66
032900000329000003290000032900000324000003240000032900000329
00000329000003290000032400000324000003f4000003f4000003f40000
03f40000032400000324000003270000030c000001ffffff01d900000327
000003290000032900000329000004660000046600000466000004660000
03f4000003f4000003f4000003f40000023200b6023200b6054c00630444
006104440043044400610444004303e6000e0456fec803e6000e03ad00ac
054c0063045d001e059700ac04a2000f04440061042200ac043200640375
005a037500420478000604d700510684001404120076041200030362005a
0362003b0362005a0362003b053b0055037800940438005a0399001404c5
009904a2000f0349005c01eaffd50476ffd504d7005104a9006603cb006d
03cb004803cb006d03cb00480389001a0389fe6f0389001a035000a104b1
005b03e2001e050000a1045d002a03db006d03c500a104a1ffc504a1fe8a
04a1fe6204a1ff2204a1ffc604a1fe8b04a1fe6204a1ff2204a1ff8004a1
ff5804a1002304a1002304a1002304a1ffc504a1fe8a04a1fe6204a1ff22
04a1ffc604a1fe8b04a1fe6204a1ff22066500230665ffc50665fe8a0665
fe620665ff220665ffc60665fe8b0665fe620665ff2203e8fef004bdfe82
04bdfe7a03e8fef004c1fe8604bdfe7a03e8fea403e8fe9504fcfef005d1
fe8205d1fe7a0559feaa04fcfef005d1fe8205d1fe7a0559feaa04fcfea4
04fcfe9504fc00ac04fcfef005d1fe8205d1fe7a0559feaa04fcfef005d1
fe8205d1fe7a0559feaa06c000ac06c0fef00795fe820795fe7a071dfeaa
06c0fef00795fe820795fe7a071dfeaa0204fef002d9fe8202d9fe7a0261
feaa0204fef002d9fe8202d9fe7a0261feaa0204fea40204fe950204ff4e
0204ff7a054cff0605f5fe82060cfe7b054cff0605f2fe7f0605fe74054c
fecf054cfeac0422fef003e6fe940517fe820513fe7e049ffeaa03e6fe47
03e6fe4703e6001e03e6001e0550ff0605f2fe7b060dfe780599feaa0550
ff0605f2fe7b0611fe7c0599feaa0550fecf0550feac0550005e0550ff06
05f2fe7b060dfe780599feaa0550ff0605f2fe7b0611fe7c0599feaa0714
005e0714ff0607b6fe7b07d1fe78075dfeaa0714ff0607b6fe7b07d5fe7c
075dfeaa048a0061048a0061048a0061048a0061048a0061048a0061048a
0061048a0061048a0061048a0061048a005a048a0061048a0061048a0061
048a0061048a0061048a0061048a0061048a0061048a0061048a0061048a
0061048a0061048a0061048a005a03a5005903a5005903a5004f03a50059
03a5005203a5005203a5005903a50059044c0099044c0092044c008f044c
0094044c0099044c0092044c0092044c0094044c0099044c0099044c0059
044c0099044c0099044c0092044c008f044c0094044c0099044c0092044c
0092044c0094044c0099044c0099044c0059023200010232ff860232ff83
0232ff62023200000232ff860232ff860232ff600232ff100232fecf0232
ff600232ffef0232ff7b0232ff290232ff690232ff680438005a0438005a
0438005a0438005a0438005a0438005a0438005a0438005a041200760412
007604550090045500820455008204550084045500900455008204550082
045500840455001204550010045500800455009004550090045500410455
00710455007d059200640592006405920064059200640592006405920064
059200640592006405920064059200640592006405920064059200640592
006405920064059200640592006405920064059200640592006405920064
059200640592006403f4001003f4001003f4001003f4001003f4001003f4
001003f4001003f4001003f4001003f4001003f4001003f4001003f40010
03f4001003f4001003f4001003f4001003f4001003f4001003f4001003f4
001003f4001005b9001005b9001005b9001005b9001005b9001005b90010
05b9001005b9001005b90010038000a10380004903800049038000a10380
004903800049038000a10380007b047800a1047800a1047800a1047800a1
047800a1047800a1047800a1047800a1047800a1047800a10478006f0478
00a1047800a1047800a1047800a1047800a1047800a1047800a1047800a1
047800a1063c00a1063c00a1063c00a1063c00a1063c00a1063c00a1063c
00a1063c00a1063c00a101ec000901ecff6201ecff6201ecff6501ec0009
01ecff6201ecff6201ecff6501ecff1001ecfee901ecff6401ec000001ec
ff8c01ecff2a01ecff5301ecff7004aa006604aa006604aa006604aa0066
04aa006604aa006604aa006604aa006603c500a103c500a1038300100389
001a038300100389001a038300100389001a038300100389001a03830010
0389001a038300100389001a038300100389001a038300100389001a0383
00100389001a038300100389001a0383fff50389fff5038300100389001a
038300100389001a04b1006604b1006604b1006604b1006604b1006604b1
006604b1006604b1006604b1006604b1006604b1006604b1006604b10066
04b1006604b1006604b1006604b1006604b1006604b1006604b100660675
006606750066067500660675006606750066067500660675006606750066
0675006604a1002304a1ffc504a1fe8a04a1fe6204a1ff2204a1ffc604a1
fe8b04a1fe6204a1ff2204fc00ac04fcfef005d1fe8205d1fe7a0559feaa
04fcfef005d1fe8205d1fe7a0559feaa0550005e0550ff0605f2fe7b060d
fe780599feaa0550ff0605f2fe7b0611fe7c0599feaa066500230665ffc5
0665fe8a0665fe620665ff220665ffc60665fe8b0665fe620665ff2206c0
00ac06c0fef00795fe820795fe7a06c0fe4d06c0fef00795fe820795fe7a
06c0fe4d0714005e0714ff0607b6fe7b07d1fe780714fe610714ff0607b6
fe7b07d5fe7c0714fe6101d9ffff01d900000289000002890000039a0000
03290000032900000324000003290000032900000324000003f4000003f4
00000324000001d9000003270000030c0000023200b601c4007901c40079
01c40079054e00ac0440000a042200ac0366001b044100ac06b2005503ca
004b04a500ac045800ac046a001b050c000f052400ac05b100ac073800ac
052b00630444006103e6000f03e6001e03e6001e0476003005d2000f049a
007404720074047200ad05f6002805f60028020400ac06680055045f00ac
050e000304fc00ac04fc00ac04720074070700ac04a1002304a10023061b
ffcc03e8005905250064052500640668005503ca001503ca004b052200ac
052200ac054c0063054c0063054c00630462004c0438000f0438000f0438
000f04720071035300ac061800ac0366001b048500300427003004400035
065d0037061d003d041a003d070f0003072800ac0515005b0521000f03ca
005a05090003045f009903df00270434009902f90027039f009905c0003e
0362004b03f4009903b6009903eb00270447000a0471009904d8009905f1
0099046f00590362005a0319000a039d0022039d002203b2002904c5000a
03ea004203c0004203c0009904c8001904c800190583003e03cf00990421
0016044700990454009903c0004205b6005f020400ac03d5002e03d50058
062f005c03fb005603fb006203fb00620583003e0362000803bc004b0453
0095045300970438005a0431005a0431005a038b0004039f0022039f0022
039f002203c0002902c400990554009902f9002703b10029037700290434
006006550060059b004b03ba004b061f001606500099044500500481000a
0362005a042b001604a800a103e8002703c500a10314002703ec00a105d0
004403800057041c00a103ca00a103ca002704530017049800a1050100a1
067700a104a2006503cb006d0359001c0383001003830010041300360545
001c041a006d03fa006d03fa00a1054f0020054f002001ec00a105780044
03ff00a1045a0001047800a104a100a103fa006d062f00a103f4001003f4
0010055cffe20380004204a2006504a20065057800440380000303900057
048900a0048900a004aa006604a9006604a9006603e4001e039d001e039d
001e039d001e03fa0044031400a1058300a1031400270417003603cc0036
03e8004a0588004a0559007203d8007205d20001061900a10488006c0444
001c03800068045c00010400000008000000040000000800000002af0000
02000000015500000450000001bc00000199000001000000000000000000
ffdc0000ff25040e0024040e00240329000003fcfff901ff008c03580088
01c400540334005404a400540476010a03fcfffb0273004404ee004f0444
00610444006103ad0027040e005306640099052a0020076000ac064800ac
071e002005f500ac0428001b03e6000f08a80032043afffe0482002104b2
005b0495002003ad0020044400610621004906210065057800e6059d00e6
03fc005e070100bc03fc0062045201d7045200be0400fff6040001bd0400
01bd0400fff6040001bd0400fff6070900aa045c005b047200ad04440071
04d0003a0562007403c9001006640094042f005f04180015035a0053040b
00300441006f03260010032700030327000303270003025400c0025400c0
025400c8025400c802aaff8c02aaff8c04e0005907f4000a07e200140798
0003076c0061064100ac050b002406a700ac05c80055073f00ac03ca0021
0600009004b8001c085c0063054c003b076c0061076c006104440061056a
0022053400990433001b05af00990480001b060b0099034e001605a90094
03d2ffc40745005a049c005a06420059056a00220362005a06b8006d05c3
00a10453001205c000a1050b0046066400a10380002205580087042e0022
07f10066050f006806b0006d06b8006d039c006d03c7009602aa00db040e
008d0000ffdc0000fe5101cf0000022400bb01c700000163006102b1ff4b
0aa000b404d5009202d5008302d5008304d500b202d500700aa000b40aa0
00b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b4
0000fc48000000000000fd170000000000000000039a0000039a00000324
00000324000003240000039a000003240000032400000256000003290000
0329000003bdffff02aaff8c055001e5027f008403240000039a00000256
000000000027000000e1000000ed0000001b032400000324000003240000
032400000324000003240000032400000324000003240000032400000000
0000000000000000000000000000039a0000039a00000346000000000027
03c10000030f00000346000003460000039a0000034800000348000003a2
000003a2000002560000035f00000000009e00000067000000220000009e
0000009e0000009e0000009e0000009e0517fe820513fe7e049ffeaa03e6
fe4703e6fe4703e6000e03e6000e03f4001003f4001003f4001005b80010
05b8001005b80010047800a1047800a10478006f063c00a1063c00a1063c
006f0383ffc80383ffc80383001004b1006604b1006604b1006606750066
06750066067500660000fdbc0000fd1a0000fd770000fd4f0000fbfe0000
fbfa0000fc000000fbfa0000fc000000fbfa0000fc000000fbfa0000fc00
0000fc000000fc000000fc000000fc000000fc000000fc000000fc000000
fdd00000fc300000fc300000fbff0000fbff0000fbff0000fbff0000fbff
0000fc000000fcac0000fcad0000fcac0000fcac0000fd1b0000fd1b0000
fd340000fd340000fd340000fd340000fd600000fd600000fd730000fd73
0000fdcf0000fd5f0000fd5f0000fd5f0000fd5f0000fd7f0000fd7f0000
fca10000fd6f0000fdfd0000fcef0000fcf20000fca00000fca00000fcae
0000fcad0000fc660000fca00000fc2f0000fc2f0000fc660000fc5f0000
fdd00000fcf10000fd6d0000fcf30000fd710000fd710000fdb10000fc65
0000fcf10000fcf10000fc2f0000fbff0000fd770000fc660000fc660000
fc650000fc650000fc650000fc650000fc460000fd790000fcde0000fcde
0000fd4b0000fd4b0000fca80000fca80000fd710000fda60000fda60000
fce30000fd4c0000fd4c0000fd4b0000fd4b0000fd7e0000fcdf0000fcde
0000fcde0000fc8f0000fc520000fc520000fc520000fc520000fc920000
fc970000fc970000fc560000fc560000fc910000fd820000fd820000fd70
0000fd700000fdfa0000fdfa0000fd5f0000fd5f0000fd790000fd790000
fd8f0000fd8f0000fd6e0000fd6e0000fd7a0000fd7a0000fcfb0000fcfb
0000fdb60000fdb60000fda80000fda80000fd680000fd680000fd710000
fd710000fcf10000fcf10000fcf10000fcf10000fc540000fc260000fc26
0000fc290000fc290000fc270000fc270000fc270000fc270000fc350000
fc350000fc350000fc350000fdb60000fda80000fda80000fce30000fd46
0000fd460000fd470000fd470000fd020000fd020000fd020000fd020000
fc650000fc660000fc9f0000fc9f0000fc9f0000fc9f0000fca10000fca1
0000fc9f0000fc9f0000fc9f0000fc9f0000fca10000fca10000fc370000
fc370000fc370000fc370000fca00000fca00000fc9f0000fcad0000fd33
0000fd470000fc9f0000fc9f0000fc9f0000fc9f0000fbff0000fc020000
fbff0000fc000000fc370000fc370000fc370000fc370000fdbd0000fdbd
0000fca20000fca30000fca30000fdd10000fdd10000fdd10000fdd10000
fc6a0000fc6a03e6fe940389ffcb0389ffcb0389001a01d6008904340060
043400600434006004340060043c0025067600250aa000b40aa000b40aa0
00b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b4
0aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa0
00b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b4
0aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b4047d
00a3040e00230054001b00>
<00000000000001420000014200000142000001420000025e000002740000
028c000002a4000002bc000002d4000002ec000003040000031c00000334
0000045a000005a4000005bc00000728000008220000083a000008520000
086a00000882000009ba00000a9400000aac00000abc00000baa00000ca2
00000cb800000cd000000ce600000cfc00000d1200000d2800000d400000
0d5800000e8a00000f5c000010aa000010c2000010da000010f20000110a
0000124a0000126200001380000014160000142e000014440000145c0000
14740000148c000014a4000014bc000014d2000015860000159e00001668
0000167e0000177c00001794000018300000184800001860000018780000
194a0000196200001abc00001bf200001c0a00001c2200001c3a00001c52
00001d6200001e5200001e6a00001e8200001e9a00001eb200001eca0000
1ee200001efa00001f1200002018000020300000216c0000225e0000232c
00002462000025b8000025d0000025e6000025fe000027a2000027ba0000
27d0000027e60000295a0000297200002a4000002a5600002a6e00002b5c
00002c7200002c8a00002ca200002cba00002cd200002cea00002d020000
2d1a00002d3200002d4a00002e6a00002f4e0000307000003088000030a0
000030b8000030d0000031a00000328000003296000032ae000032c40000
32da000033720000338a000033a0000033b8000034840000349a000034b2
000034c8000034de000034f40000350a0000352000003538000035500000
36700000379e000037b600003896000039620000397a00003990000039a8
000039c000003af600003b7a00003b9000003ba000003c7c00003d2e0000
3d4400003d5c00003d7200003d8800003d9e00003db400003dca00003de2
00003f0400003f9e0000408c000040a4000040bc000040d4000040ec0000
41a8000041c0000042da000043320000434a000043600000437800004390
000043a8000043c0000043d8000043ee000044a6000044be0000454c0000
45620000464a00004662000046cc000046e4000046fc00004714000047da
000047f2000048de000049b6000049ce000049e6000049fc00004a140000
4b0200004b9e00004bb600004bce00004be600004bfe00004c1600004c2e
00004c4600004c5e00004daa00004dc200004ef200004fa0000050680000
51460000523a0000525200005268000052800000538c000053a4000053ba
000053d0000055060000551c0000559e000055b4000055cc000056a00000
57400000575800005770000057880000579e000057b6000057ce000057e6
000057fe0000581600005936000059da00005ae600005afe00005b160000
5b2e00005b4600005c4400005ce800005cfe00005d1600005d2c00005d42
00005df400005e0c00005e2200005e3a00005f9800005fae00005fc60000
5fdc00005ff2000060080000601e000060340000604c00006064000061ca
000063840000639c000064ce000065e6000065fe000066140000662a0000
6642000067740000691c00006ae200006ca000006ebc00006fea00007002
00007138000072c60000740800007420000074380000744e000074640000
747a00007490000074a6000074be0000761200007718000078be00007af2
00007c4200007dbc00007fc2000080e8000081ee00008206000083620000
84c60000862e0000875a000088a400008a3200008b1000008cc200008e78
00008e900000907e0000926400009454000095fe000097da000099da0000
9b4200009ca600009e4a0000a0300000a1cc0000a3e80000a4f80000a510
0000a5280000a5400000a6d60000a8320000a84a0000a8620000aa500000
ac2a0000ac400000ac560000ac6e0000ac860000ada60000adbe0000add6
0000adee0000ae060000af0e0000b05a0000b16c0000b25e0000b2760000
b28c0000b2a40000b2bc0000b2d40000b2ec0000b3040000b3e80000b440
0000b4580000b5b80000b6c60000b7500000b7680000b89c0000b8b40000
b99a0000ba200000ba360000ba4e0000ba640000bb2a0000bb420000bd04
0000be260000be3e0000be560000be6c0000be840000be9c0000bf900000
c0ac0000c0c40000c0dc0000c0f40000c10a0000c1220000c13a0000c152
0000c16a0000c2a60000c2be0000c40e0000c53c0000c6280000c75a0000
c84c0000c8640000c87a0000c8900000ca1c0000ca340000ca4a0000ca60
0000cbca0000cbe00000cdde0000d03c0000d1820000d2100000d3080000
d3200000d3360000d45c0000d5b60000d5ce0000d5e60000d5fe0000d616
0000d62e0000d6460000d65e0000d6760000d8080000d8f40000da580000
dc420000dc5a0000dc720000dc8a0000dca20000dcba0000dcd20000dcea
0000dd020000df220000e0a00000e1c00000e1d80000e1f00000e2080000
e21e0000e2360000e24e0000e2660000e27e0000e2960000e3b40000e522
0000e6d20000e6ea0000e7020000e71a0000e7320000e8520000e91c0000
e9320000e94a0000e9600000e9760000ea340000ea4c0000ea620000ea7a
0000eb880000ec3c0000ed300000ee1c0000eeee0000ef9a0000f0660000
f12e0000f1f00000f3760000f4300000f4b80000f5640000f6380000f690
0000f7900000f83c0000f8ce0000f9a40000fa760000fb1c0000fc0c0000
fcc00000fd720000fe220000ff4200010026000100d40001017a000101e8
0001025c000102ca000102dc000102ee00010358000103c40001042e0001
044000010452000104fc000105aa00010656000106680001067a00010722
000107ca00010874000108860001089800010920000109ce00010a780001
0b2800010b3a00010b4c00010bc400010c3c00010cb400010d2800010d3a
00010d4c00010daa00010e0800010e6600010e7800010e8a00010f1e0001
0fb2000110300001104200011054000110de0001116e000111f80001120a
0001121c000113260001141c0001152e000115cc000116920001174c0001
175e00011770000117b8000118000001184800011890000118a2000118b4
0001192a0001193c000119c0000119d200011a3600011aa600011ab60001
1acc00011adc00011b4c00011bf400011c0400011c1c00011c2c00011c3c
00011c5400011d3a00011d4a00011d6200011d7a00011d8a00011e320001
1e4200011e5200011f1c00011f2c00011f4400011fc800011fd8000120be
000120ce000120de000120f60001210c0001222000012230000123280001
24420001245a0001246a0001248e0001249e0001250a000125a8000125b8
000125dc000125ec000125fc000126200001270400012714000127360001
274e0001275e000128060001281600012826000128ee000128fe00012922
000129a6000129b600012a9800012aa800012ab800012adc00012af20001
2c0000012c1000012d0800012e2000012e4400012f7c00012f94000130c4
000131c400013298000133ca000135140001352c00013620000136de0001
36f6000137b0000138f80001398200013998000139b0000139c8000139d8
00013aec00013bfa00013cb800013dfa00013f4800013f5800013f700001
40740001414400014206000142f6000143bc0001449c000144b4000144ca
000144e0000145e6000146f00001484e0001497c00014ab000014ac80001
4b3000014b4200014c0800014c1a00014c2c00014c3e00014c5000014c60
00014cce00014d3c00014d4c00014e1000014e2000014e8a00014ea20001
4f240001502000015030000150460001505c000152300001537000015462
0001547a00015492000154a2000154ba000154ca000155dc000155f40001
56a6000157b6000157c6000157d6000158e6000158f6000159b200015a36
00015a4600015a5600015a6600015a7600015b6000015b7600015c360001
5d4e00015d5e00015e1400015eca00015f860001603800016122000161e0
000162d40001638000016494000165960001669a000167920001689a0001
697e00016a8800016a9800016b5400016b6400016bce00016be600016c68
00016d6400016d7400016d8a00016da000016f5e0001708e0001716a0001
71820001719a000171aa000171c2000171d2000172e6000172fe000173b4
000173c4000173d4000173e4000174980001751c0001752c0001753c0001
754c0001755c000176460001765c0001771e0001783000017840000178f6
000179ac00017a5a00017afe00017bd600017c8a00017d7400017e160001
7f1e000180240001811c00018202000182fa000183d4000184d4000185d2
000186da000186ea000187ee000188f400018a0400018a7400018a8c0001
8b0e00018b2600018c1000018c2000018c3000018c4800018c5e00018e22
00018f64000190380001904e00019066000190760001908e0001909e0001
91b0000191c80001927200019384000194d20001958e000196ac000196bc
0001977e000198020001981a0001982a0001983a0001984a000198d20001
98e2000198f200019908000199da00019ad200019ae200019b8a00019c40
00019cf800019daa00019e8c00019f560001a0560001a1100001a2260001
a33e0001a43a0001a5340001a6660001a6760001a7800001a81e0001a8bc
0001a95a0001a96c0001a97e0001aa080001aa1c0001aa300001ab1e0001
ab320001ab460001ac940001ad300001ad440001ae5e0001ae720001aed4
0001af800001b0100001b0540001b0ea0001b14a0001b1ac0001b1bc0001
b1cc0001b27a0001b32a0001b33a0001b34a0001b3ac0001b45c0001b4c0
0001b5260001b5380001b54a0001b5fe0001b6b40001b6c60001b6d80001
b7280001b7780001b7c80001b85a0001b8ae0001b9020001b9480001b95a
0001b9a40001b9b40001b9f80001ba080001ba180001ba280001ba6a0001
bab80001baf60001bb060001bb980001bc380001bca60001bd100001be04
0001befc0001bf8c0001c0200001c08e0001c0fc0001c10c0001c11c0001
c12c0001c13c0001c14c0001c15c0001c2140001c2de0001c4080001c5a6
0001c6340001c6be0001c73c0001c7fa0001c84c0001c8d80001ca5a0001
cc0e0001ce420001d0060001d1980001d1a80001d2da0001d4300001d54e
0001d6820001d81e0001d8b80001d9e20001db540001dcde0001de060001
de340001dfd80001e0f20001e20e0001e23c0001e32c0001e4800001e5ba
0001e7200001e87a0001ea180001eb260001ec480001edd40001ef4a0001
f08e0001f1fc0001f37e0001f41a0001f4a00001f58e0001f6cc0001f790
0001f8760001f96e0001f9fe0001fb0c0001fbf80001fc940001fd4c0001
fe280001ff6000020024000201120002026e000202fa0002054600020640
000206dc00020762000208460002097a00020a4400020b3600020c2c0002
0cb600020dd800020ed000020f6a0002101c0002102c0002103c00021102
000211f6000212e4000213740002147e00021566000216060002168a0002
177a000218b40002197e00021a7400021a8400021b1400021b2400021bfe
00021d6400021ed200022012000221fa00022384000224ee000224fe0002
263c0002264c000227be000227d0000227e2000227f40002280600022818
0002282a0002283c0002284e000228600002287200022884000228960002
28a8000228ba000228cc00022962000229e800022aac00022bc600022c88
00022d6400022e5400022ee200022fee000230de00023156000231960002
32060002329400023324000233ba0002343e0002350c0002363c00023700
000237da000238c20002394e00023a5e00023b4400023b5600023b680002
3b7a00023b8c00023b9e00023bb000023bc200023bd400023be600023bf8
00023c6c00023c8600023ca800023cca00023cec00023d0e00023d300002
3d5200023f90000241780002419a000241bc000241de0002420000024222
000242440002426600024288000242b20002442800024626000246c40002
4708000247c8000248a40002491a00024a2000024b4c00024bc000024c3c
00024d2a00024df800024ec200024f2e00024fce000250fa000252280002
5316000253c00002546e0002547e0002548e0002549e0002555200025628
000256e4000257b0000258860002594400025a0200025ac400025b840002
5c3e00025cf400025e3400025f6800026118000261de000262a80002637e
000264740002654e000266400002678a000268f800026a0a00026b340002
6be200026cbe00026d7000026e4e00026f76000270e0000271d0000272fc
0002733c000273520002736a0002738000027396000273ac000273c20002
73e0000273f60002740c0002742200027438000274560002746c00027484
0002749a000274b0000274c6000274dc000274f20002750e000275240002
753c000275520002756a0002758000027596000275ac000275c2000275e0
000277200002773800027750000277680002778000027796000277ac0002
77c4000279060002791e000279360002794e000279660002797c00027992
000279a8000279c0000279d6000279ee00027a0400027a1a00027a300002
7a4600027a6200027a7800027a8e00027aa400027aba00027ad600027aec
00027b0400027b1a00027b3000027b4600027b5c00027b7200027b8e0002
7ba400027bbc00027bd200027bea00027c0000027c1600027c2c00027c42
00027c6000027dc600027dde00027df600027e0e00027e2400027e3a0002
7e5000027e6800027fb600027fce00027fe600027ffe000280140002802a
000280420002805800028070000281b000028250000282660002827e0002
8294000282aa000282c0000282d6000282f2000283080002831e00028334
0002834a000283660002837c00028394000283aa000283c0000283d60002
83ec000284020002841e000284340002844c000284620002847a00028490
000284a6000284bc000284d2000284f0000285d8000285f0000286080002
8620000286380002864e000286640002867c0002876a000287820002879a
000287b2000287c8000287de000287f40002880a00028822000288e80002
89c200028aa000028bf200028d0a00028dbc00028e7200028fa000029096
000292ba0002939c0002947c00029560000296460002972a000298180002
9830000298460002985c0002990800029920000299380002995000029968
0002998000029998000299a8000299b800029a7e00029a8e00029a9e0002
9b1e00029b2e00029b3e00029b4e00029b5e00029b6e00029b7e00029b8e
00029b9e00029bae00029bbe00029c8800029c9800029d9600029da60002
9db600029e3c00029e4c00029f1200029faa0002a0400002a0820002a092
0002a0ee0002a1000002a19c0002a1ae0002a2500002a3120002a3d40002
a4540002a4e80002a4fa0002a50a0002a51c0002a59a0002a5ac0002a628
0002a63a0002a64c0002a65e0002a6960002a6cc0002a6fc0002a70e0002
a7200002a7580002a7900002a7d60002a7fe0002a8740002a8ea0002a8fc
0002a97e0002a9d80002aa1c0002aac60002aad80002aaea0002aafc0002
ab0e0002ab200002ab320002ab420002ab580002ab6a0002ab7a0002ab8c
0002ab9e0002abb00002abc20002abd40002abe60002abf80002ac0a0002
ac1c0002ac5a0002ac940002ad1e0002ad5c0002ad6e0002adf80002ae94
0002aeae0002aec80002aeda0002aeec0002aefe0002af100002af220002
af340002af4a0002af5c0002af6e0002b0780002b08a0002b0ac0002b0ac
0002b0e80002b1320002b1800002b1b80002b1b80002b1f20002b2040002
b2660002b2780002b33a0002b34c0002b35e0002b3960002b3cc0002b426
0002b4860002b4980002b4a80002b4ba0002b57e0002b65a0002b69a0002
b6ac0002b7340002b7bc0002b7ce0002b8160002b8280002b86a0002b900
0002b9120002b99a0002b9ac0002b9ec0002bac40002bad60002bb880002
bb9a0002bc140002bc260002bcb20002bcc40002bd600002bd720002be14
0002be260002bee20002bef40002bf9e0002bfb00002c09c0002c0ae0002
c1480002c15a0002c2100002c2220002c2ac0002c2be0002c35c0002c36e
0002c4360002c4480002c50c0002c51e0002c5cc0002c6620002c6860002
c6ac0002c6d00002c6f60002c71c0002c7420002c7660002c78c0002c7ac
0002c7ce0002c7ee0002c8100002c8220002c85a0002c86c0002c8c80002
c9e00002c9f00002cab80002cb8e0002cc8c0002cc9c0002cd6c0002ce24
0002cee60002cfc00002d0e60002d19e0002d2ca0002d3940002d4080002
d41e0002d4e60002d5e40002d6de0002d79e0002d8800002d96c0002da88
0002db9a0002dbaa0002dc420002dce20002ddf20002deb20002df640002
e0620002e14e0002e23a0002e3280002e3480002e3680002e3800002e398
0002e3b00002e3c80002e3e00002e3f80002e4100002e4280002e4400002
e4580002e4700002e4880002e4a00002e4b80002e4d00002e6320002e64a
0002e6600002e6780002e6980002e6ae0002e6c60002e6de0002e6f60002
e7d40002e89a0002e8b20002e8c80002e8e00002e8f60002e90c0002e924
0002e93c0002e9520002e96a0002e9800002e9960002e9ac0002e9c40002
eab00002eac80002eb640002ec920002ed760002ed8e0002eda60002edbe
0002edd60002edee0002ee060002ee1c0002ee340002ee4c0002ee620002
ee7a0002ee8a0002eebc0002efcc0002efdc0002eff40002f00a0002f10e
0002f23a0002f3480002f3600002f3780002f38e0002f3d20002f3ea0002
f4020002f4180002f44e0002f4880002f4de0002f4f60002f50e0002f564
0002f5ba0002f5da0002f5f20002f60a0002f6220002f6380002f6500002
f6660002f6aa0002f6f80002f7100002f7280002f73e0002f7740002f78a
0002f7a60002f7dc0002f8320002f84a0002f8620002f87a0002f8920002
f8a80002f8de0002f9340002f94c0002f9640002f97c0002f9940002f9ac
0002f9c40002f9dc0002f9f20002fa0e0002fa440002fa5c0002fa720002
fa8a0002faa00002fabe0002fad60002faec0002fb220002fb780002fbd0
0002fc1e0002fc740002fc8c0002fca40002fcba0002fcd00002fce80002
fd000002fd180002fd2e0002fd460002fd5c0002fd720002fda80002fdd6
0002fe000002fe2e0002ff620002ff720003005c0003011c000301dc0003
027c00030310000304480003054600030626000307360003082a00030934
00030a2a00030b1000030bd600030cb200030cca00030e0600030e160003
0ef000030ffc00031102000311f2000312de0003138c0003148800031570
0003168e00031786000317a6000317be000317d6000317ec000318040003
181c000318320003184a000318620003187a000318920003196000031976
0003198c000319a400031be200031bf800031c1e00031c3600031c560003
1c6c00031c8400031c9c00031cb400031ccc00031ce200031cf800031d0e
00031d2600031d3e00031d5600031d6c00031d8400031d9c00031db20003
1dc800031de000031ec400031eea00032040000321780003225800032270
00032288000322a0000322b6000322ce000322e6000322fc000323dc0003
2512000326440003279a000328fc0003291400032a5800032b3200032bf2
00032c0a00032c2000032c3600032d4c00032d6e00032e6400032f320003
3078000331700003318200033222000332fc0003330c000333240003333c
0003335200033396000333ae000333c6000333dc000334120003345e0003
34b4000334ca000334e0000335360003358c000335aa000335d2000335e8
000336000003361600033640000336560003369a000336e8000337000003
371800033730000337460003377c00033794000337c0000337f60003384c
000338640003387c00033894000338ac000338c2000338f80003394e0003
39640003397a00033992000339aa000339c2000339da000339f200033a0a
00033a2800033a5e00033a7600033a8e00033aa600033abc00033adc0003
3b0200033b1a00033b5000033ba600033c0800033c5600033cac00033cc2
00033cda00033cf000033d0600033d1e00033d3600033d4e00033d640003
3d7c00033d9200033daa00033de000033e1600033e3e00033e5600033e6e
00033e8600033ec000033ef400033f0c00033f2400034010000340fc0003
41be000342b8000342c800034362000343f6000344d0000345f400034604
000346b40003477200034882000348920003495c00034a1000034abe0003
4b8e00034ca800034d5e00034ea000034f5600034fcc00035002000350e6
000351de000352de000353b0000354900003558400035694000357940003
57a4000358540003590200035a1800035af000035ba200035bc800035cb8
00035da000035eac00035ecc00035eec00035f0400035f1c00035f340003
5f4c00035f6200035f7a00035f9200035faa00035fc200035fda00035ff2
0003600a00036020000360360003604e000361a4000361bc000361d20003
61ea0003620a000362200003623800036250000362680003635400036408
00036420000364360003644c000364620003647800036490000364a80003
64be000364d6000364ec0003650200036518000365300003654000036558
000365f800036722000368020003681a000368320003684a000368620003
687a00036892000368a8000368c0000368d8000368ee00036906000369bc
00036a0800036b0e00036b9800036bb000036bc600036cb200036cd40003
6dcc00036ee400036fec00037046000370e8000371d2000371e2000371fa
00037212000372280003726c000372840003729c000372b2000372f60003
730e00037352000373680003737e000373c200037406000374240003743c
000374540003746c000374820003749a000374b0000374fe000375420003
755a0003757200037588000375cc000375e2000375fe0003764200037686
0003769e000376b6000376ce000376e6000376fc00037740000377840003
779c000377b4000377cc000377e4000377fc000378140003782c00037842
0003785e000378a2000378ba000378d2000378ea00037914000379340003
794c00037964000379a8000379ec00037a2a00037a6e00037ab200037ac8
00037ae000037af600037b0c00037b2400037b3c00037b5400037b6a0003
7b8200037b9800037bae00037bf200037c3600037c4c00037c6400037c7a
00037cc000037d0600037d1e00037d7200037e8000037f6e000380620003
812600038136000381c60003825000038388000384f600038666000387be
000388140003886a00038a1400038a3e00038a6800038c2000038e0e0003
8ffe000391d60003922c00039282000394a4000394ce000394f800039634
0003964c000396640003967c000396da00039730000397480003977a0003
97a4000399680003998000039998000399b000039a0e00039a6400039a7c
00039aae00039ad800039bd400039ca600039d7c00039e8c00039f540003
a0820003a1860003a2860003a35c0003a4380003a57a0003a6a20003a6b2
0003a8660003a9500003a9660003aaa40003aab40003ab980003ac640003
ad640003ae200003aefe0003b0120003b0280003b03e0003b04e0003b05e
0003b0780003b13e0003b1bc0003b2da0003b3fc0003b5280003b6760003
b7600003b8480003b9020003b9d40003badc0003bbc80003bbd80003bc88
0003bd380003be0e0003bec00003bf960003c0020003c0700003c1620003
c2540003c3a00003c4520003c4740003c5260003c6420003c70c0003c7d8
0003c9000003ca260003cb020003cb9c0003ccb20003cd420003cddc0003
cec40003cfd80003d0bc0003d1f80003d2ac0003d3600003d4140003d4ca
0003d5b60003d5c60003d6b80003d7de0003d7ee0003d9100003d9da0003
da2e0003db380003db500003db680003dcaa0003de520003dff60003e130
0003e28c0003e4320003e5ba0003e6bc0003e7960003e7ae0003e89c0003
e9860003ea980003eb360003ec420003edea0003eef60003efb40003f038
0003f11c0003f1d20003f2e40003f36c0003f3f60003f4c20003f5860003
f5960003f5a60003f63c0003f6fa0003f7940003f84e0003f9880003fad4
0003fc020003fc7e0003fd000003fdb60003fea40003ff9a000400020004
009c000401560004027a0004039600040418000404ea000405700004064c
00040752000408360004088c000409100004098e0004099e00040a940004
0b3e00040bd600040ce200040dc600040ec200040f4600040ff8000410a8
0004118e00041252000412ae0004133a000413fe0004146e000415500004
16300004170c0004179a000418ae0004195600041a6200041ae800041b8c
00041c6400041c7400041d4600041e1000041f8000041f9000041fa00004
1fb00004206c0004215c0004225600042266000422ea000422fa0004230a
000423d6000423e600042488000424ea0004254400042554000425640004
257400042620000427240004273400042804000428fe000429c000042abe
00042bba00042caa00042cbc00042cce00042ce000042cf200042d040004
2d1600042db200042eac00042ebe0004303400043082000430d000043102
0004316a000432ea000433400004337e000433bc0004352a000435660004
35a200043728000437de000438dc000438fa00043910000439260004393e
00043a4200043b9400043bac00043bc400043bda00043bf200043c0a0004
3c2000043c3800043c5000043c6800043c7e00043c9600043cae00043cc6
00043cde00043cf600043d0e00043d2600043d3e00043d5600043d6e0004
3d8400043d9c00043db400043dca00043ec200043eda00043ffe000440c2
000440d2000441bc000442dc000443d0000443e00004449c000444ac0004
45600004462000044696000446ee0004478000044864000448e40004498e
00044a0000044b2a00044c3a00044d0c00044dde00044e9200044f540004
5070000451920004523a000453380004543c00045540000455de000456a2
0004575400045764000458440004594000045a2400045ade00045aee0004
5bca00045bda00045bea00045c8c00045d5c00045e2000045e3000045e40
00045e8a00045f0c00045f1c00045f2c00045f8c00045fe20004603a0004
60f0000461a2000461b2000461c20004623e000462ba0004630c0004631c
0004632c0004633e000463500004636200046374000463b6000463de0004
63f0000464020004643e0004647c000464c4000464ec00046562000465a0
00046694000466a4000466b4000466c4000466d400046704000467400004
677c000467b8000467e800046860000468e600046956000469b800046a16
00046a9c00046afc00046b6600046bda00046c4a00046cb400046d5a0004
6df200046e5e00046eec00046f4600046faa00047054000470fa00047190
0004720000047282000472ee000473ac0004746a00047516000475a80004
760600047660000476b600047738000477b60004783c000478c800047934
000479a400047a1200047a8200047afa00047b7e00047c0e00047c740004
7cee00047d6a00047de400047e8a00047f2200047fb200048010000480ae
000481020004819400048238000482e20004837a000483d6000484380004
84a000048546000485f0000486ba00048760000487c00004881800048878
000489060004898c00048a1a00048a7e00048ae800048b5000048bb80004
8c1c00048c9400048d1c00048db000048e1c00048e8400048ef000048f9c
0004905c0004910a00049198000491f60004925a000492ca0004936e0004
9414000494d80004957a000495e600049676000496e800049780000497fe
00049878000498e00004996e000499ca00049a2800049aae00049b2a0004
9b8e00049be200049c5000049cb800049d1e00049d9c00049e1200049e8c
00049ebe00049f1a00049f7600049fda0004a07a0004a11c0004a1da0004
a28a0004a2f00004a3680004a3c60004a4500004a4e80004a5760004a5e6
0004a6440004a6d20004a7440004a7de0004a8720004a8cc0004a93c0004
a9b40004aa120004aa720004aaec0004ab4c0004aba60004ac020004ac6a
0004ac9c0004acde0004ad1c0004adbe0004adce0004ae000004ae340004
ae6c0004aea20004af240004af360004af480004af5a0004af6c0004af7e
0004afb00004afe00004b0100004b0400004b0b20004b1000004b1440004
b1d00004b2680004b2f80004b3320004b38a0004b3ce0004b3e00004b3f2
0004b4040004b4160004b4d80004b4e80004b4f80004b5080004b5180004
b5280004b5380004b5480004b5580004b56a0004b57c0004b58c0004b59c
0004b5ac0004b5bc0004b5cc0004b5dc0004b5ec0004b5fc0004b60c0004
b61c0004b62c0004b63c0004b64c0004b65c0004b66c0004b67c0004b68c
0004b69c0004b6ac0004b6bc0004b6cc0004b6dc0004b7ea0004b8f80004
ba040004bb120004bc5c0004bda80004beee0004c0360004c04e0004c066
0004c07e0004c0960004c0a60004c0b60004c0c60004c0d60004c18e0004
c1d80004c2220004c2c00004c2d80004c2ee0004c38a0004c44c0004c4dc
0004c5a40004c6a80004c7860004c7960004c8940004c9720004ca520004
cb900004cce40004ce320004cf460004d04c0004d05c0004d06c0004d0aa
0004d0e80004d0f80004d1bc0004d27c0004d3020004d3c60004d4da0004
d5c60004d5d60004d7100004d8ac0004d8bc0004d8cc0004d8dc0004d91e
0004d9600004da0e0004da260004da3c0004dade0004db9a0004dc2c0004
dce60004ddf60004dee60004def60004df180004df3c0004df600004df84
0004dfa60004dfca0004dfee0004e0120004e0340004e0560004e06e0004
e0860004e09e0004e0c80004e0f40004e1200004e14c0004e1760004e1a2
0004e1ce0004e1fa0004e2120004e23c0004e2680004e2940004e2c00004
e2ea0004e3160004e3420004e36e0004e3900004e3b60004e3dc0004e3fe
0004e4240004e44a0004e46c0004e48e0004e4b00004e4d60004e4fc0004
e5200004e5420004e5680004e58e0004e5b20004e5d60004e5fa0004e612
0004e63c0004e66a0004e6980004e6c40004e6ee0004e71c0004e74a0004
e7760004e78e0004e7b80004e7e60004e8140004e8400004e86a0004e898
0004e8c60004e8f20004e9140004e93a0004e9600004e9840004e9a60004
e9cc0004e9f20004ea160004ea380004ea5a0004ea720004ea8a0004eaac
0004ead20004eaf80004eb1a0004eb400004eb660004eb880004ebaa0004
ebcc0004ebee0004ec140004ec3a0004ec600004ec820004eca40004ecba
0004ecd00004ecf20004ed180004ed3e0004ed620004ed840004edaa0004
edd00004edf40004ee160004ee380004ee500004ee7a0004eea80004eed6
0004ef020004ef2c0004ef5a0004ef880004efb40004efcc0004eff60004
f0240004f0520004f07e0004f0a80004f0d60004f1040004f1300004f148
0004f1600004f1780004f1900004f1a80004f1c00004f1d80004f1f00004
f2080004f2200004f2360004f24e0004f2660004f27e0004f29e0004f2be
0004f2de0004f2fe0004f31e0004f33e0004f35e0004f37e0004f39e0004
f3be0004f3dc0004f3f40004f40a0004f4200004f4380004f44e0004f464
0004f47c0004f4940004f4ac0004f4c40004f4dc0004f4f40004f50c0004
f5240004f53c0004f5540004f56c0004f5840004f59a0004f5b00004f5ce
0004f5ec0004f60a0004f6280004f6460004f6640004f6820004f6a00004
f6be0004f6dc0004f6f80004f70e0004f7240004f73a0004f7520004f768
0004f77e0004f7940004f7ac0004f7c40004f7dc0004f7f40004f80a0004
f8220004f83a0004f8520004f86a0004f8820004f89a0004f8b20004f8ca
0004f8e20004f8fa0004f9120004f92a0004f9420004f95a0004f9720004
f98a0004f9a20004f9ba0004f9d20004f9ea0004fa020004fa1a0004fa30
0004fa460004fa5e0004fa760004fa8e0004faa40004faba0004fad00004
fae80004fb000004fb180004fb300004fb480004fb600004fb780004fb90
0004fba80004fbc00004fbd80004fbf00004fc100004fc300004fc500004
fc700004fc900004fcb00004fcd00004fcf00004fd100004fd300004fd50
0004fd740004fd980004fdbc0004fdf20004fe160004fe3a0004fe5e0004
fe940004feb80004fedc0004fefe0004ff140004ff2a0004ff420004ff6e
0004ff9a0004ffc600050004000500300005005c00050088000500c60005
00de0005010a0005013600050162000501a0000501cc000501f800050224
0005026200050286000502aa000502ce000502f2000503160005033a0005
035e00050380000503a4000503ca000503f0000504280005044c00050472
00050498000504d0000504f4000505180005053a000505520005057e0005
05ac000505da0005061a0005064600050674000506a2000506e2000506fa
000507260005075400050782000507c2000507ee0005081c0005084a0005
088a000508ac000508d2000508f80005093000050952000509780005099e
000509d6000509fc00050a2200050a5000050a7200050a9400050ab80005
0ad000050ae800050b0c00050b3200050b5800050b7c00050ba200050bc8
00050bec00050c1000050c3400050c5800050c7c00050ca000050cc40005
0ce800050d0c00050d3000050d6600050d9c00050dc000050de400050e08
00050e2c00050e5000050e7400050eaa00050ee000050f0400050f280005
0f4a00050f6c00050f8e00050fb000050fc600050fdc00050ff200051008
0005102c0005105200051078000510b0000510d4000510fa000511200005
11580005117c000511a0000511c4000511dc000512080005123600051264
000512a4000512d0000512fe0005132c0005136c00051384000513b00005
13de0005140c0005144c00051478000514a4000514d00005151000051528
000515520005157e000515aa000515d6000516000005162c000516580005
16840005169c000516c6000516f4000517220005174e00051778000517a6
000517d4000518000005181800051842000518700005189e000518ca0005
18f600051924000519520005197e00051996000519c0000519ec00051a18
00051a4400051a6e00051a9a00051ac600051af200051b0a00051b340005
1b6200051b9000051bbc00051be600051c1400051c4200051c6e00051c86
00051cb000051cde00051d0c00051d3800051d6200051d9000051dbe0005
1dea00051e7400051efe00051f5800051fb00005205a00052122000521ea
00052300000523c800052490000525ac0005266600052720000528220005
28ac0005290a0005299e00052a1000052a9800052b2200052bac00052d1e
00052e2e00052e5000052f0a00052ff0000531e800053200000533380005
34b20005361e0005373e0005382e0005390600053a1000053b5400053b6c
00053c2000053c3000053d2600053e0c00053eea00053fba000540e00005
419e000542c00005441000054420000544380005455000054626000546fa
000547ca000548b8000549b2000549ca000549e2000549f200054a080005
4ade00054af600054b0e00054b2400054c1600054c2e00054c4600054c5e
00054d2200054d3a00054d5000054d6600054d7c00054d9200054da80005
4e4600054e5e00054f76000550880005518a000552320005533200055446
0005556600055656000557340005581a000558c8000559ee00055afc0005
5c5400055d7000055d8800055e5a00055f52000561260005613c0005626e
000563d8000565420005666200056750000568200005692800056a700005
6a8800056b3c00056be600056cd200056db400056e8c00056f6a0005708c
000571460005725c000573a2000573ba000574c60005758e000576620005
7732000578200005796c0005797c00057992000579a8000579b8000579ce
00057a9600057aac00057ac400057ada00057bca00057be200057bfa0005
7c1200057cd400057cec00057d0200057d1800057d2e00057d4400057d5a
00057df600057e0e00057f32000580420005813e0005814e0005825a0005
8394000584ac00058586000586620005874c000588000005892000058a26
00058b0000058b3c00058b6a00058b8000058c7200058e5800058e6e0005
8fa600059108000591440005926600059354000594200005952c00059682
0005969a0005974e0005975e000598400005994400059a2400059b020005
9c0600059cb600059de000059f4a00059f5a00059f720005a0a40005a18a
0005a2700005a3600005a4420005a5540005a56a0005a5800005a5900005
a5a60005a67c0005a6940005a6ac0005a6c20005a6d20005a6ea0005a702
0005a71a0005a72a0005a7420005a7580005a76e0005a7840005a79a0005
a7b00005a84c0005a8640005a97a0005aaae0005abca0005ac6a0005ad54
0005ae600005af6c0005b0580005b14c0005b2300005b2e80005b3e40005
b4f00005b4f00005b4f00005b4f00005b4f00005b4f00005b4f00005b4f0
0005b4f00005b4f00005b4f00005b4f00005b4f00005b5180005b5740005
b5be0005b5ce0005b5ce0005b5fa0005b65a0005b70a0005b71a0005b72a
0005b7420005b75a0005b76c0005b8140005b9680005bafe0005bc640005
bd340005bebe0005bed60005c0860005c2ca0005c4c40005c6820005c7b8
0005c8e00005ca440005cc800005cd7c0005cf300005d09c0005d1d40005
d3540005d4a00005d4b00005d6460005d6760005d6dc0005d7780005d7d6
0005d8400005d8860005d8d00005d8fa0005d9220005d9560005d9860005
d9ba0005d9ec0005db380005dbf40005dcee0005de040005df040005e020
0005e0ce0005e2300005e2e60005e4440005e55a0005e65e0005e77e0005
e8420005e89c0005e91e0005e9300005e9b80005e9ca0005ea520005ea64
0005ea760005ea860005eb6a0005ec220005f0780005f2da0005f42c0005
f5460005f62a0005f7540005f88a0005f9f80005fbcc0005fbdc0005fbf2
0005fd100005fe0e0006003e000600560006011e0006021c0006036e0006
043c000605740006068e000607fc000609c8000609d8000609ee00060b0c
00060c0c00060e2e00060e5800060f220006107c000611ce0006129c0006
13d20006150c000616940006186a0006187a000619a4000619bc00061acc
00061d0400061d1c00061de000061e6400061ec0000620060006204c0006
2090000620900006219c0006219c000621ac000621bc000622aa000622ea
000623140006235400062396000623f8000624e60006260e000627900006
2898000629d200062b1000062bd200062d2600062e5400062eae00062f06
00062f860006300000063000000630f800063214000632ac000633460006
341e00063530000635f2000636c200063762000638480006393e00063950
000639a2000639fa00063a7e00063b5600063c7a00063d1800063d6c0006
3dc400063e1c00063e7000063f4000063ffa000640d20006418000064274
0006435000064428000644da0006457400064600000646c20006478e0006
4834000648d2000649c600064ad000064bc200064c1e00064cce00064d60
00064e0e00064ebc00064fb600065058000650f80006520a000652ee0006
538c00065468000654e800065568000655ea0006566a000656ea0006576a
000657e40006585c00065882000658a8000658ce000658f2000659160006
592c000659420006596e0006599a000659c4000659f000065a1c00065a46
00065a7200065a9e00065ac800065af400065b2000065b4a00065b6e0006
5b9200065bbe00065bea00065c1600065c4200065c6e00065c9a00065cc6
00065cd800065cea00065cfc00065d0e00065d2000065d3200065d440006
5d5600065d6800065d7a00065d8c00065d9e00065db000065dc200065dd4
00065de600065df800065e0a00065e1c00065e2e00065e4000065e520006
5e6400065e7600065e8800065e9a00065eac00065ebe00065ed000065ee2
00065ef400065f0600065f1800065f2a00065f3c00065f4e00065f600006
5f7200065f8400065f9600065fa800065fba00065fcc00065fde00065ff0
000660020006601400066026000660380006604a0006605c0006606e0006
608000066092000660a4000660b6000660c8000660da000660ec000660fe
00066110000661220006613c0006614e0006616000066172000661840006
6196000661a8000661ba000661cc000661de000661f00006620200066214
0006622e0006624000066252000662640006627600066298000662ba0006
62d4000662ee00066300000663120006632400066336000663480006635a
0006636c0006637e00066390000663a2000663b4000663c6000663d80006
63ea000663fc0006640e0006642000066432000664440006645600066468
0006647a0006648c0006649e000664b0000664c2000664d4000664e60006
64f80006650a0006651c0006652e00066540000665520006656400066576
000665880006659a000665ac000665be000665d0000665e2000665f40006
6606000666180006662a0006663c0006664e000666600006667200066684
00066696000666a8000666ba000666cc000666de000666f0000667020006
671400066726000667380006674a000667640006677e00066798000667b2
000667cc000667e6000668000006681a0006683c0006685e000668800006
68a2000668b4000668c6000668d8000668ea000668fc0006690e00066920
000669320006694400066956000669680006697a0006698c0006699e0006
69b0000669c2000669d4000669e6000669f800066a0a00066a1c00066a2e
00066a4000066a5200066a6400066a7600066a8800066a9a00066aac0006
6abe00066ad000066ae200066af400066b0600066b1800066b2a00066b3c
00066b4e00066b6000066b7200066b8400066b9600066ba800066bba0006
6bd400066bee00066c0800066c2200066c3400066c4600066c5800066c6a
00066c7c00066c8e00066ca000066cb200066cc400066cd600066ce80006
6d0a00066d2e00066d5200066d7e00066d9600066f1a00066f3000066f48
00066f5e00067080000672280006735600067480000675ea0006779c0006
78e200067a4c00067bce00067cde00067e8000067ff400068190000682fe
000684d6000686f8000688ae00068a8600068c7400068dee00068ffc0006
91de000693c20006952400069658000697f2000699dc00069b5a00069cf6
00069eaa00069fea0006a1c00006a3660006a5100006a5f80006a67c0006
a7820006a8b2000100000f260120001000c3000700020010002f00650000
11902410000400010000002d022200000003000000000064000000000003
00000001000e00640000000300000002000e007200000003000000030024
00800000000300000004000e00640000000300000005001800a400000003
00000006000e00640000000300000007007600bc0000000300000008002a
000e000000030000000900200132000000030000000a02a0015200000003
0000000b005603f2000000030000000c002a0448000000030000000d0298
0472000000030000000e006c070a00010000000000000032077600010000
00000001000707a80001000000000002000707af00010000000000030012
07b60001000000000004000707a80001000000000005000c07c800010000
00000006000707a80001000000000007003b07d400010000000000080015
077d00010000000000090010080f000100000000000a0150081f00010000
0000000b002b096f000100000000000c0015099a000100000000000d014c
09af000100000000000e00360afb00030001040900000064000000030001
04090001000e00640003000104090002000e007200030001040900030024
00800003000104090004000e00640003000104090005001800a400030001
04090006000e00640003000104090007007600bc0003000104090008002a
000e000300010409000900200132000300010409000a02a0015200030001
0409000b005603f2000300010409000c002a0448000300010409000d0298
0472000300010409000e006c070a00a9002000320030003100320020004d
006900630072006f0073006f0066007400200043006f00720070006f0072
006100740069006f006e002e00200041006c006c00200052006900670068
00740073002000520065007300650072007600650064002e00430061006c
00690062007200690052006500670075006c00610072004d006900630072
006f0073006f00660074003a002000430061006c00690062007200690056
0065007200730069006f006e00200035002e0037003200430061006c0069
00620072006900200069007300200061002000740072006100640065006d
00610072006b0020006f006600200074006800650020004d006900630072
006f0073006f00660074002000670072006f007500700020006f00660020
0063006f006d00700061006e006900650073002e004c0075006300280061
00730029002000640065002000470072006f006f007400430061006c0069
006200720069002000690073002000610020006d006f006400650072006e
002000730061006e0073002000730065007200690066002000660061006d
0069006c00790020007700690074006800200073007500620074006c0065
00200072006f0075006e00640069006e006700730020006f006e00200073
00740065006d007300200061006e006400200063006f0072006e00650072
0073002e0020004900740020006600650061007400750072006500730020
007200650061006c0020006900740061006c006900630073002c00200073
006d0061006c006c00200063006100700073002c00200061006e00640020
006d0075006c007400690070006c00650020006e0075006d006500720061
006c00200073006500740073002e0020004900740073002000700072006f
0070006f007200740069006f006e007300200061006c006c006f00770020
006800690067006800200069006d007000610063007400200069006e0020
00740069006700680074006c007900200073006500740020006c0069006e
006500730020006f0066002000620069006700200061006e006400200073
006d0061006c006c0020007400650078007400200061006c0069006b0065
002e002000430061006c0069006200720069002700730020006d0061006e
0079002000630075007200760065007300200061006e0064002000740068
00650020006e006500770020007200610073007400650072006900730065
00720020007400650061006d00200075007000200069006e002000620069
0067006700650072002000730069007a0065007300200074006f00200072
0065007600650061006c002000610020007700610072006d00200061006e
006400200073006f00660074002000630068006100720061006300740065
0072002e0068007400740070003a002f002f007700770077002e006d0069
00630072006f0073006f00660074002e0063006f006d002f007400790070
006f006700720061007000680079002f006300740066006f006e00740073
0068007400740070003a002f002f0066006f006e00740066006100620072
0069006b002e0063006f006d0059006f00750020006d0061007900200075
007300650020007400680069007300200066006f006e0074002000610073
0020007000650072006d0069007400740065006400200062007900200074
00680065002000450055004c004100200066006f00720020007400680065
002000700072006f006400750063007400200069006e0020007700680069
006300680020007400680069007300200066006f006e0074002000690073
00200069006e0063006c007500640065006400200074006f002000640069
00730070006c0061007900200061006e00640020007000720069006e0074
00200063006f006e00740065006e0074002e00200059006f00750020006d
006100790020006f006e006c0079002000280069002900200065006d0062
006500640020007400680069007300200066006f006e007400200069006e
00200063006f006e00740065006e00740020006100730020007000650072
006d00690074007400650064002000620079002000740068006500200065
006d00620065006400640069006e00670020007200650073007400720069
006300740069006f006e007300200069006e0063006c0075006400650064
00200069006e0020007400680069007300200066006f006e0074003b0020
0061006e006400200028006900690029002000740065006d0070006f0072
006100720069006c007900200064006f0077006e006c006f006100640020
007400680069007300200066006f006e007400200074006f002000610020
007000720069006e0074006500720020006f00720020006f007400680065
00720020006f007500740070007500740020006400650076006900630065
00200074006f002000680065006c00700020007000720069006e00740020
0063006f006e00740065006e0074002e0068007400740070003a002f002f
007700770077002e006d006900630072006f0073006f00660074002e0063
006f006d002f007400790070006f006700720061007000680079002f0066
006f006e00740073002f00640065006600610075006c0074002e00610073
00700078a92032303132204d6963726f736f667420436f72706f72617469
6f6e2e20416c6c205269676874732052657365727665642e43616c696272
69526567756c61724d6963726f736f66743a2043616c6962726956657273
696f6e20352e373243616c6962726920697320612074726164656d61726b
206f6620746865204d6963726f736f66742067726f7570206f6620636f6d
70616e6965732e4c7563286173292064652047726f6f7443616c69627269
2069732061206d6f6465726e2073616e732073657269662066616d696c79
207769746820737562746c6520726f756e64696e6773206f6e207374656d
7320616e6420636f726e6572732e20497420666561747572657320726561
6c206974616c6963732c20736d616c6c20636170732c20616e64206d756c
7469706c65206e756d6572616c20736574732e204974732070726f706f72
74696f6e7320616c6c6f77206869676820696d7061637420696e20746967
68746c7920736574206c696e6573206f662062696720616e6420736d616c
6c207465787420616c696b652e2043616c696272692773206d616e792063
757276657320616e6420746865206e657720726173746572697365722074
65616d20757020696e206269676765722073697a657320746f2072657665
616c2061207761726d20616e6420736f6674206368617261637465722e68
7474703a2f2f7777772e6d6963726f736f66742e636f6d2f7479706f6772
617068792f6374666f6e7473687474703a2f2f666f6e7466616272696b2e
636f6d596f75206d617920757365207468697320666f6e74206173207065
726d6974746564206279207468652045554c4120666f7220746865207072
6f6475637420696e207768696368207468697320666f6e7420697320696e
636c7564656420746f20646973706c617920616e64207072696e7420636f
6e74656e742e20596f75206d6179206f6e6c792028692920656d62656420
7468697320666f6e7420696e20636f6e74656e74206173207065726d6974
7465642062792074686520656d62656464696e6720726573747269637469
6f6e7320696e636c7564656420696e207468697320666f6e743b20616e64
20286969292074656d706f726172696c7920646f776e6c6f616420746869
7320666f6e7420746f2061207072696e746572206f72206f74686572206f
75747075742064657669636520746f2068656c70207072696e7420636f6e
74656e742e687474703a2f2f7777772e6d6963726f736f66742e636f6d2f
7479706f6772617068792f666f6e74732f64656661756c742e6173707800
b2090320b80284b40918014a20b80283b40918014a20b80282b40918014a
20b80281b40918014a20b80280b40918014a20b8027fb40918014a20b802
7eb40918014a20b8027db40918014a20b8027cb40918014a20b8027bb409
18014a20b8027ab40918014a20b80279b40918014a20b80278b40918014a
20b80277b40918014a20b80276b40918014a20b80275b40918014a20b802
74b40918014a20b80273b40918014a20b80271b40918014a20b80270b409
18014a20b8026fb40918014a20b8026eb40918014a20b8026db40918014a
20b8026cb40918014a20b8026bb40918014a20b8026ab40918014a20b802
69b40918014a20b80268b40918014a20b80267b40918014a20b80266b409
18014a20b80265b40918014a20b80264b40918014a20b80263b40918014a
20b80262b40918014a20b80261b40918014a20b80260b40918014a20b802
5fb40918014a20b8025eb40918014a20b8025db40918014a20b8025cb409
18014a20b8025bb40918014a20b8025ab40918014a20b80259b40918014a
20b80258b40918014a20b80257b40918014a20b80256b40918014a20b802
55b40918014a20b80254b40918014a20b80253b40918014a20b80252b409
18014a20b80251b40918014a20b80250b40918014a20b8024fb40918014a
20b8024eb40918014a20b8024db40918014a20b8024cb40918014a20b802
4bb40918014a20b8024ab40918014a20b80249b40918014a20b80248b409
18014a20b80247b40918014a20b80246b40918014a20b80245b40918014a
20b80244b40918014a20b80243b40918014a20b80242b40918014a20b802
41b40918014a20b80240b40918014a20b8023fb40918014a20b8023eb409
18014a20b8023db40918014a20b8023cb40918014a20b8023bb40918014a
20b8023ab40918014a20b80239b40918014a20b80238b40918014a20b802
37b40918014a20b80236b40918014a20b80235b40918014a20b80234b409
18014a20b80233b40918014a20b80232b40918014a20b80231b40918014a
20b80230b40918014a20b8022fb40918014a20b8022eb40918014a20b802
2db40918014a20b8022cb40918014a20b8022bb40918014a20b8022ab409
18014a20b80229b40918014a20b80228b40918014a20b80227b40918014a
20b80226b40918014a20b80225b40918014a20b80224b40918014a20b802
23b40918014a20b80222b40918014a20b80221b40918014a20b80220b409
18014a20b8021fb40918014a20b8021eb40918014a20b8021db40918014a
20b8021cb40918014a20b8021bb40918014a20b8021ab40918014a20b802
19b40918014a20b80218b40918014a20b80217b40918014a20b80216b409
18014a20b80215b40918014a20b80214b40918014a20b80213b40918014a
20b80212b40918014a20b80211b40918014a20b80210b40918014a20b802
0fb40918014a20b8020eb40918014a20b8020db40918014a20b8020cb409
18014a20b8020bb40918014a20b8020ab40918014a20b80209b40918014a
20b80208b40918014a20b80207b40918014a20b80206b40918014a20b802
05b40918014a20b80204b40918014a20b80203b40918014a20b80202b409
18014a20b80201b40918014a20b80200b40918014a20b801ffb40918014a
20b801feb40918014a20b801fdb40918014a20b801fcb40918014a20b801
fbb40918014a20b801fab40918014a20b801f9b40918014a20b801f8b409
18014a20b801f7b40918014a20b801f6b40918014a20b801f5b40918014a
20b801f4b40918014a20b801f3b40918014a20b801f2b40918014a20b801
f1b40918014a20b801f0b40918014a20b801efb40918014a20b801eeb409
18014a20b801edb40918014a20b801ecb40918014a20b801ebb40918014a
20b801eab40918014a20b801e9b40918014a20b801e8b40918014a20b801
e7b40918014a20b801e6b40918014a20b801e5b40918014a20b801e4b409
18014a20b801e3b40918014a20b801e2b40918014a20b801e1b40918014a
20b801e0b40918014a20b801dfb40918014a20b801deb40918014a20b801
ddb40918014a20b801dcb40918014a20b801dbb40918014a20b801dab409
18014a20b801d9b40918014a20b801d8b40918014a20b801d7b40918014a
20b801d6b40918014a20b801d5b40918014a20b801d4b40918014a20b801
d3b40918014a20b801d2b40918014a20b801d1b40918014a20b801d0b409
18014a20b801cfb40918014a20b801ceb40918014a20b801cdb40918014a
20b801ccb40918014a20b801cbb40918014a20b801cab40918014a20b801
c9b40918014a20b801c8b40918014a20b801c7b40918014a20b801c6b409
18014a20b801c5b40918014a20b801c4b40918014a20b801c3b40918014a
20b801c2b40918014a20b801c1b40918014a20b801c0b40918014a20b801
bfb40918014a20b801beb40918014a20b801bdb40918014a20b801bcb409
18014a20b801bbb40918014a20b801bab40918014a20b801b9b40918014a
20b801b8b40918014a20b801b7b40918014a20b801b6b40918014a20b801
b5b40918014a20b801b4b40918014a20b801b3b40918014a20b801b2b409
18014a20b801b1b40918014a20b801b0b40918014a20b801afb40918014a
20b801aeb40918014a20b801adb40918014a20b801acb40918014a20b801
abb40918014a20b801aab40918014a20b801a9b40918014a20b801a8b409
18014a20b801a7b40918014a20b801a6b40918014a20b801a5b40918014a
20b801a4b40918014a20b801a3b40918014a20b801a2b40918014a20b801
a1b40918014a20b801a0b40918014a20b8019fb40918014a20b8019eb409
18014a20b8019db40918014a20b8019cb40918014a20b8019bb40918014a
20b8019ab40918014a20b80199b40918014a20b80198b40918014a20b801
97b40918014a20b80196b40918014a20b80195b40918014a20b80194b409
18014a20b80193b40918014a20b80192b40918014a20b80191b40918014a
20b80190b40918014a20b8018fb40918014a20b8018eb40918014a20b801
8db40918014a20b8018cb40918014a20b8018bb40918014a20b8018ab409
18014a20b80189b40918014a20b80188b40918014a20b80187b40918014a
20b80186b40918014a20b80185b40918014a20b80184b40918014a20b801
83b40918014a20b80182b40918014a20b80181b40918014a20b80180b409
18014a20b8017fb40918014a20b8017eb40918014a20b8017db40918014a
20b8017cb40918014a20b8017bb40918014a20b8017ab40918014a20b801
79b40918014a20b80178b40918014a20b80177b40918014a20b80176b409
18014a20b80175b40918014a20b80174b40918014a20b80173b40918014a
20b80172b40918014a20b80171b40918014a20b80170b40918014a20b801
6fb40918014a20b8016eb40918014a20b8016db40918014a20b8016cb409
18014a20b8016bb40918014a20b8016ab40918014a20b80169b40918014a
20b80168b40918014a20b80167b40918014a20b80166b40918014a20b801
65b40918014a20b80164b40918014a20b80163b40918014a20b80162b409
18014a20b80161b40918014a20b80160b40918014a20b8015fb40918014a
20b8015eb40918014a20b8015db40918014a20b8015cb40918014a20b801
5bb40918014a20b8015ab40918014a20b80159b40918014a20b80158b409
18014a20b80157b40918014a20b80156b40918014a20b80155b40918014a
20b80154b40918014a20b80153b40918014a20b80152b40918014a20b801
50b40918014a20b8014fb40918014a20b8014eb40918014a20b8014cb409
18014a20b8014bb40918014a20b8014ab40918014a20b80149b40918014a
20b80148b40918014a20b80147b40918014a20b80146b40918014a20b801
45b40918014a20b80144b40918014a20b80143b30918014ab80284b21e3e
1fb80283b21e151fb80282b21e3e1fb80281b21e3a1fb80280b21e3e1fb8
027fb21e3e1fb8027eb21e0c1fb8027db21e3e1fb8027cb21e3e1fb8027b
b21e3e1fb8027ab21e3e1fb80279b21d411fb80278b21d431fb80277b21d
431fb80276b21d431fb80275b21d411fb80274b21d431fb80273b21d431f
b80272b21d411fb80271b21d421fb80270b21d421fb8026fb21d421fb802
6eb21d431fb8026db21d431fb8026cb21d431fb8026bb21c451fb8026ab2
1c451fb80269b21c451fb80268b21c451fb80267b21c451fb80266b21c44
1fb80265b21c451fb80264b21c451fb80263b21c451fb80262b21c451fb8
0261b21c451fb80260b21c451fb8025fb21c451fb8025eb21c441fb8025d
b21c451fb8025cb21c451fb8025bb21c451fb8025ab21c451fb80259b21c
451fb80258b21c451fb80257b21c451fb80256b21c451fb80255b21c451f
b80254b21c451fb80253b21c451fb80252b21c451fb80251b21c451fb802
50b21c451fb8024fb21c451fb8024eb21c451fb8024db21c451fb8024cb2
1c451fb8024bb21c451fb8024ab21b491fb80249b21b491fb80248b21b4a
1fb80247b21b4a1fb80246b21b4b1fb80245b21b4c1fb80244b21b4c1fb8
0243b21b4c1fb80242b21b4b1fb80241b21b491fb80240b21b491fb8023f
b21b4a1fb8023eb21b4a1fb8023db21b4a1fb8023cb21b4b1fb8023bb21b
4b1fb8023ab21b4c1fb80239b21b4c1fb80238b21b4c1fb80237b21b4c1f
b80236b21b4c1fb80235b21b491fb80234b21b491fb80233b21b4a1fb802
32b21b4a1fb80231b21b4a1fb80230b21b4b1fb8022fb21b4b1fb8022eb2
1b4c1fb8022db21b4c1fb8022cb21b4c1fb8022bb21b4c1fb8022ab21b4c
1fb80229b21b4c1fb80228b21b4c1fb80227b21b491fb80226b21b491fb8
0225b21b4a1fb80224b21b4a1fb80223b21b4a1fb80222b21b4b1fb80221
b21b4b1fb80220b21b4c1fb8021fb21b4c1fb8021eb21b4c1fb8021db21b
4c1fb8021cb21b4c1fb8021bb21b4c1fb8021ab21a4e1fb80219b21a4e1f
b80218b21a4f1fb80217b21a4f1fb80216b21a4e1fb80215b21a4e1fb802
14b21a4f1fb80213b21a4f1fb80212b21a4f1fb80211b21a4e1fb80210b2
1a4e1fb8020fb21a4f1fb8020eb21a4f1fb8020db21a4f1fb8020cb21a4e
1fb8020bb21a4e1fb8020ab21a4e1fb80209b21a4f1fb80208b21a4f1fb8
0207b21a4f1fb80206b219501fb80205b219511fb80204b219511fb80203
b219501fb80202b219511fb80201b219511fb80200b219511fb801ffb219
511fb801feb219501fb801fdb219511fb801fcb219511fb801fbb219511f
b801fab219501fb801f9b219511fb801f8b219511fb801f7b219511fb801
f6b219511fb801f5b218541fb801f4b218531fb801f3b218541fb801f2b2
18541fb801f1b218541fb801f0b218531fb801efb218541fb801eeb21854
1fb801edb218541fb801ecb218531fb801ebb218531fb801eab218541fb8
01e9b218541fb801e8b218541fb801e7b218541fb801e6b218531fb801e5
b218541fb801e4b218531fb801e3b218541fb801e2b218541fb801e1b218
541fb801e0b218531fb801dfb218531fb801deb218541fb801ddb218541f
b801dcb218541fb801dbb218541fb801dab218531fb801d9b218541fb801
d8b218541fb801d7b217571fb801d6b217561fb801d5b217561fb801d4b2
17571fb801d3b217571fb801d2b217571fb801d1b217571fb801d0b21756
1fb801cfb217561fb801ceb217571fb801cdb217571fb801ccb217571fb8
01cbb217571fb801cab217561fb801c9b217561fb801c8b217571fb801c7
b217571fb801c6b217571fb801c5b217571fb801c4b217571fb801c3b217
561fb801c2b217571fb801c1b217571fb801c0b217571fb801bfb217561f
b801beb217561fb801bdb217571fb801bcb217571fb801bbb217571fb801
bab217571fb801b9b217571fb801b8b217561fb801b7b217571fb801b6b2
17571fb801b5b217571fb801b4b217571fb801b3b2163f1fb801b2b2165b
1fb801b1b2165b1fb801b0b2165b1fb801afb2165b1fb801aeb2165b1fb8
01adb2165b1fb801acb2165b1fb801abb2165b1fb801aab2163e1fb801a9
b2163f1fb801a8b2163f1fb801a7b2165b1fb801a6b2165b1fb801a5b216
5b1fb801a4b2165b1fb801a3b2165b1fb801a2b2165b1fb801a1b2165b1f
b801a0b2165b1fb8019fb2163e1fb8019eb2163f1fb8019db2163f1fb801
9cb2165b1fb8019bb2165b1fb8019ab2165b1fb80199b2165b1fb80198b2
163e1fb80197b2165b1fb80196b2165b1fb80195b2165b1fb80194b2163e
1fb80193b2163f1fb80192b2163f1fb80191b2165b1fb80190b2165b1fb8
018fb2165b1fb8018eb2165b1fb8018db2165b1fb8018cb2163f1fb8018b
b2165b1fb8018ab2165b1fb80189b2165b1fb80188b2165b1fb80187b216
5b1fb80186b215611fb80185b215621fb80184b215621fb80183b215661f
b80182b215661fb80181b215551fb80180b215451fb8017fb215361fb801
7eb215361fb8017db215611fb8017cb215621fb8017bb215621fb8017ab2
15641fb80179b215661fb80178b215661fb80177b215661fb80176b21566
1fb80175b215661fb80174b215661fb80173b215451fb80172b215621fb8
0171b215621fb80170b215631fb8016fb215641fb8016eb215661fb8016d
b215661fb8016cb215661fb8016bb215661fb8016ab215661fb80169b215
621fb80168b215621fb80167b215611fb80166b215641fb80165b215641f
b80164b215661fb80163b215661fb80162b215661fb80161b215661fb801
60b215661fb8015fb215661fb8015eb215551fb8015db215451fb8015cb2
15451fb8015bb215361fb8015ab215611fb80159b215621fb80158b21562
1fb80157b215631fb80156b215641fb80155b215661fb80154b215661fb8
0153b215661fb80152b215661fb80151b214401fb80150b214551fb8014f
b214561fb8014eb214831fb8014db2142d1fb8014cb214401fb8014bb214
401fb8014ab214411fb80149b214401fb80148b214401fb80147b214411f
b80146b2147e1fb80145b214871fb80144b2147f1fb80143b214801fb801
42b212461fb80141b212461fb80140b212461fb8013fb212461fb8013eb2
12441fb8013db212461fb8013cb211591fb8013bb211591fb8013ab2115b
1fb80139b2115b1fb80138b211471fb80137b211581fb80136b2115a1fb8
0135b2115b1fb80134b2115b1fb80133b2112c1fb80132b211471fb80131
b211551fb80130b211571fb8012fb211571fb8012eb211581fb8012db211
591fb8012cb211591fb8012bb2115a1fb8012ab2115a1fb80129b2115b1f
b80128b2115b1fb80127b2115b1fb80126b2115b1fb80125b211561fb801
24b211561fb80123b211571fb80122b211581fb80121b211591fb80120b2
115a1fb8011fb2115a1fb8011eb2115b1fb8011db2115b1fb8011cb2115b
1fb8011bb2115b1fb8011ab2115b1fb80119b2105d1fb80118b2105e1fb8
0117b2105f1fb80116b2105f1fb80115b2105f1fb80114b2105f1fb80113
b2105f1fb80112b2105d1fb80111b2105e1fb80110b2105f1fb8010fb210
5f1fb8010eb2105f1fb8010db2105f1fb8010cb2105d1fb8010bb2105e1f
b8010ab2105f1fb80109b2105f1fb80108b2105f1fb80107b2105f1fb801
06b2105d1fb80105b2105e1fb80104b2105f1fb80103b2105f1fb80102b2
105f1fb80101b2105f1fb8010040ff0f621fff0f621ffe0f631ffd0f641f
fc0f621ffb0f621ffa0f621ff90f631ff80f641ff70f641ff60f641ff50f
641ff40f621ff30f621ff20f631ff10f641ff00f641fef0f641fee0f641f
ed0f621fec0f621feb0f631fea0f641fe90f641fe80f641fe70f641fe60e
671fe50e681fe40e681fe30e681fe20e681fe10e671fe00e681fdf0e681f
de0e681fdd0e671fdc0e681fdb0e681fda0e681fd90e681fd80d6b1fd70d
311fd60d6b1fd50d6c1fd40d261fd30d261fd20d6c1fd10d2b1fd00d2b1f
cf0d2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d6b1fca0d6c1fc90d6d1fc80d
6a1fc70d691fc60d681fc50d671fc40d261fc30d311fc20d311fc10d311f
40ffc00d311fbf0d311fbe0d311fbd0c711fbc0c721fbb0c731fba0c741f
b90c741fb80c741fb70c711fb60c711fb50c721fb40c731fb30c741fb20c
741fb10c741fb00c741faf0b791fae0b7a1fad0b7c1fac0b7d1fab0b7e1f
aa0b7e1fa90b7e1fa80b7e1fa70b7e1fa60b7e1fa50b2d1fa40b7e1fa30b
7e1fa20b791fa10b7e1fa00b6b1f9f0b791f9e0b7e1f9d0b7e1f9c0b791f
9b0b7a1f9a0b7c1f990b7d1f980b7e1f970b7e1f960b7e1f950b7e1f940b
7e1f930b7e1f920b6b1f910b2d1f900a4e1f8f0a4f1f8e0a671f8d0aa51f
8c0aa71f8503251f8403381f8301381f8255805581ab80557f557d557eab
7d550b7d010b7d1b7d4b7d7b7dab7ddb7d4012060a7c557a557bab7a5579
55775578ab7755ba028600660285403c5576ab755504751475747503f475
01ab750144750130750102007510752075030c7455725573ab7255007250
728072b072043bb072e072020072010ab8ffc0b3721b1e46b8ffc0407c72
0d104671556f5570ab6f556e666d556a03251f6938675568ab6755663864
5565ab645563386255613860555f385d555eab5d555c385a555bab5a5559
3858555703251f5638545555ab54555338515552ab51554f384e554e0325
1f4d384b554cab4b554a38485549ab4855473846554503381f001c101c20
1c0310b8ffc0404e1c1b1e46001b0142301b401be01bf01b04001bb01bc0
1b03120f1a1f1a02290f1901434f19016f197f198f19030f18cf18024018
292c460f17cf17df17ef1704134017292e460016101620160315b8ffc0b3
164d5446b8ffc0b3163f4446b8ffc0b316313546b8ffc0404d162326460f
15010f151f1502451f15010011e011f0110315bf10cf10020f0f010f0fff
0f02400f3135460f0e1f0e020f0e1f0eff0e03400e3137460f0d1f0d020f
0d1f0dff0d0316400d313746b8ffc040270c5054460f0b1f0b02553f0b4f
0b02400b3f4346400b2d30460003012001010001100120010308b8ffc0b3
01151f46b80100b316010501b80190b154532b2b4bb80800524bb008505b
b00188b02553b00188b040515ab00688b000555a5b58b101018e59b10102
4354b0144b515a58b101018e59858d8d00421d4bb01d5358b0a01d594bb0
805358b0401d594bb0ff5358b0001db1160042592b5e7375732b2b745e73
2b2b5e73742b73742b7374745e7301755e73742b2b2b2b5e732b5e732b73
74755e735e735e73755e732b5e73002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73755e732b2b5e735f7373737374
2b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2bb1000243545841ff02840064028300640282
00640281006402800064027f0064027e0064027d0064027c0064027b0064
027a00640279006402780064027700640276006402750064027400640273
00640271006402700064026f0064026e0064026d0064026c0064026b0064
026a00640269006402680064026700640266006402650064026400640263
0064026200640261006402600064025f0064025e0064025d0064025c0064
025b0064025a006402590064025800640257006402560064025500640254
006402530064025200640251006402500064024f0064024e0064024d0064
024c0064024b0064024a0064024900640248006402470064024600640245
00640244006402430064024200640241006402400064023f0064023e0064
023d0064023c0064023b0064023a00640239006402380064023700640236
0064023500640234006402330064023200640231006402300064022f0064
022e0064022d0064022c0064022b0064022a006402290064022800640227
006402260064022500640224006402230064022200640221006402200064
021f0064021e0064021d0064021c0064021b0064021a0064021900640218
006402170064021600640215006402140064021300640212006402110064
02100064020f0064020e0064020d0064020c0064020b0064020a00640209
006402080064020700640206006402050064020441ff0064020300640202
0064020100640200006401ff006401fe006401fd006401fc006401fb0064
01fa006401f9006401f8006401f7006401f6006401f5006401f4006401f3
006401f2006401f1006401f0006401ef006401ee006401ed006401ec0064
01eb006401ea006401e9006401e8006401e7006401e6006401e5006401e4
006401e3006401e2006401e1006401e0006401df006401de006401dd0064
01dc006401db006401da006401d9006401d8006401d7006401d6006401d5
006401d4006401d3006401d2006401d1006401d0006401cf006401ce0064
01cd006401cc006401cb006401ca006401c9006401c8006401c7006401c6
006401c5006401c4006401c3006401c2006401c1006401c0006401bf0064
01be006401bd006401bc006401bb006401ba006401b9006401b8006401b7
006401b6006401b5006401b4006401b3006401b2006401b1006401b00064
01af006401ae006401ad006401ac006401ab006401aa006401a9006401a8
006401a7006401a6006401a5006401a4006401a3006401a2006401a10064
01a00064019f0064019e0064019d0064019c0064019b0064019a00640199
006401980064019700640196006401950064019400640193006401920064
0191006401900064018f0064018e0064018d0064018c0064018b0064018a
006401890064018800640187006401860064018500644180018400640183
0064018200640181006401800064017f0064017e0064017d0064017c0064
017b0064017a006401790064017800640177006401760064017500640174
006401730064017200640171006401700064016f0064016e0064016d0064
016c0064016b0064016a0064016900640168006401670064016600640165
00640164006401630064016200640161006401600064015f0064015e0064
015d0064015c0064015b0064015a00640159006401580064015700640156
00640155006401540064015300640152006401500064014f0064014e0064
014c0064014b0064014a0064014900640148006401470064014600640145
006401440064014300642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b59
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e00>
[16133 16057 16201 16317 16377 15605 16377 15853 16241 16097 16073 16353 16213
16269 15957 16225 16309 16261 16365 16357 16333 16029 16341 15365 15925 16361
16435 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
3 12216 282 <00020060ffed039c056d00260039008b401f3f3b010b1b39100d014d390a
0c014d391010014d39100f014d39180b014d39bb01f90000002fffe0b30d
014d2fb8ffe8b310014d2fb8fff0b30f014d2fb8fff0b30c014d2fb8ffe8
b30b014d2fb8020a400a1321460b39271b040e2ab80105b2184a34b80104
b30e4d054c003f3fed3fed1217393f012fe12b2b2b2b2bd4e12b2b2b2b2b
323931305d25140e0223222e023535060623222e0235343e023332161711
343e0233321e021503262623220e0215141e0233323e0237039c07111c14
151c120847995b638c57283262915f4f834007141f1819201209a6437d44
3f58371915345641213d40462719080c070404070c08774d564d83b16274
bb84474543020b070d070505070d07fd4553573c627c404482653d122a43
3100>Calibri AddT42Char 
5 9116 437 <00010094ffed039c03bc00320092401f3f34010b27100d014d270a0c014d
27080b014d27100f10014c27100b014d27b801f9b6004011014d001fb8ff
f0b30d014d1fb8fff6b30c014d1fb8fff8b40f10014c1fb8fff8b30b014d
1fb8fff0b40f10014c1fb8fff0b30b014d1fb801f94009132d49270b0519
4924b80105b30e4d054c003f3fed3f1239393f012fe12b2b2b2b2b2bd42b
e12b2b2b2b2b3931305d25140e0223222e023535060623222e023511343e
0233321e021511141e023332363711343e0233321e0215039c07121d1517
1d11064d964d5a7b4c210714201818201308172f48303e7b4507141f1918
20120919080b080404080b0877554e3c6789620222080b090303090b08fd
f44f5f432558550275080b090303090b0800>Calibri AddT42Char 
5 11378 460 <00010059000002d703b7002b003bb90010fff040160c0d014c26100c0d01
4c2f0001003409440902092511b80102b319480f27b80102b1054b003fed
323fed32012f5dcd5d31302b2b25140e02232122263535343e0237012122
2635343e023321321e021515140e02070121321e0202d706080e08fdd615
1b04080e0a018dfe7f101304090d0902040b110c0704080e0afe7501a608
0d090646131b11071c21220e16161910026a2125121b1107060e1611200e
18171a10fd9607101b00>Calibri AddT42Char 
2 0 0 <00050000fe7303d2050e000300070039004d004e005bbc000d0152001600
3a01b5b5154444082d07be0143000200200154000800010143400f04020d
b71a1a3f23b735068d031149b8012db43f078d0202003ffddefdce2ffdde
ed12392fed012fdde1dee110f1ce11392f33e1d4e1313001112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>Calibri AddT42Char 
Calibri /CharStrings get begin
/d 282 def
/u 437 def
/z 460 def
end
Calibri /Encoding get
dup 100 /d put
dup 117 /u put
dup 122 /z put
pop
end
%ADOEndSubsetFont
reset_gvm
/PRHMEL+Calibri /Calibri findfont ct_VMDictPut
/PRHMEL+Calibri*1 
[100{/.notdef}rp /d 16{/.notdef}rp /u 4{/.notdef}rp /z 133{/.notdef}rp]
PRHMEL+Calibri nf
PRHMEL+Calibri*1 [18 0 0 -18 0 0 ]msf
301.92 219.213 mo
(z)sh
PRHMEL+Calibri*1 [12 0 0 -12 0 0 ]msf
309.12 223.533 mo
(ud)
[6.23993 0 ]xsh
263.28 161.613 mo
263.28 161.613 263.28 161.373 263.52 161.373 cv
544.32 161.373 li
544.56 161.373 544.8 161.613 544.8 161.613 cv
544.8 399.693 li
544.8 399.933 544.56 399.933 544.32 399.933 cv
263.52 399.933 li
263.28 399.933 263.28 399.933 263.28 399.693 cv
264 399.693 mo
263.52 399.213 li
544.32 399.213 li
544.08 399.693 li
544.08 161.613 li
544.32 162.093 li
263.52 162.093 li
264 161.613 li
264 399.693 li
f
263.28 161.613 mo
263.28 161.613 263.28 161.373 263.52 161.373 cv
544.32 161.373 li
544.56 161.373 544.8 161.613 544.8 161.613 cv
544.8 399.693 li
544.8 399.933 544.56 399.933 544.32 399.933 cv
263.52 399.933 li
263.28 399.933 263.28 399.933 263.28 399.693 cv
264 399.693 mo
263.52 399.213 li
544.32 399.213 li
544.08 399.693 li
544.08 161.613 li
544.32 162.093 li
263.52 162.093 li
264 161.613 li
264 399.693 li
f
374.16 172.653 mo
374.16 172.413 374.4 172.173 374.64 172.173 cv
519.12 172.173 li
519.12 172.173 519.36 172.413 519.36 172.653 cv
519.36 378.333 li
519.36 378.573 519.12 378.813 519.12 378.813 cv
374.64 378.813 li
374.4 378.813 374.16 378.573 374.16 378.333 cv
375.12 378.333 mo
374.64 378.093 li
519.12 378.093 li
518.64 378.333 li
518.64 172.653 li
519.12 173.133 li
374.64 173.133 li
375.12 172.653 li
375.12 378.333 li
f
374.16 172.653 mo
374.16 172.413 374.4 172.173 374.64 172.173 cv
519.12 172.173 li
519.12 172.173 519.36 172.413 519.36 172.653 cv
519.36 378.333 li
519.36 378.573 519.12 378.813 519.12 378.813 cv
374.64 378.813 li
374.4 378.813 374.16 378.573 374.16 378.333 cv
375.12 378.333 mo
374.64 378.093 li
519.12 378.093 li
518.64 378.333 li
518.64 172.653 li
519.12 173.133 li
374.64 173.133 li
375.12 172.653 li
375.12 378.333 li
f
348 212.493 mo
414.72 212.733 li
414.72 214.653 li
348 214.413 li
348 212.493 li
413.76 208.653 mo
419.76 213.693 li
413.52 218.733 li
413.76 208.653 li
f
348 212.493 mo
414.72 212.733 li
414.72 214.653 li
348 214.413 li
348 212.493 li
413.76 208.653 mo
419.76 213.693 li
413.52 218.733 li
413.76 208.653 li
f
true set_gvm
%ADOBeginSubsetFont: Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Calibri gcheck setglobal} if
2 2490 24 <000200ac0000048f050e0012001f0077401d3f2101131810014d13100f01
4d13140d014d13120c014d13180b014d13bb02320000001affe8b310014d
1ab8fff0b30f014d1ab8fff0b30d014d1ab8fff6b30c014d1ab8ffe8b30b
014d1abb021100090018010cb20e511bb80126b10554003fed3fed012fe1
2b2b2b2b2bd4e12b2b2b2b2b31305d01140e022321222635113436332132
1e0207342e0223231133323e02048f56a5f0a6feee172929170125a8e89d
51b5346faa86afb17caa7239029aa8fba5521f270482271f57a3e89969b5
844afc113e80c100>Calibri AddT42Char 
2 6844 69 <000100acfffa047e0511003d0085b3270f0f14b8ffe8b310014d14b8ffe8
b30f014d14b8ffe8b30d014d14b8fff0b30c014d14b8ffe8b30b014d14b8
0211401e1e0a2e2e321810014d32180f014d32180d014d32100c014d3218
0b014d32b802114010001e38520a2e0f270419225119550654003f3f3f12
17393f012fd4e12b2b2b2b2b32113310e12b2b2b2b2b322f33313025140e
022323222e0227012626272316161511140e0223222e0235113436333332
1e0217011e03173326263511343e0233321e0215047e0d151a0d371a2723
2315fe6820411c02020208131f18181f12082c1a521d271f1d11013a1d36
32311801020108131f191620120847141c12080b1d322702e0397d3b4896
4afcf3070d070505070d0704aa28220a17291ffdc83463605d2f4fab4f02
be070c090404090c0700>Calibri AddT42Char 
Calibri /CharStrings get begin
/D 24 def
/N 69 def
end
Calibri /Encoding get
dup 68 /D put
dup 78 /N put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/PRHMEL+Calibri*1 
[68{/.notdef}rp /D 9{/.notdef}rp /N 21{/.notdef}rp /d 16{/.notdef}rp /u 
4{/.notdef}rp /z 133{/.notdef}rp]
PRHMEL+Calibri nf
PRHMEL+Calibri*1 [16.08 0 0 -16.08 0 0 ]msf
522.96 392.973 mo
(D)sh
PRHMEL+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf
532.8 396.813 mo
(u)sh
PRHMEL+Calibri*1 [16.08 0 0 -16.08 0 0 ]msf
522.96 392.973 mo
(D)sh
PRHMEL+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf
532.8 396.813 mo
(u)sh
PRHMEL+Calibri*1 [18 0 0 -18 0 0 ]msf
491.52 370.413 mo
(N)sh
PRHMEL+Calibri*1 [12 0 0 -12 0 0 ]msf
503.04 374.733 mo
(ud)
[6.23993 0 ]xsh
gsave
60.96 -83.1869 mo
60.96 456.813 li
780.96 456.813 li
780.96 -83.1869 li
60.96 -83.1869 li
455.04 177.693 mo
451.44 177.933 li
450 178.173 li
448.32 178.413 li
447.36 178.653 li
446.64 178.893 li
444.72 179.373 li
444 179.613 li
443.52 179.853 li
442.08 180.333 li
440.64 181.053 li
439.92 181.293 li
438.48 182.013 li
438.24 182.253 li
437.28 182.733 li
437.04 182.973 li
436.08 183.453 li
435.84 183.693 li
435.36 183.933 li
435.12 184.173 li
434.64 184.413 li
434.16 184.893 li
433.68 185.133 li
433.2 185.613 li
432.72 185.853 li
430.56 188.013 li
430.08 188.253 li
429.84 188.733 li
427.92 190.653 li
427.68 191.133 li
427.2 191.613 li
426.96 192.093 li
426.48 192.573 li
426.24 193.053 li
425.76 193.533 li
425.52 194.013 li
425.28 194.253 li
424.8 195.213 li
424.56 195.453 li
424.08 196.413 li
423.84 196.653 li
423.6 197.373 li
422.4 199.773 li
422.16 200.493 li
421.92 200.973 li
421.44 202.413 li
421.2 202.893 li
420.24 206.733 li
420 208.413 li
419.76 209.853 li
419.76 217.773 li
420 217.773 li
420 219.213 li
420.24 219.213 li
420.24 220.653 li
420.48 220.653 li
420.48 221.853 li
420.72 221.853 li
420.72 222.813 li
420.96 222.813 li
420.96 223.773 li
421.2 223.773 li
421.2 224.493 li
421.44 224.493 li
421.44 225.213 li
421.68 225.213 li
421.68 225.933 li
421.92 225.933 li
421.92 226.653 li
422.16 226.653 li
422.16 227.133 li
422.4 227.133 li
422.4 227.853 li
422.64 227.853 li
422.64 228.333 li
422.88 228.333 li
422.88 228.813 li
423.12 228.813 li
423.12 229.293 li
423.36 229.293 li
423.36 229.773 li
423.6 229.773 li
423.6 230.253 li
423.84 230.253 li
423.84 230.733 li
424.08 230.733 li
424.08 231.213 li
424.32 231.213 li
424.32 231.693 li
424.56 231.693 li
424.8 231.933 li
424.8 232.413 li
425.04 232.413 li
425.04 232.893 li
425.28 232.893 li
425.52 233.133 li
425.52 233.613 li
425.76 233.613 li
425.76 234.093 li
426 234.093 li
426.48 234.573 li
426.48 235.053 li
426.72 235.053 li
427.2 235.533 li
427.2 236.013 li
427.44 236.013 li
427.92 236.493 li
427.92 236.973 li
428.16 236.973 li
432.48 241.293 li
432.96 241.533 li
433.44 242.013 li
433.92 242.253 li
434.4 242.733 li
434.88 242.973 li
435.36 243.453 li
436.32 243.933 li
436.56 244.173 li
437.04 244.413 li
437.28 244.653 li
441.6 246.813 li
442.32 247.053 li
442.8 247.293 li
444.24 247.773 li
444.72 248.013 li
448.56 248.973 li
450.24 249.213 li
451.68 249.453 li
459.6 249.693 li
459.6 249.453 li
461.28 249.213 li
462.72 248.973 li
466.56 248.013 li
467.04 247.773 li
469.2 247.053 li
471.12 246.093 li
471.84 245.853 li
472.8 245.373 li
473.04 245.133 li
474 244.653 li
474.24 244.413 li
475.2 243.933 li
475.44 243.693 li
475.92 243.453 li
476.16 243.213 li
476.64 242.973 li
477.12 242.493 li
477.6 242.253 li
478.08 241.773 li
478.56 241.533 li
480.48 239.613 li
480.96 239.373 li
481.44 238.893 li
481.68 238.413 li
483.36 236.733 li
483.6 236.253 li
484.08 235.773 li
484.32 235.293 li
484.8 234.813 li
485.04 234.333 li
485.28 234.093 li
485.52 233.613 li
485.76 233.373 li
486 232.893 li
486.24 232.653 li
486.72 231.693 li
486.96 231.453 li
488.4 228.573 li
488.64 227.853 li
488.88 227.373 li
489.12 226.653 li
489.36 226.173 li
490.08 224.013 li
490.8 221.133 li
491.04 219.693 li
491.28 218.013 li
491.52 215.133 li
491.76 212.493 li
491.52 212.493 li
491.52 209.613 li
491.28 209.613 li
491.28 207.933 li
491.04 207.933 li
491.04 206.493 li
490.8 206.493 li
490.8 205.533 li
490.56 205.533 li
490.56 204.573 li
490.32 204.573 li
490.32 203.613 li
490.08 203.613 li
490.08 202.893 li
489.84 202.893 li
489.84 202.173 li
489.6 202.173 li
489.6 201.453 li
489.36 201.453 li
489.36 200.973 li
489.12 200.973 li
489.12 200.253 li
488.88 200.253 li
488.88 199.533 li
488.64 199.533 li
488.64 199.053 li
488.4 199.053 li
488.4 198.573 li
488.16 198.573 li
488.16 198.093 li
487.92 198.093 li
487.92 197.613 li
487.68 197.613 li
487.68 197.133 li
487.44 197.133 li
487.44 196.653 li
487.2 196.653 li
487.2 196.173 li
486.96 195.933 li
486.72 195.933 li
486.72 195.453 li
486.48 195.453 li
486.48 194.973 li
486.24 194.733 li
486 194.733 li
486 194.253 li
485.76 194.253 li
485.76 193.773 li
485.28 193.293 li
485.04 193.293 li
485.04 192.813 li
484.56 192.333 li
484.32 192.333 li
484.32 191.853 li
483.84 191.373 li
483.6 191.373 li
483.6 190.893 li
482.16 189.453 li
481.92 189.453 li
481.92 188.973 li
480.48 187.533 li
480 187.293 li
478.56 185.853 li
478.08 185.613 li
477.6 185.133 li
477.12 184.893 li
476.64 184.413 li
476.16 184.173 li
475.68 183.693 li
474.72 183.213 li
474.48 182.973 li
473.52 182.493 li
473.28 182.253 li
469.92 180.573 li
468.48 180.093 li
468 179.853 li
465.84 179.133 li
462.96 178.413 li
461.28 178.173 li
459.84 177.933 li
456.24 177.693 li
455.04 177.693 li
cp
eclp
419.76 213.693 mo
419.76 194.013 435.84 177.693 455.76 177.693 cv
475.44 177.693 491.76 194.013 491.76 213.693 cv
491.76 233.613 475.44 249.693 455.76 249.693 cv
435.84 249.693 419.76 233.613 419.76 213.693 cv
/1 
[/DeviceRGB] /CSA add_res
.25 .25 .25 rgb
ef
419.28 213.693 mo
419.28 212.013 li
419.52 210.093 li
420 206.493 li
420.96 202.893 li
422.16 199.533 li
423.6 196.413 li
425.52 193.533 li
427.68 190.653 li
429.84 188.013 li
432.48 185.613 li
435.36 183.693 li
438.24 181.773 li
441.6 180.333 li
444.72 179.133 li
448.32 178.173 li
451.92 177.693 li
453.84 177.453 li
457.44 177.453 li
459.36 177.693 li
462.96 178.173 li
466.56 179.133 li
469.68 180.333 li
473.04 181.773 li
475.92 183.693 li
478.8 185.613 li
481.44 188.013 li
483.6 190.653 li
485.76 193.533 li
487.68 196.413 li
489.12 199.533 li
490.32 202.893 li
491.28 206.493 li
491.76 210.093 li
492 212.013 li
492 215.613 li
491.76 217.533 li
491.28 221.133 li
490.32 224.493 li
489.12 227.853 li
487.68 231.213 li
485.76 234.093 li
483.84 236.973 li
481.44 239.373 li
478.8 241.773 li
475.92 243.933 li
473.04 245.853 li
469.92 247.293 li
466.56 248.493 li
462.96 249.453 li
459.36 249.933 li
457.44 250.173 li
453.84 250.173 li
451.92 249.933 li
448.32 249.453 li
444.96 248.493 li
441.6 247.293 li
438.24 245.853 li
435.36 243.933 li
432.48 241.773 li
429.84 239.613 li
427.68 236.973 li
425.52 234.093 li
423.6 231.213 li
422.16 227.853 li
420.96 224.733 li
420 221.133 li
419.52 217.533 li
419.28 215.613 li
419.28 213.693 li
420 215.613 mo
420.24 217.293 li
420.72 220.893 li
421.68 224.253 li
422.88 227.613 li
424.32 230.733 li
426 233.613 li
428.16 236.493 li
430.56 238.893 li
432.96 241.293 li
435.84 243.213 li
438.72 245.133 li
441.84 246.573 li
444.96 247.773 li
448.56 248.733 li
451.92 249.213 li
453.84 249.453 li
457.44 249.453 li
459.36 249.213 li
462.72 248.733 li
466.32 247.773 li
469.44 246.573 li
472.56 245.133 li
475.68 243.453 li
478.32 241.293 li
480.72 238.893 li
483.12 236.493 li
485.28 233.613 li
486.96 230.733 li
488.4 227.613 li
489.6 224.493 li
490.56 220.893 li
491.04 217.533 li
491.28 215.613 li
491.28 212.013 li
491.04 210.093 li
490.56 206.733 li
489.6 203.133 li
488.4 200.013 li
486.96 196.893 li
485.28 193.773 li
483.12 191.133 li
480.96 188.493 li
478.32 186.333 li
475.68 184.173 li
472.56 182.493 li
469.44 181.053 li
466.32 179.853 li
462.96 178.893 li
459.36 178.413 li
457.44 178.173 li
453.84 178.173 li
451.92 178.413 li
448.56 178.893 li
444.96 179.853 li
441.84 181.053 li
438.72 182.493 li
435.84 184.173 li
432.96 186.333 li
430.56 188.493 li
428.16 191.133 li
426.24 193.773 li
424.32 196.893 li
422.88 200.013 li
421.68 203.133 li
420.72 206.493 li
420.24 210.093 li
420 212.013 li
420 215.613 li
0 0 0 rgb
f
grestore
419.76 213.693 mo
419.76 194.013 435.84 177.693 455.76 177.693 cv
475.44 177.693 491.76 194.013 491.76 213.693 cv
491.76 233.613 475.44 249.693 455.76 249.693 cv
435.84 249.693 419.76 233.613 419.76 213.693 cv
.25 .25 .25 rgb
ef
419.28 213.693 mo
419.28 212.013 li
419.52 210.093 li
420 206.493 li
420.96 202.893 li
422.16 199.533 li
423.6 196.413 li
425.52 193.533 li
427.68 190.653 li
429.84 188.013 li
432.48 185.613 li
435.36 183.693 li
438.24 181.773 li
441.6 180.333 li
444.72 179.133 li
448.32 178.173 li
451.92 177.693 li
453.84 177.453 li
457.44 177.453 li
459.36 177.693 li
462.96 178.173 li
466.56 179.133 li
469.68 180.333 li
473.04 181.773 li
475.92 183.693 li
478.8 185.613 li
481.44 188.013 li
483.6 190.653 li
485.76 193.533 li
487.68 196.413 li
489.12 199.533 li
490.32 202.893 li
491.28 206.493 li
491.76 210.093 li
492 212.013 li
492 215.613 li
491.76 217.533 li
491.28 221.133 li
490.32 224.493 li
489.12 227.853 li
487.68 231.213 li
485.76 234.093 li
483.84 236.973 li
481.44 239.373 li
478.8 241.773 li
475.92 243.933 li
473.04 245.853 li
469.92 247.293 li
466.56 248.493 li
462.96 249.453 li
459.36 249.933 li
457.44 250.173 li
453.84 250.173 li
451.92 249.933 li
448.32 249.453 li
444.96 248.493 li
441.6 247.293 li
438.24 245.853 li
435.36 243.933 li
432.48 241.773 li
429.84 239.613 li
427.68 236.973 li
425.52 234.093 li
423.6 231.213 li
422.16 227.853 li
420.96 224.733 li
420 221.133 li
419.52 217.533 li
419.28 215.613 li
419.28 213.693 li
420 215.613 mo
420.24 217.293 li
420.72 220.893 li
421.68 224.253 li
422.88 227.613 li
424.32 230.733 li
426 233.613 li
428.16 236.493 li
430.56 238.893 li
432.96 241.293 li
435.84 243.213 li
438.72 245.133 li
441.84 246.573 li
444.96 247.773 li
448.56 248.733 li
451.92 249.213 li
453.84 249.453 li
457.44 249.453 li
459.36 249.213 li
462.72 248.733 li
466.32 247.773 li
469.44 246.573 li
472.56 245.133 li
475.68 243.453 li
478.32 241.293 li
480.72 238.893 li
483.12 236.493 li
485.28 233.613 li
486.96 230.733 li
488.4 227.613 li
489.6 224.493 li
490.56 220.893 li
491.04 217.533 li
491.28 215.613 li
491.28 212.013 li
491.04 210.093 li
490.56 206.733 li
489.6 203.133 li
488.4 200.013 li
486.96 196.893 li
485.28 193.773 li
483.12 191.133 li
480.96 188.493 li
478.32 186.333 li
475.68 184.173 li
472.56 182.493 li
469.44 181.053 li
466.32 179.853 li
462.96 178.893 li
459.36 178.413 li
457.44 178.173 li
453.84 178.173 li
451.92 178.413 li
448.56 178.893 li
444.96 179.853 li
441.84 181.053 li
438.72 182.493 li
435.84 184.173 li
432.96 186.333 li
430.56 188.493 li
428.16 191.133 li
426.24 193.773 li
424.32 196.893 li
422.88 200.013 li
421.68 203.133 li
420.72 206.493 li
420.24 210.093 li
420 212.013 li
420 215.613 li
0 0 0 rgb
f
1 1 1 rgb
true set_gvm
%ADOBeginSubsetFont: Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Calibri gcheck setglobal} if
5 0 374 <00010099fffa03a003ca00320094400f12100b014d13100b014d3f34012a
13b8fff0b310014d13b8fff0b30f014d13b8fff0b30d014d13b8fff6b30c
014d13b8ffe8b30b014d13b801f8401b1e0b1010014d0b100d014d0b100f
014d0b0a0c014d0b180b014d0bb801f8b700400c014d001e10b80106400a
2d4a2a192449194c054c003f3f3f12393fed012f2f2be12b2b2b2b2b10e1
2b2b2b2b2b3931305d002b2b25140e0223222e023511342e022322060711
140e0223222e023511343e0233321e021515363633321e021503a0081220
1819201208182e49303e7c44081220191820130706121c17161d10074c97
4d5a7b4c2119080b080404080b08020f4d5e44245855fd8b080b08040408
0b080384080b090303090b0877554f3d66896000>Calibri AddT42Char 
5 10270 449 <00010035fffa058403bc004500deb90047ffc0403d0f014d38080c014d29
380137080c014d252e01262101262001261f01261e01261d01271c012804
012903013a3b013b3a013b2d013c2c01102015014d10b8ffe0b310014d10
b8ffe0400a0d014d10200c014d100fb8ffe0b310014d0fb8ffe0400c0d01
4d0f200c014d0f414910b8ffe040200f014d3f104f106f107f1004104012
164810334925493a902c012c200f014d2cb8ffc04010131648672c772c02
452c012c174c094c003f3fd55d5d2b2b5dc43f3fcd2b5d2b3f012f2b2b2b
2f2b2b2b2b3130005d5d5d5d015d5d5d5d5d5d5d5d5d2b5d2b2b01140607
010e0323222e0227032707030e0323222e022701262635343e0233321e02
17131737133e0333321e0217131737133e0333321e0205840405fef7030d
17281e1f2a190c03bd0202af030d1a291e1f27190c03fef9050408132017
1c22120803d90202c70209121f19181f120802d70201d6020913211a181d
1107039f07140ffca90b0e080304080e0a028d0909fd730b0e080304080e
0a03570f1407090b070203070d09fd1a090902e6090d070303070c08fd18
090902e6090d070302080a00>Calibri AddT42Char 
Calibri /CharStrings get begin
/n 374 def
/w 449 def
end
Calibri /Encoding get
dup 110 /n put
dup 119 /w put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/PRHMEL+Calibri*1 
[68{/.notdef}rp /D 9{/.notdef}rp /N 21{/.notdef}rp /d 9{/.notdef}rp /n 
6{/.notdef}rp /u /.notdef /w 2{/.notdef}rp /z 133{/.notdef}rp]
PRHMEL+Calibri nf
PRHMEL+Calibri*1 [28.08 0 0 -28.08 0 0 ]msf
431.04 219.693 mo
(w)sh
PRHMEL+Calibri*1 [18.72 0 0 -18.72 0 0 ]msf
451.2 226.413 mo
(udn)
[9.82788 9.82788 0 ]xsh
456.48 291.453 mo
456.72 254.733 li
454.56 254.733 li
454.32 291.453 li
456.48 291.453 li
460.56 255.933 mo
455.76 249.693 li
450.72 255.693 li
460.56 255.933 li
0 0 0 rgb
f
456.48 291.453 mo
456.72 254.733 li
454.56 254.733 li
454.32 291.453 li
456.48 291.453 li
460.56 255.933 mo
455.76 249.693 li
450.72 255.693 li
460.56 255.933 li
f
418.32 327.453 mo
418.56 325.773 li
418.56 323.853 li
419.04 320.013 li
420 316.653 li
421.2 313.293 li
422.88 309.933 li
424.8 306.813 li
426.72 303.933 li
429.12 301.293 li
431.76 299.133 li
434.64 296.973 li
437.76 295.053 li
440.88 293.373 li
444.24 292.173 li
447.84 291.213 li
451.44 290.733 li
453.36 290.493 li
457.2 290.493 li
459.12 290.733 li
462.72 291.213 li
466.32 292.173 li
469.68 293.373 li
473.04 295.053 li
476.16 296.733 li
478.8 298.893 li
481.44 301.293 li
483.84 303.933 li
486 306.813 li
487.92 309.933 li
489.36 313.053 li
490.8 316.413 li
491.52 320.013 li
492.24 323.613 li
492.24 325.533 li
492.48 327.453 li
492.24 329.373 li
492.24 331.293 li
491.76 334.893 li
490.8 338.493 li
489.6 341.853 li
487.92 345.213 li
486 348.093 li
484.08 350.973 li
481.68 353.613 li
479.04 356.013 li
476.16 358.173 li
473.04 360.093 li
469.92 361.533 li
466.56 362.973 li
462.96 363.693 li
459.12 364.413 li
457.44 364.413 li
455.52 364.653 li
453.6 364.413 li
451.68 364.413 li
448.08 363.693 li
444.48 362.973 li
441.12 361.533 li
437.76 360.093 li
434.64 358.173 li
432 356.013 li
429.36 353.853 li
426.96 351.213 li
424.8 348.333 li
422.88 345.213 li
421.44 342.093 li
420 338.493 li
419.28 335.133 li
418.56 331.293 li
418.56 329.373 li
418.32 327.453 li
420.48 329.373 mo
420.48 331.053 li
421.2 334.653 li
421.92 338.013 li
423.12 341.133 li
424.56 344.253 li
426.24 347.133 li
428.4 349.773 li
430.56 352.173 li
433.2 354.573 li
435.84 356.493 li
438.72 358.173 li
441.84 359.853 li
444.96 361.053 li
448.32 361.773 li
451.68 362.253 li
453.6 362.493 li
457.2 362.493 li
458.88 362.253 li
462.48 361.773 li
465.84 361.053 li
468.96 359.853 li
472.08 358.413 li
474.96 356.493 li
477.6 354.573 li
480 352.413 li
482.4 349.773 li
484.32 347.133 li
486.24 344.253 li
487.68 341.133 li
488.88 338.013 li
489.6 334.653 li
490.32 331.053 li
490.32 324.093 li
489.6 320.493 li
488.88 317.133 li
487.68 314.013 li
486.24 310.893 li
484.56 308.013 li
482.4 305.373 li
480.24 302.733 li
477.6 300.573 li
474.96 298.653 li
472.08 296.733 li
468.96 295.293 li
465.84 294.093 li
462.48 293.373 li
459.12 292.653 li
451.92 292.653 li
448.32 293.133 li
444.96 294.093 li
441.84 295.293 li
438.72 296.733 li
435.84 298.413 li
433.2 300.573 li
430.8 302.733 li
428.4 305.133 li
426.48 308.013 li
424.56 310.893 li
423.12 313.773 li
421.92 317.133 li
421.2 320.493 li
420.48 323.853 li
420.48 329.373 li
f
true set_gvm
%ADOBeginSubsetFont: Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Calibri gcheck setglobal} if
5 11086 455 <00010022fe94037c03bc00240052b9001bfff040350b014d371b01291b01
18180b014d261801260e360e022709011a400b014d3a1a0119380b014d3b
19011f49190a13490a4b044f004b003f3f3f3f12393f31305d2b5d2b015d
5d5d2b5d5d2b2103060623222e023713262627012634363633321e021701
33133e023332161614070233780631321a201102067c091003febf081024
1e1e22140905010103f8061122201c241106feb51011050c140e01390412
0a035c15180e0503080f0dfd2e02d6130b05050e1812>Calibri AddT42Char 
Calibri /CharStrings get begin
/y 455 def
end
Calibri /Encoding get
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/PRHMEL+Calibri*1 
[68{/.notdef}rp /D 9{/.notdef}rp /N 21{/.notdef}rp /d 9{/.notdef}rp /n 
6{/.notdef}rp /u /.notdef /w /.notdef /y /z 133{/.notdef}rp]
PRHMEL+Calibri nf
PRHMEL+Calibri*1 [28.08 0 0 -28.08 0 0 ]msf
434.16 336.813 mo
(y)sh
PRHMEL+Calibri*1 [18.72 0 0 -18.72 0 0 ]msf
446.88 343.533 mo
(udn)
[9.82788 9.82788 0 ]xsh
174.24 92.2531 mo
174.24 90.3331 li
174.48 88.4131 li
174.96 84.8131 li
175.92 81.2131 li
177.12 77.8531 li
178.56 74.7331 li
180.48 71.6131 li
182.64 68.7331 li
185.04 66.0931 li
187.68 63.6931 li
190.56 61.5331 li
193.44 59.6131 li
196.8 58.1731 li
200.16 56.9731 li
203.76 56.0131 li
207.36 55.2931 li
215.04 55.2931 li
218.64 56.0131 li
222.24 56.9731 li
225.6 58.1731 li
228.72 59.6131 li
231.84 61.5331 li
234.72 63.6931 li
237.36 66.0931 li
239.76 68.7331 li
241.92 71.3731 li
243.6 74.4931 li
245.28 77.8531 li
246.48 81.2131 li
247.44 84.8131 li
247.92 88.4131 li
248.16 90.3331 li
248.16 94.1731 li
247.92 95.8531 li
247.44 99.6931 li
246.48 103.053 li
245.28 106.653 li
243.84 109.773 li
241.92 112.893 li
239.76 115.773 li
237.36 118.413 li
234.72 120.813 li
231.84 122.973 li
228.96 124.653 li
225.6 126.333 li
222.24 127.533 li
218.64 128.493 li
215.04 128.973 li
213.12 129.213 li
209.28 129.213 li
207.36 128.973 li
203.76 128.493 li
200.16 127.533 li
196.8 126.333 li
193.68 124.653 li
190.56 122.973 li
187.68 120.813 li
185.04 118.413 li
182.64 115.773 li
180.48 112.893 li
178.56 109.773 li
177.12 106.653 li
175.92 103.293 li
174.96 99.6931 li
174.48 96.0931 li
174.24 94.1731 li
174.24 92.2531 li
176.16 93.9331 mo
176.4 95.6131 li
176.88 99.2131 li
177.84 102.573 li
179.04 105.693 li
180.48 108.813 li
182.16 111.693 li
184.08 114.333 li
186.48 116.973 li
188.88 119.133 li
191.52 121.293 li
194.4 122.973 li
197.52 124.413 li
200.64 125.613 li
204 126.573 li
207.6 127.053 li
209.28 127.053 li
211.2 127.293 li
212.88 127.053 li
214.8 127.053 li
218.16 126.573 li
221.52 125.613 li
224.88 124.413 li
227.76 122.973 li
230.64 121.293 li
233.52 119.133 li
235.92 116.973 li
238.08 114.573 li
240.24 111.933 li
241.92 109.053 li
243.36 105.933 li
244.56 102.573 li
245.52 99.2131 li
246 95.8531 li
246.24 93.9331 li
246.24 90.3331 li
246 88.6531 li
245.52 85.2931 li
244.56 81.9331 li
243.36 78.5731 li
241.92 75.4531 li
240.24 72.5731 li
238.32 69.9331 li
235.92 67.5331 li
233.52 65.1331 li
230.88 63.2131 li
228 61.5331 li
224.88 60.0931 li
221.76 58.8931 li
218.4 57.9331 li
214.8 57.4531 li
213.12 57.2131 li
209.28 57.2131 li
207.6 57.4531 li
204.24 57.9331 li
200.88 58.6531 li
197.52 59.8531 li
194.64 61.2931 li
191.76 63.2131 li
188.88 65.1331 li
186.48 67.5331 li
184.32 69.9331 li
182.16 72.5731 li
180.48 75.4531 li
179.04 78.5731 li
177.84 81.6931 li
176.88 85.0531 li
176.4 88.6531 li
176.16 90.3331 li
176.16 93.9331 li
f
true set_gvm
%ADOBeginSubsetFont: QEHBAA+Calibri Initial
ct_T42Dict begin
-0.5 -0.305 1.238 0.961
 256 array 0 1 255 {1 index exch /.notdef put} for  /QEHBAA+Calibri
Type42DictBegin
[<00010000000b000b000b000b63767420b09bc4d2000000bc0000051c6670
676df6f64d0c000005d80000091a676c79663d055edb0000362800002eb0
686561648b3715aa00000ef400000036686865610dad038300000f2c0000
0024686d7478123119b900000f50000001086c6f6361a35096c900001058
000000866d61787012632625000010e0000000206e616d656adfeb200000
110000000117707265706baf02fe00001218000024106764697200000000
00000000000000000000079e0000fe930000000000000000000000000050
006a0073008000800086008d009300bf00db006200830093009900a000a6
00a900b000c100c900d70000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000fe79056d
000c03b7000600130000fffaffedfea6ffedfeb8050e000600130000fffa
ffedfe93050e00130420000600130000fffaffedff10ffee050e00130420
000600130000fffaffeefe93ff10feb80612000a050e0006000d02d2fffa
fff301fdfffa023f0006000dff36fffafff302870006000f0000fffafff1
079efeaffea700000000000000000000000000500051005a005b005c005d
006000610062006400680069006a006b006c006d006e00680069006e0060
0067006e00660068005f00610063006400660068006a006b006c006d006e
006f0070006f00720074007500760076007000720073007400750076006f
007000710072007300750077007700780079007a007b007c007d007b007c
007d00770079007a007c0078007a007c007d0078007d007e007f00800081
0082007e007f00810082007e007f00800081008200830084008500860087
008800890083008400850086008700880089008300840085008600870088
008900890086008700880089008a008b008c008d008e008f008a008b008c
008d008e008f008a008b008c008d008e008f008d008a008b008c008d008e
008f0090009000910092009300940095009600980099009b009c00900091
00920093009400950096009700980099009a009e009f00a6009000910095
0098009f009000910096009700bc00c600b500ae00af00b6006800690063
006a006f00700071006f0070007100720066006c006d00700079007c007f
00830086008700880089008a0074007500760077007a007b007c007d007e
008200850086008a0088008900830078007b008200830086008700880089
00760079007a007c007d007e0083008500880089008a0073007400750077
007a007d00880089008a008b008c008d008e00900094008b008c008d0091
0092009300940095008c008d00910095008f009000910092009300940095
008b008c008d008e008f009000910092009300940095008b008c008d008e
008f00900091009200930096009700980099009c0096009700980099009a
009b009c00960099009a009c0096009700980099009a009b009c00970098
0099009a009b009c009700980099009a009b009c0096009d00a000a1009d
009e009f00a000a100a2009d009f00a000a1009f00a2009d009e009f00a0
00a100a2009d009e00a000a1009d009e00a000a2009d00a300a400a500a6
00a700a300a400a600a700a300a400a500a600a700a600a300a700a800a9
00aa00ab00ac00ac00a800a900aa00ab00ac00a800a900aa00ab00ac00a8
00aa00ab00ac00ae00ad00ae00af00b000b100b200b300b400b500b600b7
00b800ad00ae00ad00ae00af00b000b100b200b300b400b500b600b700b8
00ad00ae00af00b000b100b200b300b400b500b600b700b800b300ae00af
00b000b200b500b600b700b800b900ba00bb00bc00be00c000c100c200c2
00b900ba00bb00bc00bd00be00bf00c000c100c200c400ba00bb00be00bf
00c000c200c300c400b900ba00bf00c000c200c600c700c900ca00cb00cc
00cf00c500c700ce00c500c700c800cf00d000d200d300d7010d00d000d1
00e900d000fd00d005e4000e0041000005ba009c009c005e005e4047645f
5e5d5c5b5a59585554535251504f4e4d4c4b4a494847464544434241403f
3e3d3c3b3a39383736352f2e2d2c2826252423221f181411100f0d0b0a09
0807060504030201002c4523466020b02660b004262348482d2c45234623
6120b02661b004262348482d2c45234660b0206120b04660b00426234848
2d2c4523462361b0206020b02661b02061b004262348482d2c45234660b0
406120b06660b004262348482d2c4523462361b0406020b02661b04061b0
04262348482d2c0110203c003c2d2c20452320b0cd442320b8015a515823
20b08d44235920b0ed51582320b04d44235920b0042651582320b00d4423
5921212d2c20204518684420b001602045b04676688a4560442d2c01b10b
0a432343650a2d2c00b10a0b4323430b2d2c00b0282370b101283e01b028
2370b10228453ab10200080d2d2c2045b00325456164b050515845441b21
21592d2c2045b0004360442d2c01b00643b00743650a2d2c2069b04061b0
008b20b12cc08a8cb8100062602b0c642364615c58b00361592d2c8a0345
8a8a87b0112bb0292344b0297ae4182d2c4565b02c234445b02b23442d2c
4b525845441b2121592d2c01b005251023208af500b0016023edec2d2c01
b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c20b0
01600110203c003c2d2c20b001610110203c003c2d2c00b00743b006430b
2d2c21210c6423648bb84000622d2c21b08051580c6423648bb82000621b
b200402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f
2b59b002602d2c0c6423648bb84000626023212d2c452345602345602345
6023766818b08062202d2cb00426b00426b00425b0042545234520b00326
6062636820b0032661658a2344442d2c2045b0005458b040442045b04061
441b2121592d2c45b1302f4523456160b0016069442d2c4b5158b02f2370
b01423421b2121592d2c4b515820b0032545695358441b2121591b212159
2d2c45b01443b0006063b0016069442d2cb02f45442d2c452320458a6044
2d2c45234560442d2c4b235158b90033ffe0b134201bb333003400594444
2d2cb0164358b00326458a586466b01f601b64b020606620581b21b04059
b001615923586559b02923442310b029e01b2121212121592d2cb0164358
b004254564b020606620581b21b04059b0016123586559b0292344b00425
b00725082058021b0359b0052510b004252046b0042523423cb0072510b0
06252046b00425b0016023423c2058011b0059b0052510b00425b029e0b0
072510b00625b029e0b00425b00725082058021b0359b00425b003254348
b00625b00325b0016043481b2159212121212121212d2cb0164358b00425
4564b020606620581b21b04059b0016123581b6559b0292344b00525b008
25082058021b0359b0042510b005252046b0042523423cb00425b0072508
b0072510b006252046b00425b0016023423c2058011b0059b0042510b005
25b029e0b02920456544b0072510b00625b029e0b00525b0082508205802
1b0359b00525b003254348b00425b0072508b00625b00325b0016043481b
2159212121212121212d2c02b00425202046b004252342b0052508b00325
4548212121212d2c02b0032520b0042508b0022543482121212d2c452320
451820b00050205823652359236820b040505821b04059235865598a6044
2d2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b21
21592d2c4b53234b515a58381b2121592d2cb000214b5458381b2121592d
2cb002435458b0462b1b21212121592d2cb002435458b0472b1b21212159
2d2cb002435458b0482b1b21212121592d2cb002435458b0492b1b212121
592d2c208a08234b538a4b515a5823381b2121592d2c0020b200400325b0
062649618b3812342d2c014623466023466123201020468a61b8ff80628a
b140408a704560683a2d2c208a2349648a2353583c1b21592d2c4b52587d
1b7a592d2cb012004b014b54422d2cb1020042b123018851b1400188535a
58b910000020885458b202010243604259b12401885158b9200000408854
58b2020202436042b12401885458b2022002436042004b014b5258b20208
02436042591bb940000080885458b202040243604259b94000008063b801
00885458b202080243604259b94000010063b80200885458b20210024360
4259b94000020063b80400885458b202400243604259595959592d2c4518
68234b51582320452064b04050587c59688a6059442d2cb00016b00225b0
022501b001233e00b002233eb10102060cb00a236542b00b234201b00123
3f00b002233fb10102060cb006236542b0072342b00116012d2c20b82000
628a6023622d2cb0072558001b0159b0042510b00325b0022520b8ffff54
5821cd1bed5921b006255cb006255a58b0092b5920b005254ab0042547b0
04254760b0062547b0806361b00225b0005558b00325b00725496359b008
2558001b0159b00425b0062549b009255cb009255a58b0092b59b0072546
b0806361b0032520b0005558631b2159612320b0005558b080631b21b080
59b0592bb006255c586959b00425202010b00048233ab0062658001b0159
b0052658b003252f598a12233221212d2cb00625b00a2587b00625b00925
4ab0005358b00625b00a251bb00925b0072559b00225b00225070cb00525
6323b00625636020b94000040063535821b00426b00426b00a1bb9400004
0063655158b0042665b0042665b00a1bb00426b00426b000b00325b00325
0b0d0ab0092eb00725b007250b0d0ab00b2eb00525b0052507595920b000
5558b00525b0052587b00725b007250bb0092510b00b25b0092620b8ffff
545821cd1bed59b00525b0052507b00825b00b254923b00625b0062587b0
0a2510b00b25c15920b00051b800522378b00161b00225b00725b0072507
b00a25b00d254961b08062b00525b005250bb00a252338b00625b0062587
b00825b008250bb00a2510b00b25c4b00625b0062507b00925b00c2549b0
032554b8ffa723792121212121212121212121212d2c23b0005458b94000
00001bb900004000598ab0005458b9400000001bb90000400059b05b2b2d
2c08b0005458b9400000001bb900004000590db05b2b2d2c8a8a080d8ab0
005458b9400000001bb90000400059b05b2b2d2cb00426b00426080db004
26b00426080db05b2b2d2c204569442d0000000100000005b8529e58e2ca
5f0f3cf50019080000000000bbeb7ccc00000000cbdab383fbfafd8b09ec
07b6000000090002000000000000000100000600fe0001c40aa0fbfafaa0
09ec0001000000000000000000000000000000420000000000000000048a
006104400099046c00280412007603a3009903a30099044c009905360055
0441006005a90094039200180466009903ab004604fc00ac03b400000430
000003a5005902c8004e02320094039700220302004d0438005a0438005a
044100590319000304550090036900120592006404a1002304a10023045a
00ac045a00ac035300ac0484003a03e800ac03e800ac03bf003b03bf003b
04fc00ac04fc00ac054c0063020400ac020400ac042800ac042800ac0495
002406d700ac06d700ac052a00ac052a00ac03ef0053054c0063054c0063
042200ac042200ac03e6000f03e6000f03e6001e03e6001e061300000427
003004270030060000900550005e000000000000009c013401b6021e0226
029902f8037b03d8046f04d9056005d30615069f073807dd0857089c08fb
099c09a40a320a930af60b660c150caf0cb70d450d4d0e030e3b0e8f0e97
0f130f1b0f670f6f100f1082108a10d510dd115c11b011b81265126d1308
136d137513ed13f5146e147614dd14e5155515df15e7164f16cb17580000
0001000000420120001000c3000700020010002f00650000119024100004
00010000000a007e00010000000000010007000000010000000000020007
000700010000000000040007000e00010000000000060007001500010000
000000030017001c0003000104090001000e00330003000104090002000e
00410003000104090004000e004f0003000104090006000e005d00030001
04090003002e006b43616c69627269526567756c617243616c6962726943
616c69627269706466466163746f72792050726f3a2043616c6962726900
430061006c00690062007200690052006500670075006c00610072004300
61006c006900620072006900430061006c00690062007200690070006400
660046006100630074006f00720079002000500072006f003a0020004300
61006c006900620072006900b2090320b80284b40918014a20b80283b409
18014a20b80282b40918014a20b80281b40918014a20b80280b40918014a
20b8027fb40918014a20b8027eb40918014a20b8027db40918014a20b802
7cb40918014a20b8027bb40918014a20b8027ab40918014a20b80279b409
18014a20b80278b40918014a20b80277b40918014a20b80276b40918014a
20b80275b40918014a20b80274b40918014a20b80273b40918014a20b802
71b40918014a20b80270b40918014a20b8026fb40918014a20b8026eb409
18014a20b8026db40918014a20b8026cb40918014a20b8026bb40918014a
20b8026ab40918014a20b80269b40918014a20b80268b40918014a20b802
67b40918014a20b80266b40918014a20b80265b40918014a20b80264b409
18014a20b80263b40918014a20b80262b40918014a20b80261b40918014a
20b80260b40918014a20b8025fb40918014a20b8025eb40918014a20b802
5db40918014a20b8025cb40918014a20b8025bb40918014a20b8025ab409
18014a20b80259b40918014a20b80258b40918014a20b80257b40918014a
20b80256b40918014a20b80255b40918014a20b80254b40918014a20b802
53b40918014a20b80252b40918014a20b80251b40918014a20b80250b409
18014a20b8024fb40918014a20b8024eb40918014a20b8024db40918014a
20b8024cb40918014a20b8024bb40918014a20b8024ab40918014a20b802
49b40918014a20b80248b40918014a20b80247b40918014a20b80246b409
18014a20b80245b40918014a20b80244b40918014a20b80243b40918014a
20b80242b40918014a20b80241b40918014a20b80240b40918014a20b802
3fb40918014a20b8023eb40918014a20b8023db40918014a20b8023cb409
18014a20b8023bb40918014a20b8023ab40918014a20b80239b40918014a
20b80238b40918014a20b80237b40918014a20b80236b40918014a20b802
35b40918014a20b80234b40918014a20b80233b40918014a20b80232b409
18014a20b80231b40918014a20b80230b40918014a20b8022fb40918014a
20b8022eb40918014a20b8022db40918014a20b8022cb40918014a20b802
2bb40918014a20b8022ab40918014a20b80229b40918014a20b80228b409
18014a20b80227b40918014a20b80226b40918014a20b80225b40918014a
20b80224b40918014a20b80223b40918014a20b80222b40918014a20b802
21b40918014a20b80220b40918014a20b8021fb40918014a20b8021eb409
18014a20b8021db40918014a20b8021cb40918014a20b8021bb40918014a
20b8021ab40918014a20b80219b40918014a20b80218b40918014a20b802
17b40918014a20b80216b40918014a20b80215b40918014a20b80214b409
18014a20b80213b40918014a20b80212b40918014a20b80211b40918014a
20b80210b40918014a20b8020fb40918014a20b8020eb40918014a20b802
0db40918014a20b8020cb40918014a20b8020bb40918014a20b8020ab409
18014a20b80209b40918014a20b80208b40918014a20b80207b40918014a
20b80206b40918014a20b80205b40918014a20b80204b40918014a20b802
03b40918014a20b80202b40918014a20b80201b40918014a20b80200b409
18014a20b801ffb40918014a20b801feb40918014a20b801fdb40918014a
20b801fcb40918014a20b801fbb40918014a20b801fab40918014a20b801
f9b40918014a20b801f8b40918014a20b801f7b40918014a20b801f6b409
18014a20b801f5b40918014a20b801f4b40918014a20b801f3b40918014a
20b801f2b40918014a20b801f1b40918014a20b801f0b40918014a20b801
efb40918014a20b801eeb40918014a20b801edb40918014a20b801ecb409
18014a20b801ebb40918014a20b801eab40918014a20b801e9b40918014a
20b801e8b40918014a20b801e7b40918014a20b801e6b40918014a20b801
e5b40918014a20b801e4b40918014a20b801e3b40918014a20b801e2b409
18014a20b801e1b40918014a20b801e0b40918014a20b801dfb40918014a
20b801deb40918014a20b801ddb40918014a20b801dcb40918014a20b801
dbb40918014a20b801dab40918014a20b801d9b40918014a20b801d8b409
18014a20b801d7b40918014a20b801d6b40918014a20b801d5b40918014a
20b801d4b40918014a20b801d3b40918014a20b801d2b40918014a20b801
d1b40918014a20b801d0b40918014a20b801cfb40918014a20b801ceb409
18014a20b801cdb40918014a20b801ccb40918014a20b801cbb40918014a
20b801cab40918014a20b801c9b40918014a20b801c8b40918014a20b801
c7b40918014a20b801c6b40918014a20b801c5b40918014a20b801c4b409
18014a20b801c3b40918014a20b801c2b40918014a20b801c1b40918014a
20b801c0b40918014a20b801bfb40918014a20b801beb40918014a20b801
bdb40918014a20b801bcb40918014a20b801bbb40918014a20b801bab409
18014a20b801b9b40918014a20b801b8b40918014a20b801b7b40918014a
20b801b6b40918014a20b801b5b40918014a20b801b4b40918014a20b801
b3b40918014a20b801b2b40918014a20b801b1b40918014a20b801b0b409
18014a20b801afb40918014a20b801aeb40918014a20b801adb40918014a
20b801acb40918014a20b801abb40918014a20b801aab40918014a20b801
a9b40918014a20b801a8b40918014a20b801a7b40918014a20b801a6b409
18014a20b801a5b40918014a20b801a4b40918014a20b801a3b40918014a
20b801a2b40918014a20b801a1b40918014a20b801a0b40918014a20b801
9fb40918014a20b8019eb40918014a20b8019db40918014a20b8019cb409
18014a20b8019bb40918014a20b8019ab40918014a20b80199b40918014a
20b80198b40918014a20b80197b40918014a20b80196b40918014a20b801
95b40918014a20b80194b40918014a20b80193b40918014a20b80192b409
18014a20b80191b40918014a20b80190b40918014a20b8018fb40918014a
20b8018eb40918014a20b8018db40918014a20b8018cb40918014a20b801
8bb40918014a20b8018ab40918014a20b80189b40918014a20b80188b409
18014a20b80187b40918014a20b80186b40918014a20b80185b40918014a
20b80184b40918014a20b80183b40918014a20b80182b40918014a20b801
81b40918014a20b80180b40918014a20b8017fb40918014a20b8017eb409
18014a20b8017db40918014a20b8017cb40918014a20b8017bb40918014a
20b8017ab40918014a20b80179b40918014a20b80178b40918014a20b801
77b40918014a20b80176b40918014a20b80175b40918014a20b80174b409
18014a20b80173b40918014a20b80172b40918014a20b80171b40918014a
20b80170b40918014a20b8016fb40918014a20b8016eb40918014a20b801
6db40918014a20b8016cb40918014a20b8016bb40918014a20b8016ab409
18014a20b80169b40918014a20b80168b40918014a20b80167b40918014a
20b80166b40918014a20b80165b40918014a20b80164b40918014a20b801
63b40918014a20b80162b40918014a20b80161b40918014a20b80160b409
18014a20b8015fb40918014a20b8015eb40918014a20b8015db40918014a
20b8015cb40918014a20b8015bb40918014a20b8015ab40918014a20b801
59b40918014a20b80158b40918014a20b80157b40918014a20b80156b409
18014a20b80155b40918014a20b80154b40918014a20b80153b40918014a
20b80152b40918014a20b80150b40918014a20b8014fb40918014a20b801
4eb40918014a20b8014cb40918014a20b8014bb40918014a20b8014ab409
18014a20b80149b40918014a20b80148b40918014a20b80147b40918014a
20b80146b40918014a20b80145b40918014a20b80144b40918014a20b801
43b30918014ab80284b21e3e1fb80283b21e151fb80282b21e3e1fb80281
b21e3a1fb80280b21e3e1fb8027fb21e3e1fb8027eb21e0c1fb8027db21e
3e1fb8027cb21e3e1fb8027bb21e3e1fb8027ab21e3e1fb80279b21d411f
b80278b21d431fb80277b21d431fb80276b21d431fb80275b21d411fb802
74b21d431fb80273b21d431fb80272b21d411fb80271b21d421fb80270b2
1d421fb8026fb21d421fb8026eb21d431fb8026db21d431fb8026cb21d43
1fb8026bb21c451fb8026ab21c451fb80269b21c451fb80268b21c451fb8
0267b21c451fb80266b21c441fb80265b21c451fb80264b21c451fb80263
b21c451fb80262b21c451fb80261b21c451fb80260b21c451fb8025fb21c
451fb8025eb21c441fb8025db21c451fb8025cb21c451fb8025bb21c451f
b8025ab21c451fb80259b21c451fb80258b21c451fb80257b21c451fb802
56b21c451fb80255b21c451fb80254b21c451fb80253b21c451fb80252b2
1c451fb80251b21c451fb80250b21c451fb8024fb21c451fb8024eb21c45
1fb8024db21c451fb8024cb21c451fb8024bb21c451fb8024ab21b491fb8
0249b21b491fb80248b21b4a1fb80247b21b4a1fb80246b21b4b1fb80245
b21b4c1fb80244b21b4c1fb80243b21b4c1fb80242b21b4b1fb80241b21b
491fb80240b21b491fb8023fb21b4a1fb8023eb21b4a1fb8023db21b4a1f
b8023cb21b4b1fb8023bb21b4b1fb8023ab21b4c1fb80239b21b4c1fb802
38b21b4c1fb80237b21b4c1fb80236b21b4c1fb80235b21b491fb80234b2
1b491fb80233b21b4a1fb80232b21b4a1fb80231b21b4a1fb80230b21b4b
1fb8022fb21b4b1fb8022eb21b4c1fb8022db21b4c1fb8022cb21b4c1fb8
022bb21b4c1fb8022ab21b4c1fb80229b21b4c1fb80228b21b4c1fb80227
b21b491fb80226b21b491fb80225b21b4a1fb80224b21b4a1fb80223b21b
4a1fb80222b21b4b1fb80221b21b4b1fb80220b21b4c1fb8021fb21b4c1f
b8021eb21b4c1fb8021db21b4c1fb8021cb21b4c1fb8021bb21b4c1fb802
1ab21a4e1fb80219b21a4e1fb80218b21a4f1fb80217b21a4f1fb80216b2
1a4e1fb80215b21a4e1fb80214b21a4f1fb80213b21a4f1fb80212b21a4f
1fb80211b21a4e1fb80210b21a4e1fb8020fb21a4f1fb8020eb21a4f1fb8
020db21a4f1fb8020cb21a4e1fb8020bb21a4e1fb8020ab21a4e1fb80209
b21a4f1fb80208b21a4f1fb80207b21a4f1fb80206b219501fb80205b219
511fb80204b219511fb80203b219501fb80202b219511fb80201b219511f
b80200b219511fb801ffb219511fb801feb219501fb801fdb219511fb801
fcb219511fb801fbb219511fb801fab219501fb801f9b219511fb801f8b2
19511fb801f7b219511fb801f6b219511fb801f5b218541fb801f4b21853
1fb801f3b218541fb801f2b218541fb801f1b218541fb801f0b218531fb8
01efb218541fb801eeb218541fb801edb218541fb801ecb218531fb801eb
b218531fb801eab218541fb801e9b218541fb801e8b218541fb801e7b218
541fb801e6b218531fb801e5b218541fb801e4b218531fb801e3b218541f
b801e2b218541fb801e1b218541fb801e0b218531fb801dfb218531fb801
deb218541fb801ddb218541fb801dcb218541fb801dbb218541fb801dab2
18531fb801d9b218541fb801d8b218541fb801d7b217571fb801d6b21756
1fb801d5b217561fb801d4b217571fb801d3b217571fb801d2b217571fb8
01d1b217571fb801d0b217561fb801cfb217561fb801ceb217571fb801cd
b217571fb801ccb217571fb801cbb217571fb801cab217561fb801c9b217
561fb801c8b217571fb801c7b217571fb801c6b217571fb801c5b217571f
b801c4b217571fb801c3b217561fb801c2b217571fb801c1b217571fb801
c0b217571fb801bfb217561fb801beb217561fb801bdb217571fb801bcb2
17571fb801bbb217571fb801bab217571fb801b9b217571fb801b8b21756
1fb801b7b217571fb801b6b217571fb801b5b217571fb801b4b217571fb8
01b3b2163f1fb801b2b2165b1fb801b1b2165b1fb801b0b2165b1fb801af
b2165b1fb801aeb2165b1fb801adb2165b1fb801acb2165b1fb801abb216
5b1fb801aab2163e1fb801a9b2163f1fb801a8b2163f1fb801a7b2165b1f
b801a6b2165b1fb801a5b2165b1fb801a4b2165b1fb801a3b2165b1fb801
a2b2165b1fb801a1b2165b1fb801a0b2165b1fb8019fb2163e1fb8019eb2
163f1fb8019db2163f1fb8019cb2165b1fb8019bb2165b1fb8019ab2165b
1fb80199b2165b1fb80198b2163e1fb80197b2165b1fb80196b2165b1fb8
0195b2165b1fb80194b2163e1fb80193b2163f1fb80192b2163f1fb80191
b2165b1fb80190b2165b1fb8018fb2165b1fb8018eb2165b1fb8018db216
5b1fb8018cb2163f1fb8018bb2165b1fb8018ab2165b1fb80189b2165b1f
b80188b2165b1fb80187b2165b1fb80186b215611fb80185b215621fb801
84b215621fb80183b215661fb80182b215661fb80181b215551fb80180b2
15451fb8017fb215361fb8017eb215361fb8017db215611fb8017cb21562
1fb8017bb215621fb8017ab215641fb80179b215661fb80178b215661fb8
0177b215661fb80176b215661fb80175b215661fb80174b215661fb80173
b215451fb80172b215621fb80171b215621fb80170b215631fb8016fb215
641fb8016eb215661fb8016db215661fb8016cb215661fb8016bb215661f
b8016ab215661fb80169b215621fb80168b215621fb80167b215611fb801
66b215641fb80165b215641fb80164b215661fb80163b215661fb80162b2
15661fb80161b215661fb80160b215661fb8015fb215661fb8015eb21555
1fb8015db215451fb8015cb215451fb8015bb215361fb8015ab215611fb8
0159b215621fb80158b215621fb80157b215631fb80156b215641fb80155
b215661fb80154b215661fb80153b215661fb80152b215661fb80151b214
401fb80150b214551fb8014fb214561fb8014eb214831fb8014db2142d1f
b8014cb214401fb8014bb214401fb8014ab214411fb80149b214401fb801
48b214401fb80147b214411fb80146b2147e1fb80145b214871fb80144b2
147f1fb80143b214801fb80142b212461fb80141b212461fb80140b21246
1fb8013fb212461fb8013eb212441fb8013db212461fb8013cb211591fb8
013bb211591fb8013ab2115b1fb80139b2115b1fb80138b211471fb80137
b211581fb80136b2115a1fb80135b2115b1fb80134b2115b1fb80133b211
2c1fb80132b211471fb80131b211551fb80130b211571fb8012fb211571f
b8012eb211581fb8012db211591fb8012cb211591fb8012bb2115a1fb801
2ab2115a1fb80129b2115b1fb80128b2115b1fb80127b2115b1fb80126b2
115b1fb80125b211561fb80124b211561fb80123b211571fb80122b21158
1fb80121b211591fb80120b2115a1fb8011fb2115a1fb8011eb2115b1fb8
011db2115b1fb8011cb2115b1fb8011bb2115b1fb8011ab2115b1fb80119
b2105d1fb80118b2105e1fb80117b2105f1fb80116b2105f1fb80115b210
5f1fb80114b2105f1fb80113b2105f1fb80112b2105d1fb80111b2105e1f
b80110b2105f1fb8010fb2105f1fb8010eb2105f1fb8010db2105f1fb801
0cb2105d1fb8010bb2105e1fb8010ab2105f1fb80109b2105f1fb80108b2
105f1fb80107b2105f1fb80106b2105d1fb80105b2105e1fb80104b2105f
1fb80103b2105f1fb80102b2105f1fb80101b2105f1fb8010040ff0f621f
ff0f621ffe0f631ffd0f641ffc0f621ffb0f621ffa0f621ff90f631ff80f
641ff70f641ff60f641ff50f641ff40f621ff30f621ff20f631ff10f641f
f00f641fef0f641fee0f641fed0f621fec0f621feb0f631fea0f641fe90f
641fe80f641fe70f641fe60e671fe50e681fe40e681fe30e681fe20e681f
e10e671fe00e681fdf0e681fde0e681fdd0e671fdc0e681fdb0e681fda0e
681fd90e681fd80d6b1fd70d311fd60d6b1fd50d6c1fd40d261fd30d261f
d20d6c1fd10d2b1fd00d2b1fcf0d2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d
6b1fca0d6c1fc90d6d1fc80d6a1fc70d691fc60d681fc50d671fc40d261f
c30d311fc20d311fc10d311f40ffc00d311fbf0d311fbe0d311fbd0c711f
bc0c721fbb0c731fba0c741fb90c741fb80c741fb70c711fb60c711fb50c
721fb40c731fb30c741fb20c741fb10c741fb00c741faf0b791fae0b7a1f
ad0b7c1fac0b7d1fab0b7e1faa0b7e1fa90b7e1fa80b7e1fa70b7e1fa60b
7e1fa50b2d1fa40b7e1fa30b7e1fa20b791fa10b7e1fa00b6b1f9f0b791f
9e0b7e1f9d0b7e1f9c0b791f9b0b7a1f9a0b7c1f990b7d1f980b7e1f970b
7e1f960b7e1f950b7e1f940b7e1f930b7e1f920b6b1f910b2d1f900a4e1f
8f0a4f1f8e0a671f8d0aa51f8c0aa71f8503251f8403381f8301381f8255
805581ab80557f557d557eab7d550b7d010b7d1b7d4b7d7b7dab7ddb7d40
12060a7c557a557bab7a557955775578ab7755ba028600660285403c5576
ab755504751475747503f47501ab75014475013075010200751075207503
0c7455725573ab7255007250728072b072043bb072e072020072010ab8ff
c0b3721b1e46b8ffc0407c720d104671556f5570ab6f556e666d556a0325
1f6938675568ab67556638645565ab645563386255613860555f385d555e
ab5d555c385a555bab5a55593858555703251f5638545555ab5455533851
5552ab51554f384e554e03251f4d384b554cab4b554a38485549ab485547
3846554503381f001c101c201c0310b8ffc0404e1c1b1e46001b0142301b
401be01bf01b04001bb01bc01b03120f1a1f1a02290f1901434f19016f19
7f198f19030f18cf18024018292c460f17cf17df17ef1704134017292e46
0016101620160315b8ffc0b3164d5446b8ffc0b3163f4446b8ffc0b31631
3546b8ffc0404d162326460f15010f151f1502451f15010011e011f01103
15bf10cf10020f0f010f0fff0f02400f3135460f0e1f0e020f0e1f0eff0e
03400e3137460f0d1f0d020f0d1f0dff0d0316400d313746b8ffc040270c
5054460f0b1f0b02553f0b4f0b02400b3f4346400b2d3046000301200101
0001100120010308b8ffc0b301151f46b80100b316010501b80190b15453
2b2b4bb80800524bb008505bb00188b02553b00188b040515ab00688b000
555a5b58b101018e59b101024354b0144b515a58b101018e59858d8d0042
1d4bb01d5358b0a01d594bb0805358b0401d594bb0ff5358b0001db11600
42592b5e7375732b2b745e732b2b5e73742b73742b7374745e7301755e73
742b2b2b2b5e732b5e732b7374755e735e735e73755e732b5e73002b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e7375
5e732b2b5e735f73737373742b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2bb10002435458
41ff0284006402830064028200640281006402800064027f0064027e0064
027d0064027c0064027b0064027a00640279006402780064027700640276
00640275006402740064027300640271006402700064026f0064026e0064
026d0064026c0064026b0064026a00640269006402680064026700640266
0064026500640264006402630064026200640261006402600064025f0064
025e0064025d0064025c0064025b0064025a006402590064025800640257
006402560064025500640254006402530064025200640251006402500064
024f0064024e0064024d0064024c0064024b0064024a0064024900640248
006402470064024600640245006402440064024300640242006402410064
02400064023f0064023e0064023d0064023c0064023b0064023a00640239
006402380064023700640236006402350064023400640233006402320064
0231006402300064022f0064022e0064022d0064022c0064022b0064022a
006402290064022800640227006402260064022500640224006402230064
022200640221006402200064021f0064021e0064021d0064021c0064021b
0064021a0064021900640218006402170064021600640215006402140064
02130064021200640211006402100064020f0064020e0064020d0064020c
0064020b0064020a00640209006402080064020700640206006402050064
020441ff00640203006402020064020100640200006401ff006401fe0064
01fd006401fc006401fb006401fa006401f9006401f8006401f7006401f6
006401f5006401f4006401f3006401f2006401f1006401f0006401ef0064
01ee006401ed006401ec006401eb006401ea006401e9006401e8006401e7
006401e6006401e5006401e4006401e3006401e2006401e1006401e00064
01df006401de006401dd006401dc006401db006401da006401d9006401d8
006401d7006401d6006401d5006401d4006401d3006401d2006401d10064
01d0006401cf006401ce006401cd006401cc006401cb006401ca006401c9
006401c8006401c7006401c6006401c5006401c4006401c3006401c20064
01c1006401c0006401bf006401be006401bd006401bc006401bb006401ba
006401b9006401b8006401b7006401b6006401b5006401b4006401b30064
01b2006401b1006401b0006401af006401ae006401ad006401ac006401ab
006401aa006401a9006401a8006401a7006401a6006401a5006401a40064
01a3006401a2006401a1006401a00064019f0064019e0064019d0064019c
0064019b0064019a00640199006401980064019700640196006401950064
0194006401930064019200640191006401900064018f0064018e0064018d
0064018c0064018b0064018a006401890064018800640187006401860064
0185006441800184006401830064018200640181006401800064017f0064
017e0064017d0064017c0064017b0064017a006401790064017800640177
006401760064017500640174006401730064017200640171006401700064
016f0064016e0064016d0064016c0064016b0064016a0064016900640168
006401670064016600640165006401640064016300640162006401610064
01600064015f0064015e0064015d0064015c0064015b0064015a00640159
006401580064015700640156006401550064015400640153006401520064
01500064014f0064014e0064014c0064014b0064014a0064014900640148
006401470064014600640145006401440064014300642b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b185f5e00>
[11953 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 1782 10 <00030060ffed03e105780013001e00290036b11e1fb8020bb20a1429b802
1cb7000a1edb1f1f0519b80101b20f4724b80102b1054d003fed3fed1239
2fed012fddf1c510f1c53130011402060623222626023534123636333216
1612072e0323220e0207151e0333323e023703e14076a9696aa4713a3f75
a96a69a5713bae042141654747654323030220416749496743200202bdc1
feefae504ca7010abfc10110ae504ca8fef67774b67e43417db776807bc3
86474686c27d>QEHBAA+Calibri AddT42Char 

1 0 0 <> QEHBAA+Calibri AddT42Char 
QEHBAA+Calibri /CharStrings get begin
/;########## 10 def
end
QEHBAA+Calibri /Encoding get
dup 40 /;########## put
pop
end
%ADOEndSubsetFont
reset_gvm
/PRHMEM+Calibri /QEHBAA+Calibri findfont ct_VMDictPut
/PRHMEM+Calibri*1 
[40{/.notdef}rp /;########## 215{/.notdef}rp]
PRHMEM+Calibri nf
PRHMEM+Calibri*1 [28.08 0 0 -28.08 0 0 ]msf
201.6 98.4931 mo
(\()sh
PRHMEL+Calibri*1 [18.72 0 0 -18.72 0 0 ]msf
216.48 105.213 mo
(u)sh
247.2 91.2931 mo
270.96 91.5331 li
270.96 93.4531 li
247.2 93.2131 li
247.2 91.2931 li
270 87.4531 mo
276 92.4931 li
269.76 97.5331 li
270 87.4531 li
f
247.2 91.2931 mo
270.96 91.5331 li
270.96 93.4531 li
247.2 93.2131 li
247.2 91.2931 li
270 87.4531 mo
276 92.4931 li
269.76 97.5331 li
270 87.4531 li
f
true set_gvm
%ADOBeginSubsetFont: Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Calibri gcheck setglobal} if
2 11100 104 <000100aaffed04790514002b0099401d602d01201810014d20100f014d20
100d014d200a0c014d20180b014d20b802104011004015014d004013014d
004011014d0016b8ffe8b310014d16b8fff0b30f014d16b8fff0b30d014d
16b8fff6b30c014d16b8ffe8b30b014d16ba0210000affc0b315014d0ab8
ffc0400913014d0a265210521bb80129b10556003fed3f3f012f2b2be12b
2b2b2b2bd42b2b2be12b2b2b2b2b31305d01140e0223222e023511343e02
33321e021511141e0233323e023511343e0233321e021504794580b8756b
b07e440814201a182213082c5375494b75512b081421191821130901de76
b980423e79b6770323080c070505070c08fcf25a86592d2c588257031708
0c070505070c0800>Calibri AddT42Char 
Calibri /CharStrings get begin
/U 104 def
end
Calibri /Encoding get
dup 85 /U put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/PRHMEL+Calibri*1 
[68{/.notdef}rp /D 9{/.notdef}rp /N 6{/.notdef}rp /U 14{/.notdef}rp /d 
9{/.notdef}rp /n 6{/.notdef}rp /u /.notdef /w /.notdef /y 
/z 133{/.notdef}rp]
PRHMEL+Calibri nf
PRHMEL+Calibri*1 [16.08 0 0 -16.08 0 0 ]msf
547.92 412.653 mo
(U)sh
547.92 412.653 mo
(U)sh
65.28 92.4931 mo
65.28 72.5731 81.36 56.4931 101.28 56.4931 cv
121.2 56.4931 137.28 72.5731 137.28 92.4931 cv
137.28 112.413 121.2 128.493 101.28 128.493 cv
81.36 128.493 65.28 112.413 65.28 92.4931 cv
1 1 1 rgb
ef
64.32 92.4931 mo
64.32 88.6531 li
65.04 85.0531 li
66 81.4531 li
67.2 78.0931 li
68.64 74.9731 li
70.56 71.8531 li
72.72 68.9731 li
75.12 66.3331 li
77.76 63.9331 li
80.4 61.7731 li
83.52 60.0931 li
86.88 58.4131 li
90.24 57.2131 li
93.84 56.2531 li
97.44 55.7731 li
99.36 55.5331 li
103.2 55.5331 li
104.88 55.7731 li
108.72 56.2531 li
112.08 57.2131 li
115.68 58.4131 li
118.8 59.8531 li
121.92 61.7731 li
124.8 63.9331 li
127.44 66.3331 li
129.84 68.9731 li
132 71.8531 li
133.68 74.7331 li
135.36 78.0931 li
136.56 81.4531 li
137.52 85.0531 li
138 88.6531 li
138.24 90.5731 li
138.24 94.4131 li
138 96.3331 li
137.52 99.9331 li
136.56 103.533 li
135.36 106.893 li
133.68 110.013 li
132 113.133 li
129.84 116.013 li
127.44 118.653 li
124.8 121.053 li
121.92 123.213 li
118.8 124.893 li
115.68 126.573 li
112.32 127.773 li
108.72 128.733 li
105.12 129.213 li
103.2 129.453 li
99.36 129.453 li
97.44 129.213 li
93.84 128.733 li
90.24 127.773 li
86.88 126.573 li
83.76 125.133 li
80.64 123.213 li
77.76 121.053 li
75.12 118.653 li
72.72 116.013 li
70.56 113.133 li
68.64 110.253 li
67.2 106.893 li
66 103.533 li
65.04 99.9331 li
64.32 96.3331 li
64.32 92.4931 li
66.24 94.1731 mo
66.48 96.0931 li
66.96 99.4531 li
67.68 102.813 li
68.88 106.173 li
70.56 109.053 li
72.24 111.933 li
74.16 114.813 li
76.56 117.213 li
78.96 119.373 li
81.6 121.533 li
84.48 123.213 li
87.6 124.653 li
90.72 125.853 li
94.08 126.813 li
97.68 127.293 li
99.36 127.533 li
102.96 127.533 li
104.64 127.293 li
108.24 126.813 li
111.6 125.853 li
114.72 124.653 li
117.84 123.213 li
120.72 121.533 li
123.36 119.613 li
126 117.213 li
128.16 114.813 li
130.32 112.173 li
132 109.293 li
133.44 106.173 li
134.64 103.053 li
135.6 99.6931 li
136.08 96.0931 li
136.08 94.4131 li
136.32 92.4931 li
136.08 90.8131 li
136.08 88.8931 li
135.6 85.5331 li
134.64 82.1731 li
133.44 78.8131 li
132 75.9331 li
130.32 73.0531 li
128.16 70.1731 li
126 67.7731 li
123.6 65.6131 li
120.96 63.4531 li
118.08 61.7731 li
114.96 60.3331 li
111.6 59.1331 li
108.24 58.1731 li
104.88 57.6931 li
102.96 57.4531 li
99.36 57.4531 li
97.68 57.6931 li
94.32 58.1731 li
90.96 59.1331 li
87.6 60.3331 li
84.48 61.7731 li
81.6 63.4531 li
78.96 65.3731 li
76.56 67.7731 li
74.16 70.1731 li
72.24 72.8131 li
70.56 75.6931 li
69.12 78.8131 li
67.92 81.9331 li
66.96 85.2931 li
66.48 88.8931 li
66.24 90.5731 li
66.24 94.1731 li
0 0 0 rgb
f
true set_gvm
%ADOBeginSubsetFont: QEHBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal QEHBAA+Calibri gcheck setglobal} if
1 0 2 <00020061ffed046103ca004400590048b20c2036bb01f90045002501bcb5
45162f2f004fb8020a400f162a49200c114aed1b4a54ed114d3bb80102b1
074d003fed3fed3fed1239393f012fe1c4392f1239e110e1393931302514
0e0423222e02270e0323222e0235343e0233321e02173e03373e0333321e
0215140e04071e0333323e0233321e0201342e0223220e0215141e023332
3e02350461070d182424142546372606133c4f6037648e592a3467966340
705638091113090504030a111911181f12080a121a1d221201121f261512
1e17110605060502fe7d2740532d3f59391a143455423b5b3d204d1f1e0c
0a0705122d4b3a2b48351d4a82b26674ba84472950774f486a4727040205
040203080c0710435b6b6f692c55673913070607050e1901805e8655273c
637e424783653d3661834d00>QEHBAA+Calibri AddT42Char 
QEHBAA+Calibri /CharStrings get begin
/;## 2 def
end
QEHBAA+Calibri /Encoding get
dup 32 /;## put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/PRHMEM+Calibri*1 
[32{/.notdef}rp /;## 7{/.notdef}rp /;########## 215{/.notdef}rp]
PRHMEM+Calibri nf
PRHMEM+Calibri*1 [31.92 0 0 -31.92 0 0 ]msf
91.92 103.293 mo
( )sh
137.28 93.4531 mo
170.16 93.2131 li
170.16 91.2931 li
137.28 91.5331 li
137.28 93.4531 li
169.2 97.2931 mo
175.2 92.2531 li
169.2 87.2131 li
169.2 97.2931 li
f
137.28 93.4531 mo
170.16 93.2131 li
170.16 91.2931 li
137.28 91.5331 li
137.28 93.4531 li
169.2 97.2931 mo
175.2 92.2531 li
169.2 87.2131 li
169.2 97.2931 li
f
590.64 213.693 mo
590.64 211.773 li
590.88 209.853 li
591.36 206.253 li
592.32 202.653 li
593.52 199.293 li
594.96 196.173 li
596.88 193.053 li
599.04 190.173 li
601.44 187.533 li
604.08 185.133 li
606.96 182.973 li
609.84 181.293 li
613.2 179.613 li
616.56 178.413 li
620.16 177.453 li
623.76 176.973 li
625.68 176.733 li
629.52 176.733 li
631.44 176.973 li
635.04 177.453 li
638.64 178.413 li
642 179.613 li
645.12 181.053 li
648.24 182.973 li
651.12 185.133 li
653.76 187.533 li
656.16 190.173 li
658.32 193.053 li
660.24 195.933 li
661.68 199.293 li
662.88 202.653 li
663.84 206.253 li
664.32 209.853 li
664.56 211.773 li
664.56 215.613 li
664.32 217.533 li
663.84 221.133 li
662.88 224.733 li
661.68 228.093 li
660.24 231.213 li
658.32 234.333 li
656.16 237.213 li
653.76 239.853 li
651.12 242.253 li
648.24 244.413 li
645.36 246.093 li
642 247.773 li
638.64 248.973 li
635.04 249.933 li
631.44 250.413 li
629.52 250.653 li
625.68 250.653 li
623.76 250.413 li
620.16 249.933 li
616.56 248.973 li
613.2 247.773 li
610.08 246.333 li
606.96 244.413 li
604.08 242.253 li
601.44 239.853 li
599.04 237.213 li
596.88 234.333 li
595.2 231.453 li
593.52 228.093 li
592.32 224.733 li
591.36 221.133 li
590.88 217.533 li
590.64 215.613 li
590.64 213.693 li
592.56 215.373 mo
592.8 217.293 li
593.28 220.653 li
594.24 224.013 li
595.44 227.373 li
596.88 230.253 li
598.56 233.133 li
600.48 236.013 li
602.88 238.413 li
605.28 240.573 li
607.92 242.733 li
610.8 244.413 li
613.92 245.853 li
617.04 247.053 li
620.4 248.013 li
624 248.493 li
625.68 248.733 li
629.52 248.733 li
631.2 248.493 li
634.56 248.013 li
637.92 247.053 li
641.28 245.853 li
644.16 244.413 li
647.04 242.733 li
649.92 240.813 li
652.32 238.413 li
654.48 236.013 li
656.64 233.373 li
658.32 230.493 li
659.76 227.373 li
660.96 224.253 li
661.92 220.893 li
662.4 217.293 li
662.64 215.613 li
662.64 212.013 li
662.4 210.093 li
661.92 206.733 li
660.96 203.373 li
660 200.013 li
658.32 197.133 li
656.64 194.253 li
654.72 191.373 li
652.32 188.973 li
649.92 186.813 li
647.28 184.653 li
644.4 182.973 li
641.28 181.533 li
638.16 180.333 li
634.8 179.373 li
631.2 178.893 li
629.52 178.653 li
625.92 178.653 li
624 178.893 li
620.64 179.373 li
617.28 180.333 li
613.92 181.533 li
611.04 182.973 li
608.16 184.653 li
605.28 186.573 li
602.88 188.973 li
600.72 191.373 li
598.56 194.013 li
596.88 196.893 li
595.44 200.013 li
594.24 203.133 li
593.28 206.493 li
592.8 210.093 li
592.56 211.773 li
592.56 215.373 li
f
true set_gvm
%ADOBeginSubsetFont: QEHBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal QEHBAA+Calibri gcheck setglobal} if
1 1520 9 <00030055fe9404e10571002b00360041004b40090941412b1536361f30be
0209001a001f01f8002b003c02094012042b4136eb1f2b4c254e3537eb09
15490f46003f3f33ed323f3f33ed32012fd4e110f1d4e111331133113311
333130042e0235343e023711343e0233321e0215111e0315140e02071114
0e0223222e0235113e0335342e022711030e0315141e021701c9bc7c3c3f
7dbb7c08132018182012087fbd7c3c3f7dbc7c0812201818201308f67c53
2a204d7e5fa3537c522a204c7f600c457cb0716bb0814e090188080c0804
04080c08fe7806467bb0716cb0814e09fec7080c080404080c0801398e30
567f564d7f603a06fd3202ce0731577f544d805e3a07>QEHBAA+Calibri AddT42Char 
QEHBAA+Calibri /CharStrings get begin
/;######### 9 def
end
QEHBAA+Calibri /Encoding get
dup 39 /;######### put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/PRHMEM+Calibri*1 
[32{/.notdef}rp /;## 6{/.notdef}rp /;######### /;########## 215{/.notdef}rp]
PRHMEM+Calibri nf
PRHMEM+Calibri*1 [28.08 0 0 -28.08 0 0 ]msf
617.04 219.933 mo
(')sh
true set_gvm
%ADOBeginSubsetFont: Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Calibri gcheck setglobal} if
4 14764 364 <00010099fffa037c057100340095400c3f3601293101314012014d31b8ff
d0b40f10014c31b8ffe0b30d014d31b8ffeab30c014d31b8ffe0b30b014d
31bb02270022000cfff0b40f10014c0cb8fff0b30d014d0cb8fff6b30c01
4d0cb8ffe8b30b014d0cb801f8401a162d2d00400f014d00400c014d0016
220b0528491c46114c054c003f3f3f3f123939012fc42b2b392f10f12b2b
2b2b32e02b2b2b2b2b31305d5d25140e0223222e02270111140e0223222e
023511343e0233321e021511013e0333321e021514060701011616037c08
13221a1b23180f06fe840812201918201307071320181920120801540812
192218192215090d0ffeba016e0d0b1a080c080403070d0901f2fe0d080b
080404080b080538080c080404080c08fcd201760a0d090303070b090c18
10febafe25111500>Calibri AddT42Char 
Calibri /CharStrings get begin
/k 364 def
end
Calibri /Encoding get
dup 107 /k put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/PRHMEL+Calibri*1 
[68{/.notdef}rp /D 9{/.notdef}rp /N 6{/.notdef}rp /U 14{/.notdef}rp /d 
6{/.notdef}rp /k 2{/.notdef}rp /n 6{/.notdef}rp /u /.notdef /w 
/.notdef /y /z 133{/.notdef}rp]
PRHMEL+Calibri nf
PRHMEL+Calibri*1 [18.72 0 0 -18.72 0 0 ]msf
635.28 226.653 mo
(k)sh
578.16 171.933 mo
578.16 171.693 578.16 171.453 578.4 171.453 cv
684.72 171.453 li
684.96 171.453 685.2 171.693 685.2 171.933 cv
685.2 258.573 li
685.2 258.813 684.96 259.053 684.72 259.053 cv
578.4 259.053 li
578.16 259.053 578.16 258.813 578.16 258.573 cv
578.88 258.573 mo
578.4 258.333 li
684.72 258.333 li
684.48 258.573 li
684.48 171.933 li
684.72 172.173 li
578.4 172.173 li
578.88 171.933 li
578.88 258.573 li
f
578.16 171.933 mo
578.16 171.693 578.16 171.453 578.4 171.453 cv
684.72 171.453 li
684.96 171.453 685.2 171.693 685.2 171.933 cv
685.2 258.573 li
685.2 258.813 684.96 259.053 684.72 259.053 cv
578.4 259.053 li
578.16 259.053 578.16 258.813 578.16 258.573 cv
578.88 258.573 mo
578.4 258.333 li
684.72 258.333 li
684.48 258.573 li
684.48 171.933 li
684.72 172.173 li
578.4 172.173 li
578.88 171.933 li
578.88 258.573 li
f
true set_gvm
%ADOBeginSubsetFont: Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Calibri gcheck setglobal} if
2 5758 60 <000100acfffa03f8051400330062401131100b014d30180b014d2f100b01
4d210ab8ffe8b310014d0ab8fff0b30f014d0ab8fff0b30d014d0ab8fff6
b30c014d0ab8ffe8b30b014d0ab80211400c152752210a101b5210550555
003f3f3f1239393f012fe12b2b2b2b2b3231302b2b2b25140e0223222626
270111140e0223222e023511343e0233321e021511013e0333321e021514
06070101161603f80714221b232c1607fe24081421191822140808142218
1921140801ca061017211a1a2013070d12fe5301ce11071c080d08050610
0a0287fd79070d070505070d0704da080c070505070c08fdc1023f090c07
0405080c070d1a17fdfffd9a1a13>Calibri AddT42Char 
Calibri /CharStrings get begin
/K 60 def
end
Calibri /Encoding get
dup 75 /K put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/PRHMEL+Calibri*1 
[68{/.notdef}rp /D 6{/.notdef}rp /K 2{/.notdef}rp /N 6{/.notdef}rp /U 
14{/.notdef}rp /d 6{/.notdef}rp /k 2{/.notdef}rp /n 6{/.notdef}rp /u 
/.notdef /w /.notdef /y /z 133{/.notdef}rp]
PRHMEL+Calibri nf
PRHMEL+Calibri*1 [16.08 0 0 -16.08 0 0 ]msf
669.6 249.213 mo
(K)sh
669.6 249.213 mo
(K)sh
707.04 212.013 mo
668.64 212.493 li
668.64 214.653 li
707.04 213.933 li
707.04 212.013 li
669.6 208.653 mo
663.6 213.693 li
669.6 218.493 li
669.6 208.653 li
f
707.04 212.013 mo
668.64 212.493 li
668.64 214.653 li
707.04 213.933 li
707.04 212.013 li
669.6 208.653 mo
663.6 213.693 li
669.6 218.493 li
669.6 208.653 li
f
707.04 212.973 mo
707.04 193.053 723.12 176.973 743.04 176.973 cv
762.96 176.973 779.04 193.053 779.04 212.973 cv
779.04 232.893 762.96 248.973 743.04 248.973 cv
723.12 248.973 707.04 232.893 707.04 212.973 cv
1 1 1 rgb
ef
706.08 212.973 mo
706.08 211.053 li
706.32 209.133 li
706.8 205.533 li
707.76 201.933 li
708.96 198.573 li
710.4 195.453 li
712.32 192.333 li
714.48 189.453 li
716.88 186.813 li
719.52 184.413 li
722.4 182.253 li
725.28 180.333 li
728.64 178.893 li
732 177.693 li
735.6 176.733 li
739.2 176.013 li
746.88 176.013 li
750.48 176.733 li
754.08 177.693 li
757.44 178.893 li
760.56 180.333 li
763.68 182.253 li
766.56 184.413 li
769.2 186.813 li
771.6 189.453 li
773.76 192.093 li
775.44 195.213 li
777.12 198.573 li
778.32 201.933 li
779.28 205.533 li
779.76 209.133 li
780 211.053 li
780 214.893 li
779.76 216.573 li
779.28 220.413 li
778.32 224.013 li
777.12 227.373 li
775.68 230.493 li
773.76 233.613 li
771.6 236.493 li
769.2 239.133 li
766.56 241.533 li
763.68 243.693 li
760.8 245.373 li
757.44 247.053 li
754.08 248.253 li
750.48 249.213 li
746.88 249.693 li
744.96 249.933 li
741.12 249.933 li
739.2 249.693 li
735.6 249.213 li
732 248.253 li
728.64 247.053 li
725.52 245.373 li
722.4 243.693 li
719.52 241.533 li
716.88 239.133 li
714.48 236.493 li
712.32 233.613 li
710.4 230.733 li
708.96 227.373 li
707.76 224.013 li
706.8 220.413 li
706.32 216.813 li
706.08 214.893 li
706.08 212.973 li
708 214.653 mo
708.24 216.573 li
708.72 219.933 li
709.68 223.293 li
710.88 226.413 li
712.32 229.533 li
714 232.413 li
715.92 235.053 li
718.32 237.693 li
720.72 239.853 li
723.36 242.013 li
726.24 243.693 li
729.36 245.133 li
732.48 246.333 li
735.84 247.293 li
739.44 247.773 li
741.12 247.773 li
743.04 248.013 li
744.72 248.013 li
746.64 247.773 li
750 247.293 li
753.36 246.333 li
756.72 245.133 li
759.6 243.693 li
762.48 242.013 li
765.36 240.093 li
767.76 237.693 li
769.92 235.293 li
772.08 232.653 li
773.76 229.773 li
775.2 226.653 li
776.4 223.293 li
777.36 219.933 li
777.84 216.573 li
778.08 214.653 li
778.08 211.053 li
777.84 209.373 li
777.36 206.013 li
776.4 202.653 li
775.2 199.293 li
773.76 196.413 li
772.08 193.293 li
770.16 190.653 li
767.76 188.253 li
765.36 185.853 li
762.72 183.933 li
759.84 182.253 li
756.72 180.813 li
753.6 179.613 li
750.24 178.653 li
746.64 178.173 li
744.96 177.933 li
741.12 177.933 li
739.44 178.173 li
736.08 178.653 li
732.72 179.613 li
729.36 180.573 li
726.48 182.253 li
723.6 183.933 li
720.72 185.853 li
718.32 188.253 li
716.16 190.653 li
714 193.293 li
712.32 196.173 li
710.88 199.293 li
709.68 202.413 li
708.72 205.773 li
708.24 209.373 li
708 211.053 li
708 214.653 li
0 0 0 rgb
f
true set_gvm
%ADOBeginSubsetFont: QEHBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal QEHBAA+Calibri gcheck setglobal} if
1 312 3 <00020099fe9403de0579002a00510052b43434000d49bb01f80019003f02
0ab4262323192bb8021f400b0019263aec4a0a31310544b80101b41e4713
4f4db80105b1054d003fed3f3fed12392f3939ed39012fd4e112392f39e1
10e13211392f313001140e0223222e022716161511140e0223222e023511
343e0233321e02151406071e0307342e022323222635343e023333323e02
35342e0223220e021511161633323e0203de3268a17027483f3617030308
12201918201307386690575c8757295f5d45694724b01d3e654856111105
080c0814425d3a1a142d4a343752351b377a3c44633e1e0198589b74430b
141d121e4320fef9080c080404080c080519669f6d3a375e78416a9f2409
40607b4f3b6348282024121a100829455a312b4e3a22284b6b43fd072e2b
27476300>QEHBAA+Calibri AddT42Char 
QEHBAA+Calibri /CharStrings get begin
/;### 3 def
end
QEHBAA+Calibri /Encoding get
dup 33 /;### put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/PRHMEM+Calibri*1 
[32{/.notdef}rp /;## /;### 5{/.notdef}rp /;######### /;########## 215{/.notdef}rp]
PRHMEM+Calibri nf
PRHMEM+Calibri*1 [31.92 0 0 -31.92 0 0 ]msf
734.16 223.533 mo
(!)sh
591.6 212.733 mo
496.56 212.733 li
496.56 214.893 li
591.6 214.653 li
591.6 212.733 li
497.76 208.893 mo
491.76 213.693 li
497.76 218.733 li
497.76 208.893 li
f
591.6 212.733 mo
496.56 212.733 li
496.56 214.893 li
591.6 214.653 li
591.6 212.733 li
497.76 208.893 mo
491.76 213.693 li
497.76 218.733 li
497.76 208.893 li
f
592.8 329.853 mo
592.8 327.933 li
593.04 326.013 li
593.52 322.413 li
594.48 318.813 li
595.68 315.453 li
597.36 312.093 li
599.28 309.213 li
601.2 306.333 li
603.6 303.693 li
606.24 301.293 li
609.12 299.133 li
612.24 297.213 li
615.36 295.773 li
618.72 294.573 li
622.32 293.613 li
625.92 292.893 li
633.6 292.893 li
637.2 293.613 li
640.8 294.333 li
644.16 295.773 li
647.52 297.213 li
650.4 299.133 li
653.28 301.293 li
655.92 303.693 li
658.32 306.333 li
660.48 308.973 li
662.4 312.093 li
663.84 315.453 li
665.28 318.813 li
666 322.173 li
666.72 326.013 li
666.72 327.933 li
666.96 329.853 li
666.72 331.773 li
666.72 333.453 li
666.24 337.293 li
665.28 340.653 li
664.08 344.253 li
662.4 347.373 li
660.48 350.493 li
658.56 353.373 li
656.16 356.013 li
653.52 358.413 li
650.64 360.333 li
647.52 362.253 li
644.4 363.933 li
641.04 365.133 li
637.44 366.093 li
633.6 366.573 li
631.92 366.813 li
628.08 366.813 li
626.16 366.573 li
622.56 366.093 li
618.96 365.133 li
615.6 363.933 li
612.24 362.253 li
609.12 360.573 li
606.48 358.413 li
603.84 356.013 li
601.44 353.373 li
599.28 350.493 li
597.36 347.373 li
595.92 344.253 li
594.48 340.893 li
593.52 337.293 li
593.04 333.693 li
592.8 331.773 li
592.8 329.853 li
594.96 331.533 mo
594.96 333.213 li
595.68 336.813 li
596.4 340.173 li
597.6 343.293 li
599.04 346.413 li
600.72 349.293 li
602.88 351.933 li
605.04 354.573 li
607.68 356.733 li
610.32 358.893 li
613.2 360.573 li
616.32 362.013 li
619.44 363.213 li
622.8 364.173 li
626.16 364.653 li
628.08 364.653 li
629.76 364.893 li
631.68 364.653 li
633.36 364.653 li
636.96 364.173 li
640.32 363.213 li
643.44 362.013 li
646.56 360.573 li
649.44 358.893 li
652.08 356.733 li
654.48 354.573 li
656.88 352.173 li
658.8 349.293 li
660.72 346.413 li
662.16 343.533 li
663.36 340.173 li
664.08 336.813 li
664.8 333.453 li
664.8 326.253 li
664.08 322.893 li
663.36 319.533 li
662.16 316.173 li
660.72 313.053 li
659.04 310.173 li
656.88 307.533 li
654.72 305.133 li
652.08 302.733 li
649.44 300.813 li
646.56 299.133 li
643.44 297.453 li
640.32 296.493 li
636.96 295.533 li
633.36 295.053 li
631.68 294.813 li
628.08 294.813 li
626.4 295.053 li
622.8 295.533 li
619.44 296.253 li
616.32 297.453 li
613.2 298.893 li
610.32 300.813 li
607.68 302.733 li
605.04 304.893 li
602.88 307.533 li
600.96 310.173 li
599.04 313.053 li
597.6 316.173 li
596.4 319.293 li
595.68 322.653 li
594.96 326.253 li
594.96 331.533 li
f
PRHMEM+Calibri*1 [28.08 0 0 -28.08 0 0 ]msf
618.96 336.093 mo
(')sh
true set_gvm
%ADOBeginSubsetFont: Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Calibri gcheck setglobal} if
10 9326 1004 <00020048ffed03c705210013002b00ea4019281201291101260d01260c01
2608012507012a03012902012db8ffc040250f024d602d01141810014d14
100f014d14160d014d140a0c014d14200b014d14180c014d14bb022d0000
0020ffe8b310014d20b8fff0b30f014d20b8ffeab30d014d20b8fff6b30c
014d20b8ffe8b60c014d24200120b8022d40090a200030004000030ab8ff
f040090f014d2f0a4f0a0200b8ffd040090f014d0a100f024d00b8ffc040
0a0f024d000a000a2d2c1bb8010ab20f5325b8010ab10556003fed3fed11
120139392f2f2b2b2b5d2b5d10e15d2b2b2b2b2b10e12b2b2b2b2b2b3130
5d2b5d5d5d5d5d5d5d5d01140e0223222e0235343e0233321e0207342e04
23220e0215141e0233323e0403c72f6db0817aa7662b306cb0807ba7662b
b00e1b2b3c4d30556a3d161e41654838553d281809028a95f6b16157a9f7
a094f7b16157a9f7ac619a76553719508cbc6c91cb803a24435e7285>Calibri AddT42Char 
Calibri /CharStrings get begin
/zero 1004 def
end
Calibri /Encoding get
dup 48 /zero put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/PRHMEL+Calibri*1 
[48{/.notdef}rp /zero 19{/.notdef}rp /D 6{/.notdef}rp /K 2{/.notdef}rp /N 
6{/.notdef}rp /U 14{/.notdef}rp /d 6{/.notdef}rp /k 2{/.notdef}rp /n 
6{/.notdef}rp /u /.notdef /w /.notdef /y /z 133{/.notdef}rp]
PRHMEL+Calibri nf
PRHMEL+Calibri*1 [18.72 0 0 -18.72 0 0 ]msf
637.2 342.813 mo
(0)sh
706.08 212.493 mo
666.48 324.813 li
668.4 325.293 li
708 213.213 li
706.08 212.493 li
663.12 322.413 mo
665.76 329.853 li
672.48 325.773 li
663.12 322.413 li
f
706.08 212.493 mo
666.48 324.813 li
668.4 325.293 li
708 213.213 li
706.08 212.493 li
663.12 322.413 mo
665.76 329.853 li
672.48 325.773 li
663.12 322.413 li
f
593.04 330.333 mo
494.16 218.253 li
495.6 216.813 li
594.72 329.133 li
593.04 330.333 li
491.76 221.613 mo
491.76 213.693 li
499.44 214.893 li
491.76 221.613 li
f
593.04 330.333 mo
494.16 218.253 li
495.6 216.813 li
594.72 329.133 li
593.04 330.333 li
491.76 221.613 mo
491.76 213.693 li
499.44 214.893 li
491.76 221.613 li
f
65.28 210.333 mo
65.28 190.653 81.36 174.333 101.28 174.333 cv
121.2 174.333 137.28 190.653 137.28 210.333 cv
137.28 230.253 121.2 246.333 101.28 246.333 cv
81.36 246.333 65.28 230.253 65.28 210.333 cv
1 1 1 rgb
ef
64.32 210.573 mo
64.32 206.733 li
65.04 203.133 li
66 199.533 li
67.2 196.173 li
68.64 192.813 li
70.56 189.693 li
72.72 187.053 li
75.12 184.413 li
77.76 182.013 li
80.4 179.853 li
83.52 177.933 li
86.88 176.253 li
90.24 175.053 li
93.84 174.093 li
97.44 173.613 li
99.36 173.373 li
103.2 173.373 li
104.88 173.613 li
108.72 174.093 li
112.08 175.053 li
115.68 176.253 li
118.8 177.933 li
121.92 179.613 li
124.8 181.773 li
127.44 184.173 li
129.84 186.813 li
132 189.693 li
133.68 192.813 li
135.36 195.933 li
136.56 199.293 li
137.52 202.893 li
138 206.493 li
138.24 208.413 li
138.24 212.253 li
138 214.173 li
137.52 217.773 li
136.56 221.373 li
135.36 224.733 li
133.68 228.093 li
132 230.973 li
129.84 233.853 li
127.44 236.493 li
124.8 238.893 li
121.92 241.053 li
118.8 242.973 li
115.68 244.413 li
112.32 245.853 li
108.72 246.573 li
105.12 247.293 li
103.2 247.293 li
101.28 247.533 li
99.36 247.293 li
97.44 247.293 li
93.84 246.573 li
90.24 245.853 li
86.88 244.653 li
83.76 242.973 li
80.64 241.053 li
77.76 239.133 li
75.12 236.733 li
72.72 234.093 li
70.56 231.213 li
68.64 228.093 li
67.2 224.973 li
66 221.373 li
65.04 218.013 li
64.32 214.173 li
64.32 210.573 li
66.24 212.253 mo
66.48 213.933 li
66.96 217.533 li
67.68 220.893 li
68.88 224.013 li
70.56 227.133 li
72.24 230.013 li
74.16 232.653 li
76.56 235.053 li
78.96 237.453 li
81.6 239.373 li
84.48 241.293 li
87.6 242.733 li
90.72 243.933 li
94.08 244.653 li
97.68 245.373 li
104.64 245.373 li
108.24 244.653 li
111.6 243.933 li
114.72 242.733 li
117.84 241.293 li
120.72 239.373 li
123.36 237.453 li
126 235.293 li
128.16 232.653 li
130.32 230.013 li
132 227.133 li
133.44 224.013 li
134.64 220.893 li
135.6 217.533 li
136.08 213.933 li
136.08 212.253 li
136.32 210.573 li
136.08 208.653 li
136.08 206.973 li
135.6 203.373 li
134.64 200.013 li
133.44 196.893 li
132 193.773 li
130.32 190.893 li
128.16 188.253 li
126 185.613 li
123.6 183.453 li
120.96 181.533 li
118.08 179.613 li
114.96 178.173 li
111.6 176.973 li
108.24 176.253 li
104.88 175.533 li
97.68 175.533 li
94.32 176.253 li
90.96 176.973 li
87.6 178.173 li
84.48 179.613 li
81.6 181.293 li
78.96 183.453 li
76.56 185.613 li
74.16 188.253 li
72.24 190.893 li
70.56 193.773 li
69.12 196.653 li
67.92 200.013 li
66.96 203.373 li
66.48 206.733 li
66.24 208.653 li
66.24 212.253 li
0 0 0 rgb
f
true set_gvm
%ADOBeginSubsetFont: QEHBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal QEHBAA+Calibri gcheck setglobal} if
1 2270 12 <00010018fe98034803bc0036003cb32a050a25bb0221001d000a01f7b314
141d2fb801f9400d001d32492a0520490f4f17054c003f333f3f12393f01
2fd4e112392fe110e1113939313001140e02071e0315140e0223222e0235
342e0627263633321e02171e03173e0335343633321e0203482a5c916705
0704010812201818201307070c1119253549320d1f3b1c24160b04344a32
180441603f1f2830191e1106039d73e1e5eb7b2d57544f23080b06030306
0b08497d76738094b3da82211503080b098ae9ba892859b4b7ba60100f03
080c>QEHBAA+Calibri AddT42Char 
QEHBAA+Calibri /CharStrings get begin
/;############ 12 def
end
QEHBAA+Calibri /Encoding get
dup 42 /;############ put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/PRHMEM+Calibri*1 
[32{/.notdef}rp /;## /;### 5{/.notdef}rp /;######### /;########## /.notdef /;############ 
213{/.notdef}rp]
PRHMEM+Calibri nf
PRHMEM+Calibri*1 [31.92 0 0 -31.92 0 0 ]msf
93.84 221.133 mo
(*)sh
102.24 246.333 mo
102.24 286.653 li
100.32 286.653 li
100.32 246.333 li
102.24 246.333 li
106.32 285.453 mo
101.28 291.453 li
96.24 285.453 li
106.32 285.453 li
f
102.24 246.333 mo
102.24 286.653 li
100.32 286.653 li
100.32 246.333 li
102.24 246.333 li
106.32 285.453 mo
101.28 291.453 li
96.24 285.453 li
106.32 285.453 li
f
65.28 327.453 mo
65.28 307.773 81.36 291.453 101.28 291.453 cv
121.2 291.453 137.28 307.773 137.28 327.453 cv
137.28 347.373 121.2 363.453 101.28 363.453 cv
81.36 363.453 65.28 347.373 65.28 327.453 cv
1 1 1 rgb
ef
64.32 327.453 mo
64.32 323.853 li
65.04 320.013 li
66 316.653 li
67.2 313.293 li
68.64 309.933 li
70.56 306.813 li
72.72 303.933 li
75.12 301.293 li
77.76 299.133 li
80.4 296.973 li
83.52 295.053 li
86.88 293.373 li
90.24 292.173 li
93.84 291.213 li
97.44 290.733 li
99.36 290.493 li
103.2 290.493 li
104.88 290.733 li
108.72 291.213 li
112.08 292.173 li
115.68 293.373 li
118.8 295.053 li
121.92 296.733 li
124.8 298.893 li
127.44 301.293 li
129.84 303.933 li
132 306.813 li
133.68 309.933 li
135.36 313.053 li
136.56 316.413 li
137.52 320.013 li
138 323.613 li
138.24 325.533 li
138.24 329.373 li
138 331.293 li
137.52 334.893 li
136.56 338.493 li
135.36 341.853 li
133.68 345.213 li
132 348.093 li
129.84 350.973 li
127.44 353.613 li
124.8 356.013 li
121.92 358.173 li
118.8 360.093 li
115.68 361.533 li
112.32 362.973 li
108.72 363.693 li
105.12 364.413 li
103.2 364.413 li
101.28 364.653 li
99.36 364.413 li
97.44 364.413 li
93.84 363.693 li
90.24 362.973 li
86.88 361.533 li
83.76 360.093 li
80.64 358.173 li
77.76 356.013 li
75.12 353.853 li
72.72 351.213 li
70.56 348.333 li
68.64 345.213 li
67.2 342.093 li
66 338.493 li
65.04 335.133 li
64.32 331.293 li
64.32 327.453 li
66.24 329.373 mo
66.48 331.053 li
66.96 334.653 li
67.68 338.013 li
68.88 341.133 li
70.56 344.253 li
72.24 347.133 li
74.16 349.773 li
76.56 352.173 li
78.96 354.573 li
81.6 356.493 li
84.48 358.173 li
87.6 359.853 li
90.72 361.053 li
94.08 361.773 li
97.68 362.253 li
99.36 362.493 li
102.96 362.493 li
104.64 362.253 li
108.24 361.773 li
111.6 361.053 li
114.72 359.853 li
117.84 358.413 li
120.72 356.493 li
123.36 354.573 li
126 352.413 li
128.16 349.773 li
130.32 347.133 li
132 344.253 li
133.44 341.133 li
134.64 338.013 li
135.6 334.653 li
136.08 331.053 li
136.08 329.373 li
136.32 327.453 li
136.08 325.773 li
136.08 324.093 li
135.6 320.493 li
134.64 317.133 li
133.44 314.013 li
132 310.893 li
130.32 308.013 li
128.16 305.373 li
126 302.733 li
123.6 300.573 li
120.96 298.653 li
118.08 296.733 li
114.96 295.293 li
111.6 294.093 li
108.24 293.373 li
104.88 292.653 li
97.68 292.653 li
94.32 293.133 li
90.96 294.093 li
87.6 295.293 li
84.48 296.733 li
81.6 298.413 li
78.96 300.573 li
76.56 302.733 li
74.16 305.133 li
72.24 308.013 li
70.56 310.893 li
69.12 313.773 li
67.92 317.133 li
66.96 320.493 li
66.48 323.853 li
66.24 325.773 li
66.24 329.373 li
0 0 0 rgb
f
true set_gvm
%ADOBeginSubsetFont: QEHBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal QEHBAA+Calibri gcheck setglobal} if
1 616 4 <00010028fff2043d03b700470047bf000f01dd002600150209001f000e01
bf400c3935391f391f39002a390f26b80103b42f481a4c40b80104b1074d
003fed3f3fed3232012fc439392f2f113910e110e1d4e1313025140e0423
222e03123721160e0823222e0235343e043523222635343e023321321e02
151406232306141e0333323633321e02043d080d1a242a172f513e2a1503
0ffec003141f28110b090e121b121c2111060f18281f1195101204080d09
03a7090d0904131097080c161d21111c430606070503561e200d0b080613
3c6fb7010abaa2febe8128130b07030203070a0509283780aee79b232312
1b110808111b122323a1e298582d0c11050d1600>QEHBAA+Calibri AddT42Char 
QEHBAA+Calibri /CharStrings get begin
/;#### 4 def
end
QEHBAA+Calibri /Encoding get
dup 34 /;#### put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/PRHMEM+Calibri*1 
[32{/.notdef}rp /;## /;### /;#### 4{/.notdef}rp /;######### /;########## /.notdef 
/;############ 213{/.notdef}rp]
PRHMEM+Calibri nf
PRHMEM+Calibri*1 [31.92 0 0 -31.92 0 0 ]msf
92.16 338.253 mo
(")sh
137.28 326.493 mo
414.48 326.493 li
414.48 328.653 li
137.28 328.653 li
137.28 326.493 li
413.28 322.653 mo
419.28 327.453 li
413.28 332.493 li
413.28 322.653 li
f
137.28 326.493 mo
414.48 326.493 li
414.48 328.653 li
137.28 328.653 li
137.28 326.493 li
413.28 322.653 mo
419.28 327.453 li
413.28 332.493 li
413.28 322.653 li
f
148.56 11.1331 mo
148.56 10.8931 148.8 10.6531 149.04 10.6531 cv
563.28 10.6531 li
563.52 10.6531 563.76 10.8931 563.76 11.1331 cv
563.76 418.173 li
563.76 418.413 563.52 418.653 563.28 418.653 cv
149.04 418.653 li
148.8 418.653 148.56 418.413 148.56 418.173 cv
149.52 418.173 mo
149.04 417.693 li
563.28 417.693 li
563.04 418.173 li
563.04 11.1331 li
563.28 11.3731 li
149.04 11.3731 li
149.52 11.1331 li
149.52 418.173 li
f
148.56 11.1331 mo
148.56 10.8931 148.8 10.6531 149.04 10.6531 cv
563.28 10.6531 li
563.52 10.6531 563.76 10.8931 563.76 11.1331 cv
563.76 418.173 li
563.76 418.413 563.52 418.653 563.28 418.653 cv
149.04 418.653 li
148.8 418.653 148.56 418.413 148.56 418.173 cv
149.52 418.173 mo
149.04 417.693 li
563.28 417.693 li
563.04 418.173 li
563.04 11.1331 li
563.28 11.3731 li
149.04 11.3731 li
149.52 11.1331 li
149.52 418.173 li
f
263.28 26.7331 mo
263.28 26.4931 263.28 26.2531 263.52 26.2531 cv
544.32 26.2531 li
544.56 26.2531 544.8 26.4931 544.8 26.7331 cv
544.8 151.293 li
544.8 151.533 544.56 151.773 544.32 151.773 cv
263.52 151.773 li
263.28 151.773 263.28 151.533 263.28 151.293 cv
264 151.293 mo
263.52 151.053 li
544.32 151.053 li
544.08 151.293 li
544.08 26.7331 li
544.32 26.9731 li
263.52 26.9731 li
264 26.7331 li
264 151.293 li
f
263.28 26.7331 mo
263.28 26.4931 263.28 26.2531 263.52 26.2531 cv
544.32 26.2531 li
544.56 26.2531 544.8 26.4931 544.8 26.7331 cv
544.8 151.293 li
544.8 151.533 544.56 151.773 544.32 151.773 cv
263.52 151.773 li
263.28 151.773 263.28 151.533 263.28 151.293 cv
264 151.293 mo
263.52 151.053 li
544.32 151.053 li
544.08 151.293 li
544.08 26.7331 li
544.32 26.9731 li
263.52 26.9731 li
264 26.7331 li
264 151.293 li
f
true set_gvm
%ADOBeginSubsetFont: Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Calibri gcheck setglobal} if
2 8556 87 <000200acfffa03c7050e001c00290078b12406b8ffe8b310014d06b8fff0
b30f014d06b8fff0b30d014d06b8fff6b30c014d06b8ffe8b30b014d06b8
02114017111d1810014d1d100f014d1d100c0d014c1d200b014d1db80232
b2001125b8010ab306060c23b8010bb315510c55003f3fed12392fed012f
d4e12b2b2b2b10e12b2b2b2b2b32313001140e02232311140e0223222e02
351134363321321e0407342e0223231133323e0203c74077ad7893091321
19192114082a1a01152a4d696d4c29b53b575d2c9f9b4e6746240393619c
6e3cfe2e080c070505070c0804aa282207173f5c79574f6a340efdf92847
6300>Calibri AddT42Char 
Calibri /CharStrings get begin
/P 87 def
end
Calibri /Encoding get
dup 80 /P put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/PRHMEL+Calibri*1 
[48{/.notdef}rp /zero 19{/.notdef}rp /D 6{/.notdef}rp /K 2{/.notdef}rp /N 
/.notdef /P 4{/.notdef}rp /U 14{/.notdef}rp /d 6{/.notdef}rp /k 
2{/.notdef}rp /n 6{/.notdef}rp /u /.notdef /w /.notdef /y 
/z 133{/.notdef}rp]
PRHMEL+Calibri nf
PRHMEL+Calibri*1 [18 0 0 -18 0 0 ]msf
522.48 138.333 mo
(P)sh
PRHMEL+Calibri*1 [12 0 0 -12 0 0 ]msf
531.84 142.653 mo
(u)sh
PRHMEL+Calibri*1 [18 0 0 -18 0 0 ]msf
522.48 138.333 mo
(P)sh
PRHMEL+Calibri*1 [12 0 0 -12 0 0 ]msf
531.84 142.653 mo
(u)sh
274.8 88.4131 mo
275.04 86.4931 li
275.04 84.5731 li
275.76 80.9731 li
276.48 77.3731 li
277.68 74.0131 li
279.36 70.8931 li
281.28 67.7731 li
283.44 64.8931 li
285.6 62.2531 li
288.24 59.8531 li
291.12 57.6931 li
294.24 56.0131 li
297.36 54.3331 li
300.96 53.1331 li
304.32 52.1731 li
308.16 51.6931 li
310.08 51.4531 li
313.68 51.4531 li
315.6 51.6931 li
319.2 52.1731 li
322.8 53.1331 li
326.16 54.3331 li
329.52 55.7731 li
332.64 57.6931 li
335.52 59.8531 li
337.92 62.2531 li
340.32 64.8931 li
342.48 67.7731 li
344.4 70.6531 li
346.08 74.0131 li
347.28 77.3731 li
348.24 80.9731 li
348.72 84.5731 li
348.96 86.4931 li
348.96 90.3331 li
348.72 92.2531 li
348.24 95.8531 li
347.28 99.4531 li
346.08 102.813 li
344.4 105.933 li
342.72 109.053 li
340.56 111.933 li
338.16 114.573 li
335.52 116.973 li
332.64 119.133 li
329.52 120.813 li
326.4 122.493 li
323.04 123.693 li
319.44 124.653 li
315.84 125.133 li
313.92 125.373 li
310.08 125.373 li
308.16 125.133 li
304.56 124.653 li
300.96 123.693 li
297.6 122.493 li
294.24 121.053 li
291.36 119.133 li
288.48 116.973 li
285.84 114.573 li
283.44 111.933 li
281.28 109.053 li
279.36 106.173 li
277.92 102.813 li
276.48 99.4531 li
275.76 95.8531 li
275.04 92.2531 li
275.04 90.3331 li
274.8 88.4131 li
276.96 90.0931 mo
276.96 92.0131 li
277.68 95.3731 li
278.4 98.7331 li
279.6 102.093 li
281.04 104.973 li
282.96 107.853 li
284.88 110.733 li
287.04 113.133 li
289.68 115.293 li
292.32 117.453 li
295.2 119.133 li
298.32 120.573 li
301.44 121.773 li
304.8 122.733 li
308.4 123.213 li
310.08 123.453 li
313.68 123.453 li
315.36 123.213 li
318.96 122.733 li
322.32 121.773 li
325.44 120.573 li
328.56 119.133 li
331.44 117.453 li
334.08 115.533 li
336.72 113.133 li
338.88 110.733 li
340.8 108.093 li
342.72 105.213 li
344.16 102.093 li
345.36 98.9731 li
346.08 95.6131 li
346.8 92.0131 li
346.8 84.8131 li
346.08 81.4531 li
345.36 78.0931 li
344.16 74.7331 li
342.72 71.8531 li
341.04 68.9731 li
338.88 66.0931 li
336.72 63.6931 li
334.32 61.5331 li
331.44 59.3731 li
328.56 57.6931 li
325.68 56.2531 li
322.32 55.0531 li
318.96 54.0931 li
315.6 53.6131 li
313.68 53.3731 li
310.08 53.3731 li
308.4 53.6131 li
304.8 54.0931 li
301.44 55.0531 li
298.32 56.2531 li
295.2 57.6931 li
292.32 59.3731 li
289.68 61.2931 li
287.28 63.6931 li
284.88 66.0931 li
282.96 68.7331 li
281.04 71.6131 li
279.6 74.7331 li
278.4 77.8531 li
277.68 81.2131 li
276.96 84.8131 li
276.96 90.0931 li
f
true set_gvm
%ADOBeginSubsetFont: Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Calibri gcheck setglobal} if
5 2956 400 <00010051ffed02ce03ca004900ce400c2f4b3f4b4f4b7f4baf4b0541b8ff
f0b30d014d41b8fff6b30c014d41b8fff0b30f014d41b8ffc0b313014d41
b8fff0b310014d41b8fff0b30b014d41b801dc401f243224320c1b100d01
4d1b0a0c014d1b1010014d1b100b014d1b100f014d1bba01f60000ffc040
0a0f014d000c400b014d0cb8ffc0402613014d3f0caf0c020c2edd370aeb
115011601170110337113711163cdb411b05294a16e8054d003fed3f1239
39ed1139392f2f5d10ed10ed012f5d2b2bd42be12b2b2b2b2b1239392f2f
e12b2b2b2b2b2b31305d01140e0223222e0435343e0233321e0233323e02
35342e0635343e0233321e0615140e0223222e0223220e0215141e0602ce
335e824e30574530160a04060b070b2b3f56382a44321b27405055514027
29527b5224483a291507030303070a06092236492f2a4029152840525553
4027010e456c4a260f171914241f131a10071b201b122336252634281f22
2b3e563c3561492c0c1215100c0f1610111910071619161323301c273528
20222a3c5400>Calibri AddT42Char 
Calibri /CharStrings get begin
/s 400 def
end
Calibri /Encoding get
dup 115 /s put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/PRHMEL+Calibri*1 
[48{/.notdef}rp /zero 19{/.notdef}rp /D 6{/.notdef}rp /K 2{/.notdef}rp /N 
/.notdef /P 4{/.notdef}rp /U 14{/.notdef}rp /d 6{/.notdef}rp /k 
2{/.notdef}rp /n 4{/.notdef}rp /s /.notdef /u /.notdef /w 
/.notdef /y /z 133{/.notdef}rp]
PRHMEL+Calibri nf
PRHMEL+Calibri*1 [18 0 0 -18 0 0 ]msf
301.92 94.4131 mo
(s)sh
PRHMEL+Calibri*1 [12 0 0 -12 0 0 ]msf
308.88 98.7331 mo
(un)
[6.23993 0 ]xsh
gsave
60.96 -83.1869 mo
60.96 456.813 li
780.96 456.813 li
780.96 -83.1869 li
60.96 -83.1869 li
451.2 52.8931 mo
449.28 53.1331 li
447.84 53.3731 li
446.64 53.6131 li
443.76 54.3331 li
441.6 55.0531 li
441.12 55.2931 li
440.4 55.5331 li
438.48 56.4931 li
437.76 56.7331 li
437.28 56.9731 li
437.04 57.2131 li
436.08 57.6931 li
435.84 57.9331 li
434.88 58.4131 li
434.64 58.6531 li
434.16 58.8931 li
433.92 59.1331 li
433.44 59.3731 li
432.96 59.8531 li
432.48 60.0931 li
432 60.5731 li
431.52 60.8131 li
430.08 62.2531 li
429.6 62.4931 li
427.68 64.4131 li
427.44 64.8931 li
426.24 66.0931 li
426 66.5731 li
425.52 67.0531 li
425.28 67.5331 li
424.8 68.0131 li
424.56 68.4931 li
424.32 68.7331 li
424.08 69.2131 li
423.84 69.4531 li
423.6 69.9331 li
423.36 70.1731 li
422.88 71.1331 li
422.64 71.3731 li
421.68 73.2931 li
421.44 74.0131 li
420.72 75.4531 li
420 77.6131 li
419.76 78.0931 li
419.04 80.9731 li
418.8 82.1731 li
418.56 83.6131 li
418.32 85.2931 li
418.32 92.4931 li
418.56 92.4931 li
418.56 94.1731 li
418.8 94.1731 li
418.8 95.6131 li
419.04 95.6131 li
419.04 96.8131 li
419.28 96.8131 li
419.28 97.7731 li
419.52 97.7731 li
419.52 98.7331 li
419.76 98.7331 li
419.76 99.6931 li
420 99.6931 li
420 100.173 li
420.24 100.173 li
420.24 100.893 li
420.48 100.893 li
420.48 101.613 li
420.72 101.613 li
420.72 102.093 li
420.96 102.093 li
420.96 102.813 li
421.2 102.813 li
421.2 103.293 li
421.44 103.293 li
421.44 103.773 li
421.68 103.773 li
421.68 104.253 li
421.92 104.253 li
421.92 104.733 li
422.16 104.733 li
422.16 105.453 li
422.4 105.453 li
422.4 105.933 li
422.64 105.933 li
422.88 106.173 li
422.88 106.653 li
423.12 106.653 li
423.12 107.133 li
423.36 107.133 li
423.6 107.373 li
423.6 107.853 li
423.84 107.853 li
423.84 108.333 li
424.08 108.333 li
424.32 108.573 li
424.32 109.053 li
424.56 109.053 li
424.8 109.293 li
424.8 109.773 li
425.04 109.773 li
425.52 110.253 li
425.52 110.733 li
425.76 110.733 li
426.24 111.213 li
426.24 111.693 li
426.48 111.693 li
427.92 113.133 li
427.92 113.613 li
428.16 113.613 li
429.36 114.813 li
429.84 115.053 li
431.52 116.733 li
432 116.973 li
432.48 117.453 li
432.96 117.693 li
433.44 118.173 li
433.92 118.413 li
434.16 118.653 li
434.64 118.893 li
434.88 119.133 li
435.84 119.613 li
436.08 119.853 li
440.4 122.013 li
442.56 122.733 li
443.04 122.973 li
443.76 123.213 li
446.64 123.933 li
449.52 124.413 li
451.68 124.653 li
456.96 124.893 li
456.96 124.653 li
459.12 124.413 li
460.56 124.173 li
461.76 123.933 li
464.64 123.213 li
466.8 122.493 li
467.28 122.253 li
468 122.013 li
468.48 121.773 li
469.2 121.533 li
471.6 120.333 li
471.84 120.093 li
472.8 119.613 li
473.04 119.373 li
474 118.893 li
474.24 118.653 li
474.72 118.413 li
475.2 117.933 li
475.68 117.693 li
476.16 117.213 li
476.64 116.973 li
477.36 116.253 li
477.84 116.013 li
481.44 112.413 li
481.68 111.933 li
482.4 111.213 li
482.64 110.733 li
483.12 110.253 li
483.36 109.773 li
483.84 109.293 li
484.08 108.813 li
484.32 108.573 li
484.8 107.613 li
485.04 107.373 li
485.52 106.413 li
485.76 106.173 li
486.24 105.213 li
486.48 104.493 li
487.44 102.573 li
487.92 101.133 li
488.16 100.653 li
488.64 99.2131 li
489.36 96.3331 li
489.6 94.8931 li
489.84 93.2131 li
490.08 91.0531 li
490.32 86.7331 li
490.08 86.7331 li
490.08 84.3331 li
489.84 84.3331 li
489.84 82.8931 li
489.6 82.8931 li
489.6 81.4531 li
489.36 81.4531 li
489.36 80.4931 li
489.12 80.4931 li
489.12 79.5331 li
488.88 79.5331 li
488.88 78.5731 li
488.64 78.5731 li
488.64 77.8531 li
488.4 77.8531 li
488.4 77.1331 li
488.16 77.1331 li
488.16 76.6531 li
487.92 76.6531 li
487.92 75.9331 li
487.68 75.9331 li
487.68 75.2131 li
487.44 75.2131 li
487.44 74.7331 li
487.2 74.7331 li
487.2 74.2531 li
486.96 74.2531 li
486.96 73.5331 li
486.72 73.5331 li
486.72 73.0531 li
486.48 73.0531 li
486.48 72.5731 li
486.24 72.5731 li
486.24 72.0931 li
486 72.0931 li
486 71.6131 li
485.76 71.3731 li
485.52 71.3731 li
485.52 70.8931 li
485.28 70.8931 li
485.28 70.4131 li
485.04 70.1731 li
484.8 70.1731 li
484.8 69.6931 li
484.56 69.6931 li
484.56 69.2131 li
484.32 68.9731 li
484.08 68.9731 li
484.08 68.4931 li
483.6 68.0131 li
483.36 68.0131 li
483.36 67.5331 li
482.88 67.0531 li
482.64 67.0531 li
482.64 66.5731 li
482.16 66.0931 li
481.92 66.0931 li
481.92 65.6131 li
477.36 61.0531 li
476.88 60.8131 li
476.4 60.3331 li
475.92 60.0931 li
475.44 59.6131 li
474.96 59.3731 li
474.48 58.8931 li
473.52 58.4131 li
473.28 58.1731 li
472.32 57.6931 li
472.08 57.4531 li
468.72 55.7731 li
468 55.5331 li
467.52 55.2931 li
466.08 54.8131 li
465.6 54.5731 li
464.88 54.3331 li
462 53.6131 li
460.8 53.3731 li
457.44 52.8931 li
451.2 52.8931 li
cp
eclp
418.32 88.8931 mo
418.32 68.9731 434.4 52.8931 454.32 52.8931 cv
474.24 52.8931 490.32 68.9731 490.32 88.8931 cv
490.32 108.813 474.24 124.893 454.32 124.893 cv
434.4 124.893 418.32 108.813 418.32 88.8931 cv
.25 .25 .25 rgb
ef
417.84 88.8931 mo
417.84 86.9731 li
418.08 85.0531 li
418.56 81.4531 li
419.52 78.0931 li
420.72 74.7331 li
422.16 71.6131 li
424.08 68.4931 li
426.24 65.8531 li
428.4 63.2131 li
431.04 60.8131 li
433.92 58.6531 li
436.8 56.9731 li
440.16 55.2931 li
443.52 54.0931 li
446.88 53.1331 li
450.48 52.6531 li
452.4 52.6531 li
454.32 52.4131 li
456 52.6531 li
457.92 52.6531 li
461.52 53.1331 li
465.12 54.0931 li
468.48 55.2931 li
471.6 56.9731 li
474.48 58.6531 li
477.36 60.8131 li
480 63.2131 li
482.4 65.6131 li
484.32 68.4931 li
486.24 71.6131 li
487.68 74.7331 li
488.88 78.0931 li
489.84 81.4531 li
490.56 85.0531 li
490.56 92.4931 li
489.84 96.0931 li
488.88 99.6931 li
487.68 103.053 li
486.24 106.173 li
484.32 109.293 li
482.4 111.933 li
480 114.573 li
477.36 116.973 li
474.72 119.133 li
471.6 120.813 li
468.48 122.253 li
465.12 123.693 li
461.52 124.413 li
457.92 125.133 li
450.48 125.133 li
446.88 124.413 li
443.52 123.693 li
440.16 122.493 li
437.04 120.813 li
433.92 119.133 li
431.04 116.973 li
428.64 114.573 li
426.24 111.933 li
424.08 109.293 li
422.16 106.173 li
420.72 103.053 li
419.52 99.6931 li
418.56 96.3331 li
418.08 92.4931 li
417.84 90.8131 li
417.84 88.8931 li
418.56 90.8131 mo
418.8 92.4931 li
419.28 96.0931 li
420.24 99.4531 li
421.44 102.813 li
422.88 105.933 li
424.8 108.813 li
426.72 111.453 li
429.12 114.093 li
431.52 116.253 li
434.4 118.413 li
437.28 120.093 li
440.4 121.773 li
443.52 122.973 li
447.12 123.693 li
450.72 124.413 li
457.92 124.413 li
461.52 123.693 li
464.88 122.973 li
468 121.773 li
471.12 120.093 li
474.24 118.413 li
476.88 116.253 li
479.52 114.093 li
481.68 111.453 li
483.84 108.813 li
485.52 105.933 li
486.96 102.813 li
488.16 99.4531 li
489.12 96.0931 li
489.6 92.4931 li
489.84 90.8131 li
489.84 86.9731 li
489.6 85.2931 li
489.12 81.6931 li
488.16 78.3331 li
486.96 74.9731 li
485.52 71.8531 li
483.84 68.9731 li
481.68 66.3331 li
479.52 63.6931 li
476.88 61.2931 li
474.24 59.3731 li
471.36 57.4531 li
468.24 56.0131 li
464.88 54.8131 li
461.52 53.8531 li
457.92 53.3731 li
456 53.3731 li
454.32 53.1331 li
452.4 53.3731 li
450.72 53.3731 li
447.12 53.8531 li
443.76 54.8131 li
440.4 56.0131 li
437.28 57.4531 li
434.4 59.3731 li
431.52 61.2931 li
429.12 63.6931 li
426.72 66.0931 li
424.8 68.9731 li
422.88 71.8531 li
421.44 74.9731 li
420.24 78.3331 li
419.28 81.6931 li
418.8 85.2931 li
418.56 86.9731 li
418.56 90.8131 li
0 0 0 rgb
f
grestore
418.32 88.8931 mo
418.32 68.9731 434.4 52.8931 454.32 52.8931 cv
474.24 52.8931 490.32 68.9731 490.32 88.8931 cv
490.32 108.813 474.24 124.893 454.32 124.893 cv
434.4 124.893 418.32 108.813 418.32 88.8931 cv
.25 .25 .25 rgb
ef
417.84 88.8931 mo
417.84 86.9731 li
418.08 85.0531 li
418.56 81.4531 li
419.52 78.0931 li
420.72 74.7331 li
422.16 71.6131 li
424.08 68.4931 li
426.24 65.8531 li
428.4 63.2131 li
431.04 60.8131 li
433.92 58.6531 li
436.8 56.9731 li
440.16 55.2931 li
443.52 54.0931 li
446.88 53.1331 li
450.48 52.6531 li
452.4 52.6531 li
454.32 52.4131 li
456 52.6531 li
457.92 52.6531 li
461.52 53.1331 li
465.12 54.0931 li
468.48 55.2931 li
471.6 56.9731 li
474.48 58.6531 li
477.36 60.8131 li
480 63.2131 li
482.4 65.6131 li
484.32 68.4931 li
486.24 71.6131 li
487.68 74.7331 li
488.88 78.0931 li
489.84 81.4531 li
490.56 85.0531 li
490.56 92.4931 li
489.84 96.0931 li
488.88 99.6931 li
487.68 103.053 li
486.24 106.173 li
484.32 109.293 li
482.4 111.933 li
480 114.573 li
477.36 116.973 li
474.72 119.133 li
471.6 120.813 li
468.48 122.253 li
465.12 123.693 li
461.52 124.413 li
457.92 125.133 li
450.48 125.133 li
446.88 124.413 li
443.52 123.693 li
440.16 122.493 li
437.04 120.813 li
433.92 119.133 li
431.04 116.973 li
428.64 114.573 li
426.24 111.933 li
424.08 109.293 li
422.16 106.173 li
420.72 103.053 li
419.52 99.6931 li
418.56 96.3331 li
418.08 92.4931 li
417.84 90.8131 li
417.84 88.8931 li
418.56 90.8131 mo
418.8 92.4931 li
419.28 96.0931 li
420.24 99.4531 li
421.44 102.813 li
422.88 105.933 li
424.8 108.813 li
426.72 111.453 li
429.12 114.093 li
431.52 116.253 li
434.4 118.413 li
437.28 120.093 li
440.4 121.773 li
443.52 122.973 li
447.12 123.693 li
450.72 124.413 li
457.92 124.413 li
461.52 123.693 li
464.88 122.973 li
468 121.773 li
471.12 120.093 li
474.24 118.413 li
476.88 116.253 li
479.52 114.093 li
481.68 111.453 li
483.84 108.813 li
485.52 105.933 li
486.96 102.813 li
488.16 99.4531 li
489.12 96.0931 li
489.6 92.4931 li
489.84 90.8131 li
489.84 86.9731 li
489.6 85.2931 li
489.12 81.6931 li
488.16 78.3331 li
486.96 74.9731 li
485.52 71.8531 li
483.84 68.9731 li
481.68 66.3331 li
479.52 63.6931 li
476.88 61.2931 li
474.24 59.3731 li
471.36 57.4531 li
468.24 56.0131 li
464.88 54.8131 li
461.52 53.8531 li
457.92 53.3731 li
456 53.3731 li
454.32 53.1331 li
452.4 53.3731 li
450.72 53.3731 li
447.12 53.8531 li
443.76 54.8131 li
440.4 56.0131 li
437.28 57.4531 li
434.4 59.3731 li
431.52 61.2931 li
429.12 63.6931 li
426.72 66.0931 li
424.8 68.9731 li
422.88 71.8531 li
421.44 74.9731 li
420.24 78.3331 li
419.28 81.6931 li
418.8 85.2931 li
418.56 86.9731 li
418.56 90.8131 li
0 0 0 rgb
f
1 1 1 rgb
true set_gvm
%ADOBeginSubsetFont: Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Calibri gcheck setglobal} if
5 1802 393 <00020099fe9403d503ca002a003d0080b53f3f0121360ab8fff0b30d014d
0ab8fff6b30c014d0ab8fff0b40f10014c0ab8ffe8b30b014d0ab801f840
17152b200d014d2b120c014d2b180f10014c2b180b014d2bb8020a400900
150a363521040530b80105b6264a1b49104f39b80105b1054d003fed3f3f
3fed121739012fd4e12b2b2b2b10e12b2b2b2b323931305d01140e022322
2e022711140e0223222e023511343e0233321e0215153e0333321e020734
2e0223220e020711161633323e0203d53363925e28444140240812201918
20130706121c14151b1207294c4d512d628a5728ae15335640203e404627
447a433e59371a01e976bc834710223423fe3e080c080404080c0804e909
0b080303080b09792a3e29154c84af754581643c13294331fe9a53583c64
7c00>Calibri AddT42Char 
Calibri /CharStrings get begin
/p 393 def
end
Calibri /Encoding get
dup 112 /p put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/PRHMEL+Calibri*1 
[48{/.notdef}rp /zero 19{/.notdef}rp /D 6{/.notdef}rp /K 2{/.notdef}rp /N 
/.notdef /P 4{/.notdef}rp /U 14{/.notdef}rp /d 6{/.notdef}rp /k 
2{/.notdef}rp /n /.notdef /p 2{/.notdef}rp /s /.notdef /u 
/.notdef /w /.notdef /y /z 133{/.notdef}rp]
PRHMEL+Calibri nf
PRHMEL+Calibri*1 [28.08 0 0 -28.08 0 0 ]msf
438.72 93.6931 mo
(p)sh
PRHMEL+Calibri*1 [18.72 0 0 -18.72 0 0 ]msf
453.36 100.413 mo
(un)
[9.82788 0 ]xsh
248.16 92.0131 mo
275.76 208.413 li
273.84 208.653 li
246.24 92.4931 li
248.16 92.0131 li
279.36 206.493 mo
276 213.453 li
269.76 208.653 li
279.36 206.493 li
0 0 0 rgb
f
248.16 92.0131 mo
275.76 208.413 li
273.84 208.653 li
246.24 92.4931 li
248.16 92.0131 li
279.36 206.493 mo
276 213.453 li
269.76 208.653 li
279.36 206.493 li
f
348 87.4531 mo
413.28 87.9331 li
413.28 89.8531 li
348 89.3731 li
348 87.4531 li
412.32 83.8531 mo
418.32 88.8931 li
412.32 93.9331 li
412.32 83.8531 li
f
348 87.4531 mo
413.28 87.9331 li
413.28 89.8531 li
348 89.3731 li
348 87.4531 li
412.32 83.8531 mo
418.32 88.8931 li
412.32 93.9331 li
412.32 83.8531 li
f
593.04 87.4531 mo
495.36 87.9331 li
495.36 89.8531 li
593.04 89.6131 li
593.04 87.4531 li
496.32 83.8531 mo
490.32 88.8931 li
496.32 93.9331 li
496.32 83.8531 li
f
593.04 87.4531 mo
495.36 87.9331 li
495.36 89.8531 li
593.04 89.6131 li
593.04 87.4531 li
496.32 83.8531 mo
490.32 88.8931 li
496.32 93.9331 li
496.32 83.8531 li
f
true set_gvm
%ADOBeginSubsetFont: Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Calibri gcheck setglobal} if
2 322 4 <00020023fffa047e051400220026009db90024ffe8b40c10014c23b8ffe8
b40c10014c26b8fff0b40b10014c0bb8fff0b40b10014c0ab8fff0401a0b
10014c25100b10014c0d100b10014c0c100b10014c40280125b8fff0402c
0b014d24232625f40c0b0c18221d230a0d0116040c000c100c02af23bf23
cf2303230c230c121d5212550555003f3f3f1239392f2f5d5d1117391112
3939113310ed3211333130012b5d2b2b2b2b2b2b002b2b25161606062322
2e02270321030e03232226263637013e0333321e02170723032104750801
10251f1f251309046ffde66a030a13231c1d250f010801b2040d19271e20
2a1a0e047b01df01c23d161b0e0403070c09013bfec9090d0904050e1b16
04b20b0e080303080f0b8dfd7b00>Calibri AddT42Char 
2 6036 62 <000100ac0000034b0514001a0048b90015ffe8b310014d15b8fff0b30f01
4d15b8fff0b30d014d15b8fff6b30c014d15b8ffe8b30b014d15b80211b4
00090f5215b8012bb10654003fed3f012fcde12b2b2b2b2b313025140e02
232122263511343e0233321e02151121321e02034b04090d09fdc4172908
1422181921140801d0090d09044b141b13091f2704ae080c070505070c08
fba109111c00>Calibri AddT42Char 
2 10610 100 <0001000ffffa03d7050e00220065b718400d014d181100b8ffc0b40d014d
0006b8ffe8b310014d06b8fff0b30f014d06b8fff0b30d014d06b8fff6b3
0c014d06b8ffe8b30b014d06ba02110011ffc0b50d014d110612b80128b3
1d510c55003f3fed32012f2bf12b2b2b2b2bc52b10c42b313001140e0223
2111140e0223222e02351121222e0235343e023321321e0203d704090d08
fe940814211918221408fe94080d080505080d080384080d090404c4131c
1108fb9e080c070505070c08046208111c13131d120808121d00>Calibri AddT42Char 
3 7990 258 <0002005cffed033f03ca0033004000b040200f421f422f42030b0917340c
0c014d34100d014d34180b014d34100f10014c34b801f7400e0027270f00
010c00100f014d003ab8fff0b30c014d3ab8ffe8b30d014d3ab8ffe8b30b
014d3ab8ffe8b40f10014c3ab8020840141117c500341034023bc0340100
340134342e412ab8011b400fd022012222041dea2e4a3ddc0c4d04002f3f
ed3fed12392f5ded1112392f5d715e5ded012fe12b2b2b2bc42b5e5d392f
10e12b2b2b2b323931305e5d25140606232226263535060623222e023534
3e02333335342e0223220e0223222e0235343e0433321e02150723220e02
15141633323637033f101c1b1a1f0e3b91514773512d3e74a8697c16314e
393d6149310c080c0904071b4256663461885426a48d4464421f5950416f
3d180c0c06060c0c5a3f46254666414c704a25463450351b1d231d081019
0f191d1a231d132c557e54c4172d3f2946534244>Calibri AddT42Char 
3 13250 286 <0002005dffed039903ca002b003400ae402a2f363f366f360313200d014d
13200f014d1313212c100c014d2c180b014d2c100d014d2c100f10014c2c
b801f9b5442ba42b022bb8fff0b50f014d2b3404b8ffe0b30d014d04b8ff
eeb30c014d04b8ffe0b30b014d04b8ffe8b40f10014c04b8020a4021212c
c78004900402c00401d0040104041c2fdc264a18ea600e700e020e09ea1c
4d003ffdd45ded3fed12392f5d7172ed012fe12b2b2b2b32dd2b5de12b2b
2b2b12392f2b2b31305d0114062321141e0233323e0233321e0215140e06
23222e0235343e0233321e021527362623220e020703992719fdb21e4670
514064492f0c070b06030203070b365671406fa7723a3c71a0636a95602d
a60379773d5c3e2202020227214b78562e151a15070e19120d130f0c0b19
18133e7ab87a74b9814544739b581382942e4c653700>Calibri AddT42Char 
4 11412 336 <00030035fe93038903c8003e004e005f00d04015122d47100f014d47080c
014d47201013014c47333fb8fff8b30c014d3fb8fff0b30f014d3fb8ffe0
b61013014c3f074fb8ffe0400d0f12014c4f1b040f3003330707b8ffe0b3
10014d1bb8ffc0400d10014d2d33071b1b07332d0400b8ffe040340b014d
0058100f014d58201012014c582a25400b12014c250f300703384ada0c53
e81515603803e93c482a2042d9384a5bd9204f003fed3fed12393fed1112
392fedd6ed121739012f2b33cd2b2bc42b17392f2f2f2f2b2b1112173910
cd2b10cd2b2b2b10cd2b2b2b10cd31300114062323161615140e02232226
27060615141617171e0315140e0223222e0235343e023726263534363726
2635343e023332161721321601342623220e0215141633323e0213342627
270e0315141633323e020389130f81231c325d804e37631b12174136eb43
70522e346ba6716d99622c10213120312f32251f24345c814c29471f0110
1111fefe655d30472f17655b31482f17535f51e92029180984764b653e1b
0374231f24572f4e78532c1d16122e1e232e020a02213d593b3e70553125
405934213e383319194c2c3d6026255d424d7a542d090821fef15c672038
492859661f3748fd5e3a3f0208192d29281541431d303e00>Calibri AddT42Char 
5 2646 396 <00010099fffa02a703ca00330063b4703501260fb8fff6b30c014d0fb8ff
e8b30b014d0fb8fff0b40f10014c0fb8fff0b30d014d0fb801f840120040
13014d004011014d00200d014d001a0ab8012540092b4a260f152049154c
003f3f1239393fed012fc42b2b2be12b2b2b2b3931305d01140e0223222e
0223220e020711140e0223222e023511343e0233321e0215153e0333321e
0602a70206090808171d24151930353a23081220191820130706121c1716
1d100725413a391d0d21241d0c0403010362161e1109090908142e4c37fd
b0080b080404080b080384080b090303090b08833644270f03080a0a090e
1b00>Calibri AddT42Char 
Calibri /CharStrings get begin
/A 4 def
/L 62 def
/T 100 def
/a 258 def
/e 286 def
/g 336 def
/r 396 def
end
Calibri /Encoding get
dup 65 /A put
dup 76 /L put
dup 84 /T put
dup 97 /a put
dup 101 /e put
dup 103 /g put
dup 114 /r put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/PRHMEL+Calibri*1 
[48{/.notdef}rp /zero 16{/.notdef}rp /A 2{/.notdef}rp /D 6{/.notdef}rp /K 
/L /.notdef /N /.notdef /P 3{/.notdef}rp /T /U 
11{/.notdef}rp /a 2{/.notdef}rp /d /e /.notdef /g 3{/.notdef}rp 
/k 2{/.notdef}rp /n /.notdef /p /.notdef /r /s 
/.notdef /u /.notdef /w /.notdef /y /z 133{/.notdef}rp]
PRHMEL+Calibri nf
PRHMEL+Calibri*1 [28.08 0 0 -28.08 0 0 ]msf
110.16 -32.3069 mo
(u)sh
124.8 -32.3069 mo
(s)sh
135.84 -32.3069 mo
(e)sh
149.76 -32.3069 mo
(r)sh
159.6 -32.3069 mo
(T)sh
171.12 -32.3069 mo
(a)sh
184.57 -32.3069 mo
(gL)
[13.1998 0 ]xsh
209.538 -32.3069 mo
(DA)
[16.8002 0 ]xsh
591.84 88.6531 mo
592.08 86.7331 li
592.08 84.8131 li
592.8 81.2131 li
593.52 77.6131 li
594.72 74.2531 li
596.4 70.8931 li
598.32 68.0131 li
600.24 65.1331 li
602.64 62.4931 li
605.28 60.0931 li
608.16 57.9331 li
611.28 56.0131 li
614.4 54.5731 li
618 53.1331 li
621.36 52.4131 li
625.2 51.6931 li
627.12 51.6931 li
628.8 51.4531 li
630.72 51.6931 li
632.64 51.6931 li
636.24 52.4131 li
639.84 53.1331 li
643.2 54.3331 li
646.56 56.0131 li
649.68 57.9331 li
652.56 59.8531 li
654.96 62.2531 li
657.36 64.8931 li
659.52 67.7731 li
661.44 70.8931 li
663.12 74.0131 li
664.32 77.6131 li
665.28 80.9731 li
665.76 84.8131 li
666 86.7331 li
666 90.3331 li
665.76 92.2531 li
665.28 95.8531 li
664.32 99.4531 li
663.12 102.813 li
661.44 106.173 li
659.76 109.293 li
657.6 112.173 li
655.2 114.573 li
652.56 116.973 li
649.68 119.133 li
646.56 121.053 li
643.44 122.733 li
640.08 123.933 li
636.48 124.893 li
632.88 125.373 li
630.96 125.613 li
627.12 125.613 li
625.2 125.373 li
621.6 124.893 li
618 123.933 li
614.64 122.733 li
611.28 121.053 li
608.4 119.373 li
605.52 117.213 li
602.88 114.813 li
600.48 112.173 li
598.32 109.293 li
596.4 106.173 li
594.96 103.053 li
593.52 99.6931 li
592.8 96.0931 li
592.08 92.4931 li
592.08 90.5731 li
591.84 88.6531 li
594 90.3331 mo
594 92.0131 li
594.72 95.6131 li
595.44 98.9731 li
596.64 102.093 li
598.08 105.213 li
600 108.093 li
601.92 110.733 li
604.08 113.373 li
606.72 115.533 li
609.36 117.453 li
612.24 119.373 li
615.36 120.813 li
618.48 122.013 li
621.84 122.733 li
625.44 123.453 li
632.4 123.453 li
636 122.733 li
639.36 122.013 li
642.48 120.813 li
645.6 119.373 li
648.48 117.693 li
651.12 115.533 li
653.76 113.373 li
655.92 110.973 li
657.84 108.093 li
659.76 105.213 li
661.2 102.333 li
662.4 98.9731 li
663.12 95.6131 li
663.84 92.2531 li
663.84 85.0531 li
663.12 81.4531 li
662.4 78.0931 li
661.2 74.9731 li
659.76 71.8531 li
658.08 68.9731 li
655.92 66.3331 li
653.76 63.9331 li
651.36 61.5331 li
648.48 59.6131 li
645.6 57.6931 li
642.72 56.2531 li
639.36 55.0531 li
636 54.3331 li
632.64 53.6131 li
625.44 53.6131 li
621.84 54.3331 li
618.48 55.0531 li
615.36 56.2531 li
612.24 57.6931 li
609.36 59.6131 li
606.72 61.5331 li
604.32 63.6931 li
601.92 66.3331 li
600 68.9731 li
598.08 71.8531 li
596.64 74.9731 li
595.44 78.0931 li
594.72 81.4531 li
594 85.0531 li
594 90.3331 li
f
true set_gvm
%ADOBeginSubsetFont: QEHBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal QEHBAA+Calibri gcheck setglobal} if
1 1968 11 <00010094fe940507057100550045b347473c42b801f7b200053cb801f9b4
311010002cb801f84009164c4937462149313db80103b405114c0b4e003f
3f33ed323f3f3f012fe1c4392f33e13210e111392f313001140e02071114
0e0223222e0235112e0335343635342627263e0233321e02171616151406
15141e021711343e0233321e0215113e0335342e0235343e0233321e0217
1e0305073e7bba7a09122018191f13087fb574360a05050208122117191f
13090105050a244b775308131f1918201209557d51260e110e08121f1917
201309020b100a0501f17ab9804708fec5080c080404080c080139053e71
a66d529f51295428080d090304080c082851284e994e547a512a0404d708
0d080404080c08fb28052f58865d47937e570b060a070303080c084b7d69
5700>QEHBAA+Calibri AddT42Char 
QEHBAA+Calibri /CharStrings get begin
/;########### 11 def
end
QEHBAA+Calibri /Encoding get
dup 41 /;########### put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/PRHMEM+Calibri*1 
[32{/.notdef}rp /;## /;### /;#### 4{/.notdef}rp /;######### /;########## /;########### 
/;############ 213{/.notdef}rp]
PRHMEM+Calibri nf
PRHMEM+Calibri*1 [28.08 0 0 -28.08 0 0 ]msf
617.76 94.8931 mo
(\))sh
PRHMEL+Calibri*1 [18.72 0 0 -18.72 0 0 ]msf
637.68 101.613 mo
(k)sh
579.36 46.6531 mo
579.36 46.6531 579.6 46.4131 579.84 46.4131 cv
686.16 46.4131 li
686.4 46.4131 686.4 46.6531 686.4 46.6531 cv
686.4 133.533 li
686.4 133.773 686.4 133.773 686.16 133.773 cv
579.84 133.773 li
579.6 133.773 579.36 133.773 579.36 133.533 cv
580.08 133.533 mo
579.84 133.053 li
686.16 133.053 li
685.68 133.533 li
685.68 46.6531 li
686.16 47.1331 li
579.84 47.1331 li
580.08 46.6531 li
580.08 133.533 li
f
579.36 46.6531 mo
579.36 46.6531 579.6 46.4131 579.84 46.4131 cv
686.16 46.4131 li
686.4 46.4131 686.4 46.6531 686.4 46.6531 cv
686.4 133.533 li
686.4 133.773 686.4 133.773 686.16 133.773 cv
579.84 133.773 li
579.6 133.773 579.36 133.773 579.36 133.533 cv
580.08 133.533 mo
579.84 133.053 li
686.16 133.053 li
685.68 133.533 li
685.68 46.6531 li
686.16 47.1331 li
579.84 47.1331 li
580.08 46.6531 li
580.08 133.533 li
f
PRHMEL+Calibri*1 [16.08 0 0 -16.08 0 0 ]msf
666.24 128.733 mo
(K)sh
666.24 128.733 mo
(K)sh
706.08 213.213 mo
665.52 93.6931 li
667.44 92.9731 li
708 212.733 li
706.08 213.213 li
662.16 95.8531 mo
665.04 88.6531 li
671.52 92.7331 li
662.16 95.8531 li
f
706.08 213.213 mo
665.52 93.6931 li
667.44 92.9731 li
708 212.733 li
706.08 213.213 li
662.16 95.8531 mo
665.04 88.6531 li
671.52 92.7331 li
662.16 95.8531 li
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.29 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
